/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
}());


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

(function webpackUniversalModuleDefinition(root, factory) {
  if (( false ? "undefined" : _typeof2(exports)) === 'object' && ( false ? "undefined" : _typeof2(module)) === 'object') module.exports = factory(__webpack_require__(1), __webpack_require__(2));else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {
    var a = (typeof exports === "undefined" ? "undefined" : _typeof2(exports)) === 'object' ? factory(require("react"), require("classnames")) : factory(root["React"], root["classNames"]);

    for (var i in a) {
      ((typeof exports === "undefined" ? "undefined" : _typeof2(exports)) === 'object' ? exports : root)[i] = a[i];
    }
  }
})(typeof self !== 'undefined' ? self : this, function (__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_4__) {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId]) {
          /******/
          return installedModules[moduleId].exports;
          /******/
        }
        /******/
        // Create a new module (and put it into the cache)

        /******/


        var module = installedModules[moduleId] = {
          /******/
          i: moduleId,

          /******/
          l: false,

          /******/
          exports: {}
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.l = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // define getter function for harmony exports

      /******/

      __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
          /******/
          Object.defineProperty(exports, name, {
            /******/
            configurable: false,

            /******/
            enumerable: true,

            /******/
            get: getter
            /******/

          });
          /******/
        }
        /******/

      };
      /******/

      /******/
      // getDefaultExport function for compatibility with non-harmony modules

      /******/


      __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
        /******/
        function getDefault() {
          return module['default'];
        } :
        /******/
        function getModuleExports() {
          return module;
        };
        /******/

        __webpack_require__.d(getter, 'a', getter);
        /******/


        return getter;
        /******/
      };
      /******/

      /******/
      // Object.prototype.hasOwnProperty.call

      /******/


      __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      /******/

      /******/
      // __webpack_public_path__

      /******/


      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(__webpack_require__.s = 56);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports) {
      module.exports = __WEBPACK_EXTERNAL_MODULE_0__;
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        /**
        * Copyright 2013-2015, Facebook, Inc.
        * All rights reserved.
        *
        * This source code is licensed under the BSD-style license found in the
        * LICENSE file in the root directory of this source tree. An additional grant
        * of patent rights can be found in the PATENTS file in the same directory.
        */

        /**
         * Use invariant() to assert state which your program assumes to be true.
         *
         * Provide sprintf-style format (only %s is supported) and arguments
         * to provide information about what broke and what you were
         * expecting.
         *
         * The invariant message will be stripped in production, but the invariant
         * will remain to ensure logic does not differ in production.
         */
        var invariant = function invariant(condition, format, a, b, c, d, e, f) {
          if (process.env.NODE_ENV !== 'production') {
            if (format === undefined) {
              throw new Error('invariant requires an error message argument');
            }
          }

          if (!condition) {
            var error;

            if (format === undefined) {
              error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
            } else {
              var args = [a, b, c, d, e, f];
              var argIndex = 0;
              error = new Error(format.replace(/%s/g, function () {
                return args[argIndex++];
              }));
              error.name = 'Invariant Violation';
            }

            error.framesToPop = 1; // we don't care about invariant's own frame

            throw error;
          }
        };

        module.exports = invariant;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(2));
      /***/
    },
    /* 2 */

    /***/
    function (module, exports) {
      // shim for using process in browser
      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }

      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }

      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }

        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();

      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        } // if setTimeout wasn't available but was latter defined


        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }

      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        } // if clearTimeout wasn't available but was latter defined


        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }
      }

      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }

        draining = false;

        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }

        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }

        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;

        while (len) {
          currentQueue = queue;
          queue = [];

          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }

          queueIndex = -1;
          len = queue.length;
        }

        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);

        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }

        queue.push(new Item(fun, args));

        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      }; // v8 likes predictible objects


      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }

      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };

      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = ''; // empty string to avoid regexp issues

      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () {
        return '/';
      };

      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };

      process.umask = function () {
        return 0;
      };
      /***/

    },
    /* 3 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return TimeSpan;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0__Time__ = __webpack_require__(24);

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /**
       * 一度生成したオブジェクトは変更しません。
       * 変更メソッドは新しいオブジェクトを帰します。
       */


      var TimeSpan =
      /*#__PURE__*/
      function () {
        _createClass(TimeSpan, null, [{
          key: "create",
          value: function create(start, end) {
            return new TimeSpan(new __WEBPACK_IMPORTED_MODULE_0__Time__["a"
            /* default */
            ](start[0], start[1]), new __WEBPACK_IMPORTED_MODULE_0__Time__["a"
            /* default */
            ](end[0], end[1]));
          }
        }]);

        function TimeSpan(startTime, endTime) {
          _classCallCheck(this, TimeSpan);

          if (startTime === undefined) {
            startTime = new __WEBPACK_IMPORTED_MODULE_0__Time__["a"
            /* default */
            ]();
          }

          if (endTime === undefined) {
            endTime = new __WEBPACK_IMPORTED_MODULE_0__Time__["a"
            /* default */
            ]();
          }

          while (startTime.compare(endTime) >= 0) {
            endTime = endTime.addMin(24 * 60);
          }

          this._startTime = startTime;
          this._endTime = endTime;
        }

        _createClass(TimeSpan, [{
          key: "clone",
          value: function clone() {
            return new TimeSpan(this.getStartTime().clone(), this.getEndTime().clone());
          }
        }, {
          key: "getDistance",
          value: function getDistance() {
            return this._startTime.getDistance(this._endTime);
          }
        }, {
          key: "getStartTime",
          value: function getStartTime() {
            return this._startTime;
          }
        }, {
          key: "getEndTime",
          value: function getEndTime() {
            return this._endTime;
          }
        }, {
          key: "shiftEndTime",
          value: function shiftEndTime(time) {
            return new TimeSpan(time.addMin(-this.getDistance()), time);
          }
        }, {
          key: "shiftStartHour",
          value: function shiftStartHour(hour) {
            return this.shiftStartTime(new __WEBPACK_IMPORTED_MODULE_0__Time__["a"
            /* default */
            ](hour, this._startTime.getMin()));
          }
        }, {
          key: "shiftStartMin",
          value: function shiftStartMin(min) {
            return this.shiftStartTime(new __WEBPACK_IMPORTED_MODULE_0__Time__["a"
            /* default */
            ](this._startTime.getHour(), min));
          }
        }, {
          key: "shiftStartTime",
          value: function shiftStartTime(time) {
            return new TimeSpan(time, time.addMin(this.getDistance()));
          }
        }, {
          key: "addMin",
          value: function addMin(minute) {
            return new TimeSpan(this.getStartTime(), this.getEndTime().addMin(minute));
          }
        }, {
          key: "equals",
          value: function equals(timeSpan) {
            return this.getStartTime().equals(timeSpan.getStartTime()) && this.getEndTime().equals(timeSpan.getEndTime());
          }
        }, {
          key: "contains",
          value: function contains(timeSpan) {
            return this.getStartTime().compare(timeSpan.getStartTime()) < 0 && this.getEndTime().compare(timeSpan.getEndTime()) > 0;
          }
        }, {
          key: "containsTime",
          value: function containsTime(time) {
            return this.getStartTime().compare(time) < 0 && this.getEndTime().compare(time) > 0;
          }
        }, {
          key: "overlaps",
          value: function overlaps(timeSpan) {
            if (timeSpan.contains(this)) {
              return true;
            }

            if (this.containsTime(timeSpan.getStartTime())) {
              return true;
            }

            if (this.containsTime(timeSpan.getEndTime())) {
              return true;
            }

            return false;
          }
        }, {
          key: "eachHour",
          value: function eachHour(callback) {
            var hour = this.getStartTime().getHour();
            var end = this.getEndTime().getHour();
            var key = 0;

            while (true) {
              if (hour === end) {
                callback.call(hour, key, hour, this.getEndTime().getMin());
                break;
              } else {
                callback.call(hour, key, hour);
              }

              hour += 1;
              ++key;
            }
          }
        }, {
          key: "eachTime",
          value: function eachTime(callback, minuteInterval) {
            var key = 0;
            minuteInterval = minuteInterval ? minuteInterval : 60;
            var time = this.getStartTime();

            while (true) {
              if (time.compare(this.getEndTime()) > 0) {
                break;
              }

              callback.call(time, key, time);
              time = time.addMin(minuteInterval);
              ++key;
            }
          }
        }, {
          key: "toString",
          value: function toString() {
            return this._startTime + '~' + this._endTime;
          }
        }]);

        return TimeSpan;
      }();
      /***/

    },
    /* 4 */

    /***/
    function (module, exports) {
      module.exports = __WEBPACK_EXTERNAL_MODULE_4__;
      /***/
    },
    /* 5 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseGetTag = __webpack_require__(49),
          getPrototype = __webpack_require__(153),
          isObjectLike = __webpack_require__(155);
      /** `Object#toString` result references. */


      var objectTag = '[object Object]';
      /** Used for built-in method references. */

      var funcProto = Function.prototype,
          objectProto = Object.prototype;
      /** Used to resolve the decompiled source of functions. */

      var funcToString = funcProto.toString;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /** Used to infer the `Object` constructor. */

      var objectCtorString = funcToString.call(Object);
      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */

      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }

        var proto = getPrototype(value);

        if (proto === null) {
          return true;
        }

        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }

      module.exports = isPlainObject;
      /***/
    },
    /* 6 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return Ruler;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__classes_TimeSpan__ = __webpack_require__(3);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      var Ruler =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(Ruler, _React$Component);

        function Ruler(props) {
          var _this;

          _classCallCheck(this, Ruler);

          _this = _possibleConstructorReturn(this, _getPrototypeOf(Ruler).call(this, props));
          _this.state = {
            hours: []
          };

          _this.props.timeSpan.eachTime(function (key, time) {
            if (!time.equals(_this.props.timeSpan.getEndTime())) {
              var style = {
                //border1pxを足す
                height: (_this.props.minHeight + 1) * 4
              };

              _this.state.hours.push(__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                key: time.getHour(),
                style: style
              }, time.getDisplayHour()));
            }
          });

          return _this;
        }

        _createClass(Ruler, [{
          key: "render",
          value: function render() {
            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              className: "tlRulerView",
              style: {
                width: Ruler.width + 'px'
              }
            }, this.state.hours);
          }
        }]);

        return Ruler;
      }(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component); // Ruler.propTypes = {
      //   minHeight: React.PropTypes.number.isRequired,
      //   timeSpan: React.PropTypes.instanceOf(TimeSpan).isRequired
      // }


      Ruler.width = 30;
      /***/
    },
    /* 7 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var DragDropContext_1 = __webpack_require__(25);

      exports.DragDropContext = DragDropContext_1.DragDropContext;
      exports.DragDropContextProvider = DragDropContext_1.DragDropContextProvider;

      var DragLayer_1 = __webpack_require__(148);

      exports.DragLayer = DragLayer_1.default;

      var DragSource_1 = __webpack_require__(156);

      exports.DragSource = DragSource_1.default;

      var DropTarget_1 = __webpack_require__(169);

      exports.DropTarget = DropTarget_1.default;
      /***/
    },
    /* 8 */

    /***/
    function (module, exports) {
      var g; // This works in non-strict mode

      g = function () {
        return this;
      }();

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function("return this")() || (1, eval)("this");
      } catch (e) {
        // This works if the window reference is available
        if ((typeof window === "undefined" ? "undefined" : _typeof2(window)) === "object") g = window;
      } // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}


      module.exports = g;
      /***/
    },
    /* 9 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var __assign = this && this.__assign || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var matchesType_1 = __webpack_require__(40);

      var invariant = __webpack_require__(10);

      var isObject = __webpack_require__(26);

      exports.BEGIN_DRAG = 'dnd-core/BEGIN_DRAG';
      exports.PUBLISH_DRAG_SOURCE = 'dnd-core/PUBLISH_DRAG_SOURCE';
      exports.HOVER = 'dnd-core/HOVER';
      exports.DROP = 'dnd-core/DROP';
      exports.END_DRAG = 'dnd-core/END_DRAG';

      function createDragDropActions(manager) {
        return {
          beginDrag: function beginDrag(sourceIds, _a) {
            if (sourceIds === void 0) {
              sourceIds = [];
            }

            var _b = _a === void 0 ? {
              publishSource: true
            } : _a,
                publishSource = _b.publishSource,
                clientOffset = _b.clientOffset,
                getSourceClientOffset = _b.getSourceClientOffset;

            var monitor = manager.getMonitor();
            var registry = manager.getRegistry();
            invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');

            for (var _i = 0, sourceIds_1 = sourceIds; _i < sourceIds_1.length; _i++) {
              var s = sourceIds_1[_i];
              invariant(registry.getSource(s), 'Expected sourceIds to be registered.');
            }

            var sourceId = null;

            for (var i = sourceIds.length - 1; i >= 0; i--) {
              if (monitor.canDragSource(sourceIds[i])) {
                sourceId = sourceIds[i];
                break;
              }
            }

            if (sourceId === null) {
              return;
            }

            var sourceClientOffset = null;

            if (clientOffset) {
              invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');
              sourceClientOffset = getSourceClientOffset(sourceId);
            }

            var source = registry.getSource(sourceId);
            var item = source.beginDrag(monitor, sourceId);
            invariant(isObject(item), 'Item must be an object.');
            registry.pinSource(sourceId);
            var itemType = registry.getSourceType(sourceId);
            return {
              type: exports.BEGIN_DRAG,
              payload: {
                itemType: itemType,
                item: item,
                sourceId: sourceId,
                clientOffset: clientOffset || null,
                sourceClientOffset: sourceClientOffset || null,
                isSourcePublic: !!publishSource
              }
            };
          },
          publishDragSource: function publishDragSource() {
            var monitor = manager.getMonitor();

            if (!monitor.isDragging()) {
              return;
            }

            return {
              type: exports.PUBLISH_DRAG_SOURCE
            };
          },
          hover: function hover(targetIdsArg, _a) {
            var clientOffset = (_a === void 0 ? {} : _a).clientOffset;
            invariant(Array.isArray(targetIdsArg), 'Expected targetIds to be an array.');
            var targetIds = targetIdsArg.slice(0);
            var monitor = manager.getMonitor();
            var registry = manager.getRegistry();
            invariant(monitor.isDragging(), 'Cannot call hover while not dragging.');
            invariant(!monitor.didDrop(), 'Cannot call hover after drop.'); // First check invariants.

            for (var i = 0; i < targetIds.length; i++) {
              var targetId = targetIds[i];
              invariant(targetIds.lastIndexOf(targetId) === i, 'Expected targetIds to be unique in the passed array.');
              var target = registry.getTarget(targetId);
              invariant(target, 'Expected targetIds to be registered.');
            }

            var draggedItemType = monitor.getItemType(); // Remove those targetIds that don't match the targetType.  This
            // fixes shallow isOver which would only be non-shallow because of
            // non-matching targets.

            for (var i = targetIds.length - 1; i >= 0; i--) {
              var targetId = targetIds[i];
              var targetType = registry.getTargetType(targetId);

              if (!matchesType_1.default(targetType, draggedItemType)) {
                targetIds.splice(i, 1);
              }
            } // Finally call hover on all matching targets.


            for (var _i = 0, targetIds_1 = targetIds; _i < targetIds_1.length; _i++) {
              var targetId = targetIds_1[_i];
              var target = registry.getTarget(targetId);
              target.hover(monitor, targetId);
            }

            return {
              type: exports.HOVER,
              payload: {
                targetIds: targetIds,
                clientOffset: clientOffset || null
              }
            };
          },
          drop: function drop(options) {
            if (options === void 0) {
              options = {};
            }

            var monitor = manager.getMonitor();
            var registry = manager.getRegistry();
            invariant(monitor.isDragging(), 'Cannot call drop while not dragging.');
            invariant(!monitor.didDrop(), 'Cannot call drop twice during one drag operation.');
            var targetIds = monitor.getTargetIds().filter(monitor.canDropOnTarget, monitor);
            targetIds.reverse(); // Multiple actions are dispatched here, which is why this doesn't return an action

            targetIds.forEach(function (targetId, index) {
              var target = registry.getTarget(targetId);
              var dropResult = target.drop(monitor, targetId);
              invariant(typeof dropResult === 'undefined' || isObject(dropResult), 'Drop result must either be an object or undefined.');

              if (typeof dropResult === 'undefined') {
                dropResult = index === 0 ? {} : monitor.getDropResult();
              }

              var action = {
                type: exports.DROP,
                payload: {
                  dropResult: __assign({}, options, dropResult)
                }
              };
              manager.dispatch(action);
            });
          },
          endDrag: function endDrag() {
            var monitor = manager.getMonitor();
            var registry = manager.getRegistry();
            invariant(monitor.isDragging(), 'Cannot call endDrag while not dragging.');
            var sourceId = monitor.getSourceId();
            var source = registry.getSource(sourceId, true);
            source.endDrag(monitor, sourceId);
            registry.unpinSource();
            return {
              type: exports.END_DRAG
            };
          }
        };
      }

      exports.default = createDragDropActions;
      /***/
    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        /**
        * Copyright (c) 2013-present, Facebook, Inc.
        *
        * This source code is licensed under the MIT license found in the
        * LICENSE file in the root directory of this source tree.
        */

        /**
         * Use invariant() to assert state which your program assumes to be true.
         *
         * Provide sprintf-style format (only %s is supported) and arguments
         * to provide information about what broke and what you were
         * expecting.
         *
         * The invariant message will be stripped in production, but the invariant
         * will remain to ensure logic does not differ in production.
         */
        var invariant = function invariant(condition, format, a, b, c, d, e, f) {
          if (process.env.NODE_ENV !== 'production') {
            if (format === undefined) {
              throw new Error('invariant requires an error message argument');
            }
          }

          if (!condition) {
            var error;

            if (format === undefined) {
              error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
            } else {
              var args = [a, b, c, d, e, f];
              var argIndex = 0;
              error = new Error(format.replace(/%s/g, function () {
                return args[argIndex++];
              }));
              error.name = 'Invariant Violation';
            }

            error.framesToPop = 1; // we don't care about invariant's own frame

            throw error;
          }
        };

        module.exports = invariant;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(2));
      /***/
    },
    /* 11 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.ADD_SOURCE = 'dnd-core/ADD_SOURCE';
      exports.ADD_TARGET = 'dnd-core/ADD_TARGET';
      exports.REMOVE_SOURCE = 'dnd-core/REMOVE_SOURCE';
      exports.REMOVE_TARGET = 'dnd-core/REMOVE_TARGET';

      function addSource(sourceId) {
        return {
          type: exports.ADD_SOURCE,
          payload: {
            sourceId: sourceId
          }
        };
      }

      exports.addSource = addSource;

      function addTarget(targetId) {
        return {
          type: exports.ADD_TARGET,
          payload: {
            targetId: targetId
          }
        };
      }

      exports.addTarget = addTarget;

      function removeSource(sourceId) {
        return {
          type: exports.REMOVE_SOURCE,
          payload: {
            sourceId: sourceId
          }
        };
      }

      exports.removeSource = removeSource;

      function removeTarget(targetId) {
        return {
          type: exports.REMOVE_TARGET,
          payload: {
            targetId: targetId
          }
        };
      }

      exports.removeTarget = removeTarget;
      /***/
    },
    /* 12 */

    /***/
    function (module, exports, __webpack_require__) {
      var getNative = __webpack_require__(13);
      /* Built-in method references that are verified to be native. */


      var nativeCreate = getNative(Object, 'create');
      module.exports = nativeCreate;
      /***/
    },
    /* 13 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseIsNative = __webpack_require__(73),
          getValue = __webpack_require__(80);
      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */


      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      module.exports = getNative;
      /***/
    },
    /* 14 */

    /***/
    function (module, exports, __webpack_require__) {
      var root = __webpack_require__(15);
      /** Built-in value references. */


      var _Symbol = root.Symbol;
      module.exports = _Symbol;
      /***/
    },
    /* 15 */

    /***/
    function (module, exports, __webpack_require__) {
      var freeGlobal = __webpack_require__(74);
      /** Detect free variable `self`. */


      var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof2(self)) == 'object' && self && self.Object === Object && self;
      /** Used as a reference to the global object. */

      var root = freeGlobal || freeSelf || Function('return this')();
      module.exports = root;
      /***/
    },
    /* 16 */

    /***/
    function (module, exports, __webpack_require__) {
      var eq = __webpack_require__(88);
      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */


      function assocIndexOf(array, key) {
        var length = array.length;

        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }

        return -1;
      }

      module.exports = assocIndexOf;
      /***/
    },
    /* 17 */

    /***/
    function (module, exports, __webpack_require__) {
      var isKeyable = __webpack_require__(94);
      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */


      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
      }

      module.exports = getMapData;
      /***/
    },
    /* 18 */

    /***/
    function (module, exports) {
      /**
       * A specialized version of `_.map` for arrays without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function arrayMap(array, iteratee) {
        var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length);

        while (++index < length) {
          result[index] = iteratee(array[index], index, array);
        }

        return result;
      }

      module.exports = arrayMap;
      /***/
    },
    /* 19 */

    /***/
    function (module, exports) {
      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && _typeof2(value) == 'object';
      }

      module.exports = isObjectLike;
      /***/
    },
    /* 20 */

    /***/
    function (module, exports) {
      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;
      module.exports = isArray;
      /***/
    },
    /* 21 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        function checkDecoratorArguments(functionName, signature) {
          var args = [];

          for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
          }

          if (process.env.NODE_ENV !== 'production') {
            for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
              var arg = args_1[_a];

              if (arg && arg.prototype && arg.prototype.render) {
                // tslint:disable-next-line no-console
                console.error('You seem to be applying the arguments in the wrong order. ' + ("It should be " + functionName + "(" + signature + ")(Component), not the other way around. ") + 'Read more: http://react-dnd.github.io/react-dnd/docs-troubleshooting.html#you-seem-to-be-applying-the-arguments-in-the-wrong-order');
                return;
              }
            }
          }
        }

        exports.default = checkDecoratorArguments;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(2));
      /***/
    },
    /* 22 */

    /***/
    function (module, exports) {
      //
      module.exports = function shallowEqual(objA, objB, compare, compareContext) {
        var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

        if (ret !== void 0) {
          return !!ret;
        }

        if (objA === objB) {
          return true;
        }

        if (_typeof2(objA) !== "object" || !objA || _typeof2(objB) !== "object" || !objB) {
          return false;
        }

        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);

        if (keysA.length !== keysB.length) {
          return false;
        }

        var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB); // Test for A's keys different from B.

        for (var idx = 0; idx < keysA.length; idx++) {
          var key = keysA[idx];

          if (!bHasOwnProperty(key)) {
            return false;
          }

          var valueA = objA[key];
          var valueB = objB[key];
          ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

          if (ret === false || ret === void 0 && valueA !== valueB) {
            return false;
          }
        }

        return true;
      };
      /***/

    },
    /* 23 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return Timeline;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__classes_TimeSpan__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__Frame__ = __webpack_require__(57);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__Ruler__ = __webpack_require__(6);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__Line__ = __webpack_require__(37);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      var Timeline =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(Timeline, _React$Component);

        function Timeline(props) {
          var _this;

          _classCallCheck(this, Timeline);

          _this = _possibleConstructorReturn(this, _getPrototypeOf(Timeline).call(this, props));
          _this.timeSpan = _this.props.timeSpan; //minViewがいくつあるかカウント。minViewは15分おき。それを元に高さを計算。border分1px足す

          _this.lineHeight = _this.timeSpan.getDistance() / 15 * (_this.props.minHeight + 1); //1分あたりの高さを算出

          _this.perMinHeight = _this.lineHeight / _this.timeSpan.getDistance();
          _this.lineWidth = props.lineWidth;
          _this.createdEventId = 0;
          _this.draggingOverLineComponent = null;
          _this.frameComponent = undefined;
          _this.eventComponents = [];
          return _this;
        }

        _createClass(Timeline, [{
          key: "draggingOver",
          value: function draggingOver(left) {
            var lineComponent = this.findLineByLeft(left);

            if (lineComponent) {
              if (this.draggingOverLineComponent !== lineComponent) {
                if (this.draggingOverLineComponent) {
                  this.draggingOverLineComponent.clearDraggingOver();
                }

                this.draggingOverLineComponent = lineComponent;
                this.draggingOverLineComponent.draggingOver();
              }
            } else {
              if (this.draggingOverLineComponent) {
                this.draggingOverLineComponent.clearDraggingOver();
                this.draggingOverLineComponent = null;
              }
            }

            return lineComponent;
          }
        }, {
          key: "clearDraggingOver",
          value: function clearDraggingOver() {
            if (this.draggingOverLineComponent) {
              this.draggingOverLineComponent.clearDraggingOver();
            }
          }
        }, {
          key: "getTotalWidth",
          value: function getTotalWidth() {
            var _this2 = this;

            if (this.totalWidthCache === undefined) {
              this.totalWidthCache = this.props.lineData.reduce(function (val, data, index) {
                var hasRuler = index % _this2.props.rulerInterval === 0;
                return val + (hasRuler ? _this2.lineWidth + __WEBPACK_IMPORTED_MODULE_3__Ruler__["a"
                /* default */
                ].width : _this2.lineWidth);
              }, 0);
            }

            return this.totalWidthCache;
          }
        }, {
          key: "findEventById",
          value: function findEventById(eventId) {
            return this.eventComponents.find(function (ev) {
              return ev.props.id == eventId;
            });
          }
        }, {
          key: "findLineByLeft",
          value: function findLineByLeft(left) {
            var _this3 = this;

            var width = 0;
            return this.lineComponents.find(function (line) {
              width += line.props.hasRuler ? _this3.props.lineWidth + __WEBPACK_IMPORTED_MODULE_3__Ruler__["a"
              /* default */
              ].width : _this3.props.lineWidth;

              if (left < width) {
                return line;
              }
            });
          }
        }, {
          key: "findLineById",
          value: function findLineById(lineId) {
            return this.lineComponents.find(function (line) {
              return line.props.id == lineId;
            });
          }
        }, {
          key: "getLineLeft",
          value: function getLineLeft(lineId) {
            var left = 0;

            for (var i = 0; i < this.props.lineData.length; i++) {
              var lineData = this.props.lineData[i];
              var hasRuler = i % this.props.rulerInterval === 0;

              if (hasRuler) {
                left += __WEBPACK_IMPORTED_MODULE_3__Ruler__["a"
                /* default */
                ].width;
              }

              if (lineData.id == lineId) {
                break;
              }

              left += this.props.lineWidth;
            }

            left += __WEBPACK_IMPORTED_MODULE_4__Line__["a"
            /* default */
            ].sidePadding;
            return left;
          }
        }, {
          key: "getTimeSpan",
          value: function getTimeSpan(top, height) {
            var startTime = this.topToTime(top);
            var endTime = startTime.addMin(height / this.perMinHeight);
            return new __WEBPACK_IMPORTED_MODULE_1__classes_TimeSpan__["a"
            /* default */
            ](startTime, endTime);
          }
        }, {
          key: "minuteToHeight",
          value: function minuteToHeight(minute) {
            return minute * this.perMinHeight - 1;
          }
        }, {
          key: "timeSpanToHeight",
          value: function timeSpanToHeight(timeSpan) {
            return this.minuteToHeight(timeSpan.getDistance());
          }
        }, {
          key: "timeToTop",
          value: function timeToTop(time) {
            return this.timeSpan.getStartTime().getDistance(time) * this.perMinHeight - 1;
          }
        }, {
          key: "topToTime",
          value: function topToTime(top) {
            if (top <= 0) {
              return this.timeSpan.getStartTime();
            }

            var minute = top / this.perMinHeight;
            var rest = minute % this.props.minInterval;

            if (rest !== 0) {
              if (rest > this.props.minInterval / 2) {
                minute += this.props.minInterval - rest;
              } else {
                minute -= rest;
              }
            }

            return this.timeSpan.getStartTime().addMin(minute);
          }
        }, {
          key: "findPrevEvent",
          value: function findPrevEvent(eventComponent) {
            return this.eventComponents.filter(function (ev) {
              return !ev.state.draggable && ev.lineId == eventComponent.lineId;
            }) //同じ列のものだけに絞る
            .sort(function (a, b) {
              return -a.currentTimeSpan.getStartTime().compare(b.currentTimeSpan.getStartTime());
            }) //時間の降順で並び替え
            .find(function (ev) {
              return ev.currentTimeSpan.getEndTime().compare(eventComponent.currentTimeSpan.getStartTime()) <= 0;
            }) //降順なので対象より最初に開始時間が若いものがprev
            ;
          }
        }, {
          key: "getPrevBottom",
          value: function getPrevBottom(eventComponent) {
            var prevEvent = this.findPrevEvent(eventComponent);
            var bottomTime;

            if (prevEvent) {
              bottomTime = prevEvent.currentTimeSpan.getEndTime();
            } else {
              bottomTime = this.timeSpan.getStartTime();
            }

            return this.timeToTop(bottomTime);
          }
        }, {
          key: "findNextEvent",
          value: function findNextEvent(eventComponent) {
            return this.findNextEventByTime(eventComponent.lineId, eventComponent.currentTimeSpan.getEndTime());
          }
        }, {
          key: "findNextEventByTime",
          value: function findNextEventByTime(lineId, time) {
            return this.eventComponents.filter(function (ev) {
              return !ev.state.draggable && ev.lineId == lineId;
            }) //同じ列のものだけに絞る
            .sort(function (a, b) {
              return a.currentTimeSpan.getStartTime().compare(b.currentTimeSpan.getStartTime());
            }) //時間の昇順で並び替え
            .find(function (ev) {
              return ev.currentTimeSpan.getStartTime().compare(time) >= 0;
            }) //昇順なので対象より最初に開始時間が遅いものがnext
            ;
          }
        }, {
          key: "getEventsOnLine",
          value: function getEventsOnLine(lineId) {
            return this.eventComponents.filter(function (ev) {
              return !ev.state.draggable && ev.lineId == lineId;
            });
          }
        }, {
          key: "getNextTime",
          value: function getNextTime(lineId, time) {
            var nextEvent = this.findNextEventByTime(lineId, time);
            var nextTime;

            if (nextEvent) {
              nextTime = nextEvent.currentTimeSpan.getStartTime();
            } else {
              nextTime = this.timeSpan.getEndTime();
            }

            return nextTime;
          }
        }, {
          key: "getFreeMinute",
          value: function getFreeMinute(lineId, time) {
            var nextTime = this.getNextTime(lineId, time);
            return time.getDistance(nextTime);
          }
        }, {
          key: "getNextTop",
          value: function getNextTop(eventComponent) {
            return this.timeToTop(this.getNextTime(eventComponent.lineId, eventComponent.currentTimeSpan.getEndTime()));
          }
        }, {
          key: "addEvents",
          value: function addEvents(events) {
            return this.frameComponent.addEvents(events);
          }
        }, {
          key: "setHeight",
          value: function setHeight(height) {
            this.frameComponent.setHeight(height);
          }
        }, {
          key: "componentWillReceiveProps",
          value: function componentWillReceiveProps(nextProps) {
            if (nextProps.lineData !== this.props.lineData) {
              this.totalWidthCache = undefined;
            }
          }
        }, {
          key: "render",
          value: function render() {
            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__Frame__["a"
            /* default */
            ], {
              ref: "frame",
              lineData: this.props.lineData,
              timeSpan: this.props.timeSpan,
              lineWidth: this.props.lineWidth,
              minHeight: this.props.minHeight,
              height: this.props.height,
              width: this.props.width,
              lineHeight: this.lineHeight,
              timeline: this,
              rulerInterval: this.props.rulerInterval,
              events: this.props.events,
              children: this.props.children,
              childWidth: this.props.childWidth
            });
          }
        }, {
          key: "lineComponents",
          get: function get() {
            var _this4 = this; // refsはオブジェクトなので順番の保証がないためDOMからとります。


            var lines = this.frameComponent.refs.linesWrapper.querySelectorAll('.tlLineWrapper');
            return Array.prototype.map.call(lines, function (elem) {
              var id = elem.getAttribute('data-id');
              return _this4.frameComponent.refs['line@' + id];
            }).filter(function (elem) {
              return elem !== undefined;
            }); //unmount後querySelectorAllで取れてしまうことがある。
          }
        }, {
          key: "lastLine",
          get: function get() {
            var lines = this.lineComponents;
            return lines[lines.length - 1];
          }
        }]);

        return Timeline;
      }(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component); // Timeline.propTypes = {
      //   timeSpan: React.PropTypes.instanceOf(TimeSpan).isRequired,
      //   lineData: React.PropTypes.arrayOf(React.PropTypes.shape({
      //     id: React.PropTypes.string.isRequired,
      //     label: React.PropTypes.string.isRequired
      //   })).isRequired,
      //   lineWidth: React.PropTypes.number.isRequired,
      //   minHeight: React.PropTypes.number.isRequired,
      //   onClick: React.PropTypes.func,
      //   rulerInterval: React.PropTypes.number.isRequired,
      //   minInterval: React.PropTypes.number,
      //   height: React.PropTypes.number.isRequired
      // }


      Timeline.defaultProps = {
        minInterval: 1,
        childWidth: 0
      };
      /***/
    },
    /* 24 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return Time;
      });

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /**
       * 一度生成したオブジェクトは変更しません。
       * 変更メソッドは新しいオブジェクトを帰します。
       */


      var Time =
      /*#__PURE__*/
      function () {
        _createClass(Time, null, [{
          key: "eachMin",
          value: function eachMin(callback, minuteInterval) {
            var count = 60 / minuteInterval;

            for (var i = 0; i < count; i++) {
              var min = i * minuteInterval;

              if (min < 60) {
                var displayMin = min < 10 ? '0' + min : min + '';
                callback.call(min, i, min, displayMin);
              }
            }

            ;
          }
        }, {
          key: "create",

          /**
           * 配列からTimeを生成
           * @param  {array} time [hour, min]の配列
           * @return {Time}
           */
          value: function create(time) {
            return new Time(time[0], time[1]);
          }
        }]);

        function Time(hour, min) {
          _classCallCheck(this, Time);

          this._hour = hour === undefined ? 0 : parseInt(hour, 10);
          this._min = min === undefined ? 0 : parseInt(min, 10);

          while (this._min < 0) {
            --this._hour;
            this._min = 60 + this._min;
          }

          while (this._min > 59) {
            ++this._hour;
            this._min = this._min - 60;
          }

          if (this._hour < 0) {
            throw new Error(this.toString() + ' is not valid time.');
          }
        }

        _createClass(Time, [{
          key: "getHour",
          value: function getHour() {
            return this._hour;
          }
        }, {
          key: "getMin",
          value: function getMin() {
            return this._min;
          }
        }, {
          key: "clone",
          value: function clone() {
            return new Time(this.getHour(), this.getMin());
          }
        }, {
          key: "addMin",
          value: function addMin(min) {
            return new Time(this.getHour(), this.getMin() + parseInt(min, 10));
          }
        }, {
          key: "equals",
          value: function equals(time) {
            return this.getHour() === time.getHour() && this.getMin() === time.getMin();
          }
        }, {
          key: "compare",
          value: function compare(time) {
            if (this.getHour() > time.getHour()) {
              return 1;
            } else if (this.getHour() < time.getHour()) {
              return -1;
            } else {
              if (this.getMin() > time.getMin()) {
                return 1;
              } else if (this.getMin() < time.getMin()) {
                return -1;
              }
            }

            return 0;
          }
        }, {
          key: "getDistance",
          value: function getDistance(targetTime) {
            var targetHour = targetTime.getHour();
            var hourDistance = targetHour - this._hour;
            return hourDistance * 60 + (targetTime.getMin() - this._min);
          }
        }, {
          key: "toString",
          value: function toString() {
            return this.getDisplayTime();
          }
        }, {
          key: "getDisplayHour",
          value: function getDisplayHour() {
            return this._hour < 24 ? this._hour : this._hour - 24;
          }
        }, {
          key: "getDisplayMin",
          value: function getDisplayMin() {
            return this._min < 10 ? '0' + this._min : this._min;
          }
        }, {
          key: "getDisplayTime",
          value: function getDisplayTime() {
            return this.getDisplayHour() + ':' + this.getDisplayMin();
          }
        }]);

        return Time;
      }();
      /***/

    },
    /* 25 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var __extends = this && this.__extends || function () {
        var extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return function (d, b) {
          extendStatics(d, b);

          function __() {
            this.constructor = d;
          }

          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();

      var __assign = this && this.__assign || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var _a;

      var React = __webpack_require__(0);

      var dnd_core_1 = __webpack_require__(59);

      var checkDecoratorArguments_1 = __webpack_require__(21);

      var invariant = __webpack_require__(1);

      var hoistStatics = __webpack_require__(35);

      var isClassComponent = __webpack_require__(36).default;
      /**
       * Create the React Context
       */


      exports.Consumer = (_a = React.createContext({
        dragDropManager: undefined
      }), _a.Consumer), exports.Provider = _a.Provider;
      /**
       * Creates the context object we're providing
       * @param backend
       * @param context
       */

      function createChildContext(backend, context) {
        return {
          dragDropManager: dnd_core_1.createDragDropManager(backend, context)
        };
      }

      exports.createChildContext = createChildContext;
      /**
       * A React component that provides the React-DnD context
       */

      exports.DragDropContextProvider = function (_a) {
        var backend = _a.backend,
            context = _a.context,
            children = _a.children;
        var contextValue = createChildContext(backend, context);
        return React.createElement(exports.Provider, {
          value: contextValue
        }, children);
      };
      /**
       * Wrap the root component of your application with DragDropContext decorator to set up React DnD.
       * This lets you specify the backend, and sets up the shared DnD state behind the scenes.
       * @param backendFactory The DnD backend factory
       * @param backendContext The backend context
       */


      function DragDropContext(backendFactory, backendContext) {
        checkDecoratorArguments_1.default('DragDropContext', 'backend', backendFactory);
        var childContext = createChildContext(backendFactory, backendContext);
        return function decorateContext(DecoratedComponent) {
          var Decorated = DecoratedComponent;
          var displayName = Decorated.displayName || Decorated.name || 'Component';

          var DragDropContextContainer =
          /** @class */
          function (_super) {
            __extends(DragDropContextContainer, _super);

            function DragDropContextContainer() {
              var _this = _super !== null && _super.apply(this, arguments) || this;

              _this.ref = React.createRef();
              return _this;
            }

            DragDropContextContainer.prototype.getDecoratedComponentInstance = function () {
              invariant(this.ref.current, 'In order to access an instance of the decorated component it can not be a stateless component.');
              return this.ref.current;
            };

            DragDropContextContainer.prototype.getManager = function () {
              return childContext.dragDropManager;
            };

            DragDropContextContainer.prototype.render = function () {
              return React.createElement(exports.Provider, {
                value: childContext
              }, React.createElement(Decorated, __assign({}, this.props, {
                ref: isClassComponent(Decorated) ? this.ref : undefined
              })));
            };

            DragDropContextContainer.DecoratedComponent = DecoratedComponent;
            DragDropContextContainer.displayName = "DragDropContext(" + displayName + ")";
            return DragDropContextContainer;
          }(React.Component);

          return hoistStatics(DragDropContextContainer, DecoratedComponent);
        };
      }

      exports.DragDropContext = DragDropContext;
      /***/
    },
    /* 26 */

    /***/
    function (module, exports) {
      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = _typeof2(value);

        return value != null && (type == 'object' || type == 'function');
      }

      module.exports = isObject;
      /***/
    },
    /* 27 */

    /***/
    function (module, exports, __webpack_require__) {
      var MapCache = __webpack_require__(43),
          setCacheAdd = __webpack_require__(98),
          setCacheHas = __webpack_require__(99);
      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */


      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();

        while (++index < length) {
          this.add(values[index]);
        }
      } // Add methods to `SetCache`.


      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module.exports = SetCache;
      /***/
    },
    /* 28 */

    /***/
    function (module, exports, __webpack_require__) {
      var _Symbol2 = __webpack_require__(14),
          getRawTag = __webpack_require__(75),
          objectToString = __webpack_require__(76);
      /** `Object#toString` result references. */


      var nullTag = '[object Null]',
          undefinedTag = '[object Undefined]';
      /** Built-in value references. */

      var symToStringTag = _Symbol2 ? _Symbol2.toStringTag : undefined;
      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      module.exports = baseGetTag;
      /***/
    },
    /* 29 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseIndexOf = __webpack_require__(100);
      /**
       * A specialized version of `_.includes` for arrays without support for
       * specifying an index to search from.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */


      function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
      }

      module.exports = arrayIncludes;
      /***/
    },
    /* 30 */

    /***/
    function (module, exports) {
      /**
       * This function is like `arrayIncludes` except that it accepts a comparator.
       *
       * @private
       * @param {Array} [array] The array to inspect.
       * @param {*} target The value to search for.
       * @param {Function} comparator The comparator invoked per element.
       * @returns {boolean} Returns `true` if `target` is found, else `false`.
       */
      function arrayIncludesWith(array, value, comparator) {
        var index = -1,
            length = array == null ? 0 : array.length;

        while (++index < length) {
          if (comparator(value, array[index])) {
            return true;
          }
        }

        return false;
      }

      module.exports = arrayIncludesWith;
      /***/
    },
    /* 31 */

    /***/
    function (module, exports) {
      /**
       * Checks if a `cache` value for `key` exists.
       *
       * @private
       * @param {Object} cache The cache to query.
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function cacheHas(cache, key) {
        return cache.has(key);
      }

      module.exports = cacheHas;
      /***/
    },
    /* 32 */

    /***/
    function (module, exports, __webpack_require__) {
      var identity = __webpack_require__(46),
          overRest = __webpack_require__(104),
          setToString = __webpack_require__(106);
      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */


      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      module.exports = baseRest;
      /***/
    },
    /* 33 */

    /***/
    function (module, exports, __webpack_require__) {
      var isArrayLike = __webpack_require__(111),
          isObjectLike = __webpack_require__(19);
      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */


      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      module.exports = isArrayLikeObject;
      /***/
    },
    /* 34 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseGetTag = __webpack_require__(28),
          isObjectLike = __webpack_require__(19);
      /** `Object#toString` result references. */


      var symbolTag = '[object Symbol]';
      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */

      function isSymbol(value) {
        return _typeof2(value) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }

      module.exports = isSymbol;
      /***/
    },
    /* 35 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright 2015, Yahoo! Inc.
       * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
       */

      var REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== 'string') {
          // don't hoist over string (html) components
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);

            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }

          var keys = getOwnPropertyNames(sourceComponent);

          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }

          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];

            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

              try {
                // Avoid failures from read-only properties
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {}
            }
          }

          return targetComponent;
        }

        return targetComponent;
      }

      module.exports = hoistNonReactStatics;
      /***/
    },
    /* 36 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var isClassComponent = function isClassComponent(Component) {
        return Boolean(Component && Component.prototype && typeof Component.prototype.render === 'function');
      };

      exports.default = isClassComponent;
      /***/
    },
    /* 37 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return Line;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__classes_TimeSpan__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__Hour__ = __webpack_require__(58);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3__Ruler__ = __webpack_require__(6);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__LineLabel__ = __webpack_require__(38);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5_classnames__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_classnames__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__Timeline__ = __webpack_require__(23);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      var Line =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(Line, _React$Component);

        function Line(props) {
          var _this;

          _classCallCheck(this, Line);

          _this = _possibleConstructorReturn(this, _getPrototypeOf(Line).call(this, props));
          _this.state = {
            hours: [],
            events: [],
            draggingOver: false
          };

          _this.props.timeSpan.eachTime(function (key, time) {
            if (!time.equals(_this.props.timeSpan.getEndTime())) {
              _this.state.hours.push(__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__Hour__["a"
              /* default */
              ], {
                key: time.getHour(),
                time: time,
                minHeight: _this.props.minHeight
              }));
            }
          });

          _this.vars = _this.props.vars || {};
          return _this;
        }

        _createClass(Line, [{
          key: "getRelativeTop",
          value: function getRelativeTop(e) {
            var parentElement = this.props.frame.refs.linesWrapper;
            var parentRect = parentElement.getBoundingClientRect();
            return e.clientY - parentRect.top + parentElement.scrollTop;
          }
        }, {
          key: "onClick",
          value: function onClick(e) {
            if (this.props.timeline.props.lineDidClick) {
              var time = this.props.timeline.topToTime(this.getRelativeTop(e));
              this.props.timeline.props.lineDidClick({
                component: this,
                time: time,
                freeMinute: this.props.timeline.getFreeMinute(this.props.id, time),
                position: {
                  scrollTop: this.props.timeline.frameComponent.refs.linesWrapper.scrollTop,
                  scrollLeft: this.props.timeline.frameComponent.element.scrollLeft,
                  top: e.clientY,
                  left: e.clientX
                },
                event: e
              });
            }
          }
        }, {
          key: "onContextMenu",
          value: function onContextMenu(e) {
            if (this.props.timeline.props.lineDidRightClick) {
              this.props.timeline.props.lineDidRightClick({
                event: e,
                component: this
              });
            }
          }
        }, {
          key: "draggingOver",
          value: function draggingOver() {
            this.setState({
              draggingOver: true
            });
          }
        }, {
          key: "clearDraggingOver",
          value: function clearDraggingOver() {
            this.setState({
              draggingOver: false
            });
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this.props.timeline.draggingOverLineComponent == this) {
              this.props.timeline.draggingOverLineComponent = undefined;
            }
          }
        }, {
          key: "render",
          value: function render() {
            var _this2 = this;

            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              className: "tlLineWrapper",
              "data-id": this.props.id,
              onContextMenu: function onContextMenu(e) {
                return _this2.onContextMenu(e);
              }
            }, function () {
              if (_this2.props.hasRuler) {
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Ruler__["a"
                /* default */
                ], {
                  key: 'ruler_' + _this2.props.id,
                  minHeight: _this2.props.minHeight,
                  timeSpan: _this2.props.timeSpan
                });
              }
            }(), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              onClick: function onClick(e) {
                return _this2.onClick(e);
              },
              className: __WEBPACK_IMPORTED_MODULE_5_classnames___default()('tlLineView', {
                tlEven: this.props.even,
                tlOdd: !this.props.even
              }, {
                tlOver: this.state.draggingOver
              }),
              style: {
                width: this.props.width + 'px'
              }
            }, this.state.hours));
          }
        }]);

        return Line;
      }(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

      Line.sidePadding = 1; // Line.propTypes = {
      //   width: React.PropTypes.number.isRequired,
      //   minHeight: React.PropTypes.number.isRequired,
      //   timeSpan: React.PropTypes.instanceOf(TimeSpan).isRequired,
      //   id: React.PropTypes.string.isRequired,
      //   onClick: React.PropTypes.func,
      //   even: React.PropTypes.bool.isRequired,
      //   //TODO 循環参照になるのでimportできず。とりあえずanyでごまかしてます。
      //   timeline: React.PropTypes.any.isRequired,
      //   hasRuler: React.PropTypes.bool.isRequired
      // }

      /***/
    },
    /* 38 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return LineLabel;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__Ruler__ = __webpack_require__(6);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_classnames__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      var LineLabel =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(LineLabel, _React$Component);

        function LineLabel(props) {
          var _this;

          _classCallCheck(this, LineLabel);

          _this = _possibleConstructorReturn(this, _getPrototypeOf(LineLabel).call(this, props));
          _this.state = {
            hasRuler: _this.props.hasRuler,
            prevRuler: _this.props.prevRuler,
            isLast: _this.props.isLast
          };
          return _this;
        }

        _createClass(LineLabel, [{
          key: "render",
          value: function render() {
            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              style: {
                width: this.props.width,
                marginLeft: this.state.hasRuler ? __WEBPACK_IMPORTED_MODULE_1__Ruler__["a"
                /* default */
                ].width + 'px' : 0
              },
              className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()({
                tlLabel: true,
                tlHasRuler: this.state.hasRuler,
                tlPrevRuler: this.state.prevRuler,
                tlLast: this.state.isLast
              })
            }, this.props.label);
          }
        }]);

        return LineLabel;
      }(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

      LineLabel.height = 16;
      /***/
    },
    /* 39 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var HandlerRole;

      (function (HandlerRole) {
        HandlerRole["SOURCE"] = "SOURCE";
        HandlerRole["TARGET"] = "TARGET";
      })(HandlerRole = exports.HandlerRole || (exports.HandlerRole = {}));
      /***/

    },
    /* 40 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      function matchesType(targetType, draggedItemType) {
        if (draggedItemType === null) {
          return targetType === null;
        }

        return Array.isArray(targetType) ? targetType.some(function (t) {
          return t === draggedItemType;
        }) : targetType === draggedItemType;
      }

      exports.default = matchesType;
      /***/
    },
    /* 41 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      exports.strictEquality = function (a, b) {
        return a === b;
      };
      /**
       * Determine if two cartesian coordinate offsets are equal
       * @param offsetA
       * @param offsetB
       */


      function areCoordsEqual(offsetA, offsetB) {
        if (!offsetA && !offsetB) {
          return true;
        } else if (!offsetA || !offsetB) {
          return false;
        } else {
          return offsetA.x === offsetB.x && offsetA.y === offsetB.y;
        }
      }

      exports.areCoordsEqual = areCoordsEqual;
      /**
       * Determines if two arrays of items are equal
       * @param a The first array of items
       * @param b The second array of items
       */

      function areArraysEqual(a, b, isEqual) {
        if (isEqual === void 0) {
          isEqual = exports.strictEquality;
        }

        if (a.length !== b.length) {
          return false;
        }

        for (var i = 0; i < a.length; ++i) {
          if (!isEqual(a[i], b[i])) {
            return false;
          }
        }

        return true;
      }

      exports.areArraysEqual = areArraysEqual;
      /***/
    },
    /* 42 */

    /***/
    function (module, exports, __webpack_require__) {
      var SetCache = __webpack_require__(27),
          arrayIncludes = __webpack_require__(29),
          arrayIncludesWith = __webpack_require__(30),
          arrayMap = __webpack_require__(18),
          baseUnary = __webpack_require__(45),
          cacheHas = __webpack_require__(31);
      /** Used as the size to enable large array optimizations. */


      var LARGE_ARRAY_SIZE = 200;
      /**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */

      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }

        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }

        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        } else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;

            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }

            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }

        return result;
      }

      module.exports = baseDifference;
      /***/
    },
    /* 43 */

    /***/
    function (module, exports, __webpack_require__) {
      var mapCacheClear = __webpack_require__(70),
          mapCacheDelete = __webpack_require__(93),
          mapCacheGet = __webpack_require__(95),
          mapCacheHas = __webpack_require__(96),
          mapCacheSet = __webpack_require__(97);
      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */


      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      } // Add methods to `MapCache`.


      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module.exports = MapCache;
      /***/
    },
    /* 44 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseGetTag = __webpack_require__(28),
          isObject = __webpack_require__(26);
      /** `Object#toString` result references. */


      var asyncTag = '[object AsyncFunction]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          proxyTag = '[object Proxy]';
      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */

      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        } // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.


        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      module.exports = isFunction;
      /***/
    },
    /* 45 */

    /***/
    function (module, exports) {
      /**
       * The base implementation of `_.unary` without support for storing metadata.
       *
       * @private
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       */
      function baseUnary(func) {
        return function (value) {
          return func(value);
        };
      }

      module.exports = baseUnary;
      /***/
    },
    /* 46 */

    /***/
    function (module, exports) {
      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }

      module.exports = identity;
      /***/
    },
    /* 47 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var intersection = __webpack_require__(115);

      exports.NONE = [];
      exports.ALL = [];
      /**
       * Determines if the given handler IDs are dirty or not.
       *
       * @param dirtyIds The set of dirty handler ids
       * @param handlerIds The set of handler ids to check
       */

      function areDirty(dirtyIds, handlerIds) {
        if (dirtyIds === exports.NONE) {
          return false;
        }

        if (dirtyIds === exports.ALL || typeof handlerIds === 'undefined') {
          return true;
        }

        return intersection(handlerIds, dirtyIds).length > 0;
      }

      exports.areDirty = areDirty;
      /***/
    },
    /* 48 */

    /***/
    function (module, exports) {
      /**
       * Converts `set` to an array of its values.
       *
       * @private
       * @param {Object} set The set to convert.
       * @returns {Array} Returns the values.
       */
      function setToArray(set) {
        var index = -1,
            result = Array(set.size);
        set.forEach(function (value) {
          result[++index] = value;
        });
        return result;
      }

      module.exports = setToArray;
      /***/
    },
    /* 49 */

    /***/
    function (module, exports, __webpack_require__) {
      var _Symbol3 = __webpack_require__(50),
          getRawTag = __webpack_require__(151),
          objectToString = __webpack_require__(152);
      /** `Object#toString` result references. */


      var nullTag = '[object Null]',
          undefinedTag = '[object Undefined]';
      /** Built-in value references. */

      var symToStringTag = _Symbol3 ? _Symbol3.toStringTag : undefined;
      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */

      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }

        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }

      module.exports = baseGetTag;
      /***/
    },
    /* 50 */

    /***/
    function (module, exports, __webpack_require__) {
      var root = __webpack_require__(149);
      /** Built-in value references. */


      var _Symbol4 = root.Symbol;
      module.exports = _Symbol4;
      /***/
    },
    /* 51 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        var __extends = this && this.__extends || function () {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) {
              if (b.hasOwnProperty(p)) d[p] = b[p];
            }
          };

          return function (d, b) {
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };
        }();

        var __assign = this && this.__assign || Object.assign || function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];

            for (var p in s) {
              if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
          }

          return t;
        };

        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var React = __webpack_require__(0);

        var DragDropContext_1 = __webpack_require__(25);

        var disposables_1 = __webpack_require__(157);

        var isClassComponent = __webpack_require__(36).default;

        var isPlainObject = __webpack_require__(5);

        var invariant = __webpack_require__(1);

        var hoistStatics = __webpack_require__(35);

        var shallowEqual = __webpack_require__(22);

        function decorateHandler(_a) {
          var DecoratedComponent = _a.DecoratedComponent,
              createHandler = _a.createHandler,
              createMonitor = _a.createMonitor,
              createConnector = _a.createConnector,
              registerHandler = _a.registerHandler,
              containerDisplayName = _a.containerDisplayName,
              getType = _a.getType,
              collect = _a.collect,
              options = _a.options;
          var _b = options.arePropsEqual,
              arePropsEqual = _b === void 0 ? shallowEqual : _b;
          var Decorated = DecoratedComponent;
          var displayName = DecoratedComponent.displayName || DecoratedComponent.name || 'Component';

          var DragDropContainer =
          /** @class */
          function (_super) {
            __extends(DragDropContainer, _super);

            function DragDropContainer(props) {
              var _this = _super.call(this, props) || this;

              _this.isCurrentlyMounted = false;
              _this.handleChange = _this.handleChange.bind(_this);
              _this.disposable = new disposables_1.SerialDisposable();

              _this.receiveProps(props);

              _this.dispose();

              return _this;
            }

            DragDropContainer.prototype.getHandlerId = function () {
              return this.handlerId;
            };

            DragDropContainer.prototype.getDecoratedComponentInstance = function () {
              if (!this.handler) {
                return null;
              }

              return this.handler.ref.current;
            };

            DragDropContainer.prototype.shouldComponentUpdate = function (nextProps, nextState) {
              return !arePropsEqual(nextProps, this.props) || !shallowEqual(nextState, this.state);
            };

            DragDropContainer.prototype.componentDidMount = function () {
              this.isCurrentlyMounted = true;
              this.disposable = new disposables_1.SerialDisposable();
              this.currentType = undefined;
              this.receiveProps(this.props);
              this.handleChange();
            };

            DragDropContainer.prototype.componentDidUpdate = function (prevProps) {
              if (!arePropsEqual(this.props, prevProps)) {
                this.receiveProps(this.props);
                this.handleChange();
              }
            };

            DragDropContainer.prototype.componentWillUnmount = function () {
              this.dispose();
              this.isCurrentlyMounted = false;
            };

            DragDropContainer.prototype.receiveProps = function (props) {
              if (!this.handler) {
                return;
              }

              this.handler.receiveProps(props);
              this.receiveType(getType(props));
            };

            DragDropContainer.prototype.receiveType = function (type) {
              if (!this.handlerMonitor || !this.manager || !this.handlerConnector) {
                return;
              }

              if (type === this.currentType) {
                return;
              }

              this.currentType = type;

              var _a = registerHandler(type, this.handler, this.manager),
                  handlerId = _a.handlerId,
                  unregister = _a.unregister;

              this.handlerId = handlerId;
              this.handlerMonitor.receiveHandlerId(handlerId);
              this.handlerConnector.receiveHandlerId(handlerId);
              var globalMonitor = this.manager.getMonitor();
              var unsubscribe = globalMonitor.subscribeToStateChange(this.handleChange, {
                handlerIds: [handlerId]
              });
              this.disposable.setDisposable(new disposables_1.CompositeDisposable(new disposables_1.Disposable(unsubscribe), new disposables_1.Disposable(unregister)));
            };

            DragDropContainer.prototype.handleChange = function () {
              if (!this.isCurrentlyMounted) {
                return;
              }

              var nextState = this.getCurrentState();

              if (!shallowEqual(nextState, this.state)) {
                this.setState(nextState);
              }
            };

            DragDropContainer.prototype.dispose = function () {
              this.disposable.dispose();

              if (this.handlerConnector) {
                this.handlerConnector.receiveHandlerId(null);
              }
            };

            DragDropContainer.prototype.getCurrentState = function () {
              if (!this.handlerConnector) {
                return {};
              }

              var nextState = collect(this.handlerConnector.hooks, this.handlerMonitor);

              if (process.env.NODE_ENV !== 'production') {
                invariant(isPlainObject(nextState), 'Expected `collect` specified as the second argument to ' + '%s for %s to return a plain object of props to inject. ' + 'Instead, received %s.', containerDisplayName, displayName, nextState);
              }

              return nextState;
            };

            DragDropContainer.prototype.render = function () {
              var _this = this;

              return React.createElement(DragDropContext_1.Consumer, null, function (_a) {
                var dragDropManager = _a.dragDropManager;

                if (dragDropManager === undefined) {
                  return null;
                }

                _this.receiveDragDropManager(dragDropManager); // Let componentDidMount fire to initialize the collected state


                if (!_this.isCurrentlyMounted) {
                  return null;
                }

                return React.createElement(Decorated, __assign({}, _this.props, _this.state, {
                  ref: _this.handler && isClassComponent(Decorated) ? _this.handler.ref : undefined
                }));
              });
            };

            DragDropContainer.prototype.receiveDragDropManager = function (dragDropManager) {
              if (this.manager !== undefined) {
                return;
              }

              this.manager = dragDropManager;
              invariant(_typeof2(dragDropManager) === 'object', 'Could not find the drag and drop manager in the context of %s. ' + 'Make sure to wrap the top-level component of your app with DragDropContext. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-troubleshooting.html#could-not-find-the-drag-and-drop-manager-in-the-context', displayName, displayName);
              this.handlerMonitor = createMonitor(dragDropManager);
              this.handlerConnector = createConnector(dragDropManager.getBackend());
              this.handler = createHandler(this.handlerMonitor);
            };

            DragDropContainer.DecoratedComponent = DecoratedComponent;
            DragDropContainer.displayName = containerDisplayName + "(" + displayName + ")";
            return DragDropContainer;
          }(React.Component);

          return hoistStatics(DragDropContainer, DecoratedComponent);
        }

        exports.default = decorateHandler;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(2));
      /***/
    },
    /* 52 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var react_1 = __webpack_require__(0);

      var cloneWithRef_1 = __webpack_require__(168);

      function throwIfCompositeComponentElement(element) {
        // Custom components can no longer be wrapped directly in React DnD 2.0
        // so that we don't need to depend on findDOMNode() from react-dom.
        if (typeof element.type === 'string') {
          return;
        }

        var displayName = element.type.displayName || element.type.name || 'the component';
        throw new Error('Only native element nodes can now be passed to React DnD connectors.' + ("You can either wrap " + displayName + " into a <div>, or turn it into a ") + 'drag source or a drop target itself.');
      }

      function wrapHookToRecognizeElement(hook) {
        return function (elementOrNode, options) {
          if (elementOrNode === void 0) {
            elementOrNode = null;
          }

          if (options === void 0) {
            options = null;
          } // When passed a node, call the hook straight away.


          if (!react_1.isValidElement(elementOrNode)) {
            var node = elementOrNode;
            hook(node, options);
            return undefined;
          } // If passed a ReactElement, clone it and attach this function as a ref.
          // This helps us achieve a neat API where user doesn't even know that refs
          // are being used under the hood.


          var element = elementOrNode;
          throwIfCompositeComponentElement(element); // When no options are passed, use the hook directly

          var ref = options ? function (node) {
            return hook(node, options);
          } : hook;
          return cloneWithRef_1.default(element, ref);
        };
      }

      function wrapConnectorHooks(hooks) {
        var wrappedHooks = {};
        Object.keys(hooks).forEach(function (key) {
          var hook = hooks[key];
          var wrappedHook = wrapHookToRecognizeElement(hook);

          wrappedHooks[key] = function () {
            return wrappedHook;
          };
        });
        return wrappedHooks;
      }

      exports.default = wrapConnectorHooks;
      /***/
    },
    /* 53 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      function isValidType(type, allowArray) {
        return typeof type === 'string' || _typeof2(type) === 'symbol' || !!allowArray && Array.isArray(type) && type.every(function (t) {
          return isValidType(t, false);
        });
      }

      exports.default = isValidType;
      /***/
    },
    /* 54 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return EventBase;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__utils__ = __webpack_require__(177);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      var EventBase =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(EventBase, _React$Component);

        function EventBase() {
          _classCallCheck(this, EventBase);

          return _possibleConstructorReturn(this, _getPrototypeOf(EventBase).apply(this, arguments));
        }

        _createClass(EventBase, [{
          key: "renderDisplay",
          value: function renderDisplay(row) {
            if (!row.value) {
              return null;
            }

            var className = __WEBPACK_IMPORTED_MODULE_1_classnames___default()('tlEventDisplayRow', row.key);

            if (Array.isArray(row.value)) {
              if (row.value.length === 0) {
                return null;
              }

              return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                className: className,
                key: row.key
              }, row.value.map(function (val, key) {
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                  key: key,
                  className: "item"
                }, val);
              }));
            }

            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              className: className,
              key: row.key
            }, row.value);
          }
        }, {
          key: "render",
          value: function render() {
            var _this = this;

            var displayPosition = 'left';

            if (this.props.timeline.getTotalWidth() > this.props.right + 70) {
              displayPosition = 'right';
            }

            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              ref: "base",
              style: {
                height: '100%'
              }
            }, function () {
              if (_this.props.draggingDisplay) {
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                  className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('tlDraggingDisplay', displayPosition),
                  style: {
                    top: _this.props.draggingDisplayTop
                  }
                }, _this.props.draggingDisplay);
              }
            }(), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              className: "tlEventDisplay"
            }, this.props.display.map(function (row) {
              return _this.renderDisplay(row);
            })));
          }
        }]);

        return EventBase;
      }(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

      EventBase.defaultProps = {
        display: []
      };
      /***/
    },
    /* 55 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* eslint-disable no-unused-vars */

      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;

      function toObject(val) {
        if (val === null || val === undefined) {
          throw new TypeError('Object.assign cannot be called with null or undefined');
        }

        return Object(val);
      }

      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          } // Detect buggy property enumeration order in older V8 versions.
          // https://bugs.chromium.org/p/v8/issues/detail?id=4118


          var test1 = new String('abc'); // eslint-disable-line

          test1[5] = 'de';

          if (Object.getOwnPropertyNames(test1)[0] === '5') {
            return false;
          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


          var test2 = {};

          for (var i = 0; i < 10; i++) {
            test2['_' + String.fromCharCode(i)] = i;
          }

          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            return test2[n];
          });

          if (order2.join('') !== '0123456789') {
            return false;
          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


          var test3 = {};
          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            test3[letter] = letter;
          });

          if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
            return false;
          }

          return true;
        } catch (e) {
          // We don't expect any of the above to throw, but better to be safe.
          return false;
        }
      }

      module.exports = shouldUseNative() ? Object.assign : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;

        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);

          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }

          if (Object.getOwnPropertySymbols) {
            symbols = Object.getOwnPropertySymbols(from);

            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }

        return to;
      };
      /***/
    },
    /* 56 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0__components_Timeline__ = __webpack_require__(23);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__classes_Time__ = __webpack_require__(24);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__classes_TimeSpan__ = __webpack_require__(3);
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "Timeline", function () {
        return __WEBPACK_IMPORTED_MODULE_0__components_Timeline__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "Time", function () {
        return __WEBPACK_IMPORTED_MODULE_1__classes_Time__["a"];
      });
      /* harmony reexport (binding) */


      __webpack_require__.d(__webpack_exports__, "TimeSpan", function () {
        return __WEBPACK_IMPORTED_MODULE_2__classes_TimeSpan__["a"];
      });
      /***/

    },
    /* 57 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__classes_TimeSpan__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__Line__ = __webpack_require__(37);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_classnames__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_classnames__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4_react_dnd__ = __webpack_require__(7);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4_react_dnd___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_react_dnd__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5_react_dnd_touch_backend__ = __webpack_require__(174);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5_react_dnd_touch_backend___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_react_dnd_touch_backend__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6__EventPreview__ = __webpack_require__(176);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_7__Event__ = __webpack_require__(178);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_8__Ruler__ = __webpack_require__(6);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_9__LineLabel__ = __webpack_require__(38);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      var target = {
        drop: function drop(props, monitor, component) {
          var item = monitor.getItem();
          var delta = monitor.getDifferenceFromInitialOffset();
          var initalOffset = item.draggingComponent.getOffset();
          var top = Math.round(initalOffset.top + delta.y);
          var left = Math.round(initalOffset.left + delta.x);
          item.draggingComponent.moveTo(top, left);
        },
        hover: function hover(props, monitor, component) {
          var clientOffset = monitor.getSourceClientOffset();

          if (clientOffset) {
            var item = monitor.getItem();
            var lineWrapperBounds = component.refs.linesWrapper.getBoundingClientRect();
            var lineComponent = props.timeline.draggingOver(clientOffset.x - lineWrapperBounds.left + item.draggingComponent.props.width / 2
            /*eventの真ん中を基準にする*/
            );
            var time = props.timeline.topToTime(clientOffset.y + component.refs.linesWrapper.scrollTop - lineWrapperBounds.top);
            item.draggingComponent.dragging(time, lineComponent ? lineComponent.props.id : null);
          }
        }
      };

      function collect(connect, monitor) {
        return {
          connectDropTarget: connect.dropTarget()
        };
      }

      var Frame =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(Frame, _React$Component);

        function Frame(props) {
          var _this;

          _classCallCheck(this, Frame);

          _this = _possibleConstructorReturn(this, _getPrototypeOf(Frame).call(this, props));
          var rulerInterval = 4;
          _this.state = {
            minWidth: 0
          };
          _this.resizingEvent = null;
          _this.element = null;
          _this.props.timeline.frameComponent = _assertThisInitialized(_assertThisInitialized(_this));
          return _this;
        }

        _createClass(Frame, [{
          key: "resizeUp",
          value: function resizeUp(eventComponent, clickedTop) {
            var _this2 = this;

            var initialHeight = eventComponent.state.height;
            var prevBottom = this.props.timeline.getPrevBottom(eventComponent);

            var mouseMoveEvent = function mouseMoveEvent(moveEvent) {
              eventComponent.resizing = true;
              var targetHeight = initialHeight + clickedTop - moveEvent.clientY;

              if (targetHeight > 36) {
                var targetTop = eventComponent.state.top - (targetHeight - eventComponent.state.height);

                if (targetTop <= prevBottom) {
                  targetTop = prevBottom;
                }

                eventComponent.resizingTimeSpan = new __WEBPACK_IMPORTED_MODULE_1__classes_TimeSpan__["a"
                /* default */
                ](_this2.props.timeline.topToTime(targetTop), eventComponent.currentTimeSpan.getEndTime());
                eventComponent.setState({
                  height: _this2.props.timeline.timeSpanToHeight(eventComponent.resizingTimeSpan),
                  top: _this2.props.timeline.timeToTop(eventComponent.resizingTimeSpan.getStartTime()),
                  draggingDisplay: eventComponent.resizingTimeSpan.getStartTime().getDisplayTime()
                });
              }
            };

            var stopMoveEvent = function stopMoveEvent(mouseEvent) {
              _this2.refs.linesWrapper.removeEventListener('mousemove', mouseMoveEvent);

              _this2.refs.linesWrapper.removeEventListener('mouseup', stopMoveEvent);

              _this2.refs.linesWrapper.removeEventListener('mouseleave', stopMoveEvent);

              eventComponent.endResizing(mouseEvent);
            };

            this.refs.linesWrapper.addEventListener('mousemove', mouseMoveEvent);
            this.refs.linesWrapper.addEventListener('mouseup', stopMoveEvent);
            this.refs.linesWrapper.addEventListener('mouseleave', stopMoveEvent);
          }
        }, {
          key: "resizeDown",
          value: function resizeDown(eventComponent, clickedTop) {
            var _this3 = this;

            var initialHeight = eventComponent.state.height;
            var nextTop = this.props.timeline.getNextTop(eventComponent);

            var mouseMoveEvent = function mouseMoveEvent(moveEvent) {
              eventComponent.resizing = true;
              var targetHeight = initialHeight + moveEvent.clientY - clickedTop;

              if (targetHeight > 36) {
                var targetBottom = eventComponent.state.top + targetHeight;

                if (targetBottom >= nextTop) {
                  targetBottom = nextTop;
                }

                eventComponent.resizingTimeSpan = new __WEBPACK_IMPORTED_MODULE_1__classes_TimeSpan__["a"
                /* default */
                ](eventComponent.currentTimeSpan.getStartTime(), _this3.props.timeline.topToTime(targetBottom));
                eventComponent.setState({
                  height: _this3.props.timeline.timeSpanToHeight(eventComponent.resizingTimeSpan),
                  draggingDisplay: eventComponent.resizingTimeSpan.getEndTime().getDisplayTime(),
                  draggingDisplayTop: targetHeight - 10
                });
              }
            };

            var stopMoveEvent = function stopMoveEvent(mouseEvent) {
              _this3.refs.linesWrapper.removeEventListener('mousemove', mouseMoveEvent);

              _this3.refs.linesWrapper.removeEventListener('mouseup', stopMoveEvent);

              _this3.refs.linesWrapper.removeEventListener('mouseleave', stopMoveEvent);

              eventComponent.endResizing(mouseEvent);
            };

            this.refs.linesWrapper.addEventListener('mousemove', mouseMoveEvent);
            this.refs.linesWrapper.addEventListener('mouseup', stopMoveEvent);
            this.refs.linesWrapper.addEventListener('mouseleave', stopMoveEvent);
          }
        }, {
          key: "setHeight",
          value: function setHeight(height) {
            this.setState({
              height: height
            });
          }
        }, {
          key: "getRelativePos",
          value: function getRelativePos(e) {
            return {
              top: e.clientY - e.currentTarget.offsetTop + e.currentTarget.scrollTop,
              left: e.clientX - e.currentTarget.offsetLeft + e.currentTarget.scrollLeft
            };
          }
        }, {
          key: "componentDidMount",
          value: function componentDidMount() {
            var newState = {
              minWidth: this.props.timeline.getTotalWidth()
            };
            this.setState(newState, this.correctOutsideEvents);
          }
        }, {
          key: "componentWillReceiveProps",
          value: function componentWillReceiveProps(nextProps) {
            var newState = {};

            if (nextProps.lineData !== this.props.lineData) {
              newState.minWidth = this.props.timeline.getTotalWidth();
            }

            this.setState(newState, this.correctOutsideEvents);
          }
        }, {
          key: "correctOutsideEvents",
          value: function correctOutsideEvents() {
            this.props.timeline.eventComponents.forEach(function (event) {
              return event.correctPosition();
            });
          }
        }, {
          key: "render",
          value: function render() {
            var _this4 = this;

            var connectDropTarget = this.props.connectDropTarget;
            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              ref: function ref(elem) {
                return _this4.element = elem;
              },
              className: "tlFrameView scrollWrapper",
              style: {
                width: this.props.width,
                overflowX: 'auto'
              }
            }, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              style: {
                minWidth: this.state.minWidth + this.props.childWidth,
                display: "flex"
              }
            }, function () {
              return connectDropTarget(__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                className: "linesFrame",
                style: {
                  width: _this4.state.minWidth,
                  overflow: 'hidden'
                }
              }, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                style: {
                  width: _this4.state.minWidth + 20
                }
              }, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                className: "tlLabelView",
                style: {
                  height: __WEBPACK_IMPORTED_MODULE_9__LineLabel__["a"
                  /* default */
                  ].height
                }
              }, _this4.props.lineData.map(function (data, key) {
                var hasRuler = key % _this4.props.rulerInterval === 0;
                var prevRuler = (key + 1) % _this4.props.rulerInterval === 0;
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_9__LineLabel__["a"
                /* default */
                ], {
                  key: data.id + "@" + key,
                  width: _this4.props.lineWidth,
                  hasRuler: hasRuler,
                  prevRuler: prevRuler,
                  label: data.label,
                  timeline: _this4.props.timeline,
                  isLast: key == _this4.props.lineData.length - 1
                });
              })), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                ref: "linesWrapper",
                className: "tlLinesWrapper scrollWrapper",
                style: {
                  height: _this4.props.height - __WEBPACK_IMPORTED_MODULE_9__LineLabel__["a"
                  /* default */
                  ].height
                }
              }, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                style: {
                  height: _this4.props.lineHeight,
                  overflowY: "hidden",
                  position: "relative"
                }
              }, _this4.props.lineData.map(function (data, key) {
                var hasRuler = key % _this4.props.rulerInterval === 0;
                var prevRuler = (key + 1) % _this4.props.rulerInterval === 0;
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__Line__["a"
                /* default */
                ], {
                  ref: "line@" + data.id,
                  hasRuler: hasRuler,
                  key: data.id + "@" + key,
                  id: data.id,
                  width: _this4.props.lineWidth,
                  minHeight: _this4.props.minHeight,
                  timeSpan: _this4.props.timeSpan,
                  even: key % 2 === 0,
                  timeline: _this4.props.timeline,
                  vars: data.vars,
                  frame: _this4
                });
              }), _this4.props.events.map(function (event) {
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_7__Event__["a"
                /* default */
                ], {
                  ref: "event@" + event.id,
                  key: event.id,
                  id: event.id,
                  initialColor: event.color,
                  initialTimeSpan: event.timeSpan,
                  initialDisplay: event.display,
                  initialLineId: event.lineId,
                  timeline: _this4.props.timeline,
                  width: _this4.props.timeline.props.lineWidth - 2 - __WEBPACK_IMPORTED_MODULE_2__Line__["a"
                  /* default */
                  ].sidePadding * 2,
                  vars: event.vars,
                  float: event.float
                });
              })), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6__EventPreview__["a"
              /* default */
              ], {
                timeline: _this4.props.timeline
              })))));
            }(), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", null, this.props.children)));
          }
        }]);

        return Frame;
      }(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component); // Frame.propTypes = {
      //   timeSpan: React.PropTypes.instanceOf(TimeSpan).isRequired,
      //   lineData: React.PropTypes.arrayOf(React.PropTypes.shape({
      //     id: React.PropTypes.string.isRequired,
      //     label: React.PropTypes.string.isRequired
      //   })).isRequired,
      //   lineWidth: React.PropTypes.number.isRequired,
      //   minHeight: React.PropTypes.number.isRequired,
      //   onClick: React.PropTypes.func,
      //   timeline: React.PropTypes.any.isRequired,
      //   rulerInterval: React.PropTypes.number.isRequired,
      //   height: React.PropTypes.number.isRequired
      // }


      Frame.defaultProps = {
        events: [],
        childWidth: 0
      };
      /* harmony default export */

      __webpack_exports__["a"] = Object(__WEBPACK_IMPORTED_MODULE_4_react_dnd__["DragDropContext"])(__WEBPACK_IMPORTED_MODULE_5_react_dnd_touch_backend___default()({
        enableMouseEvents: true
      }))(Object(__WEBPACK_IMPORTED_MODULE_4_react_dnd__["DropTarget"])("Event", target, collect)(Frame));
      /***/
    },
    /* 58 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (binding) */

      __webpack_require__.d(__webpack_exports__, "a", function () {
        return Hour;
      });
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1__classes_Time__ = __webpack_require__(24);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_classnames__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      var Hour =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(Hour, _React$Component);

        function Hour(props) {
          var _this;

          _classCallCheck(this, Hour);

          _this = _possibleConstructorReturn(this, _getPrototypeOf(Hour).call(this, props));
          _this.state = {
            minutes: []
          };
          var minStyle = {
            height: _this.props.minHeight + 'px'
          };

          __WEBPACK_IMPORTED_MODULE_1__classes_Time__["a"
          /* default */
          ].eachMin(function (key, min) {
            _this.state.minutes.push(__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              key: min,
              className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()('tlMinView', 'tl' + min),
              style: minStyle
            }, "\xA0"));
          }, 15);

          return _this;
        }

        _createClass(Hour, [{
          key: "render",
          value: function render() {
            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()('tlHourView', 'tl' + this.props.time.getHour())
            }, this.state.minutes);
          }
        }]);

        return Hour;
      }(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component); // Hour.propTypes = {
      //   minHeight: React.PropTypes.number.isRequired,
      //   time: React.PropTypes.instanceOf(Time).isRequired
      // }

      /***/

    },
    /* 59 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      function __export(m) {
        for (var p in m) {
          if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }
      }

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __export(__webpack_require__(39));

      __export(__webpack_require__(60));
      /***/

    },
    /* 60 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var DragDropManagerImpl_1 = __webpack_require__(61);

      function createDragDropManager(backend, context) {
        return new DragDropManagerImpl_1.default(backend, context);
      }

      exports.createDragDropManager = createDragDropManager;
      /***/
    },
    /* 61 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var redux_1 = __webpack_require__(62);

      var reducers_1 = __webpack_require__(66);

      var dragDrop_1 = __webpack_require__(9);

      var DragDropMonitorImpl_1 = __webpack_require__(141);

      var HandlerRegistryImpl_1 = __webpack_require__(143);

      var DragDropManagerImpl =
      /** @class */
      function () {
        function DragDropManagerImpl(createBackend, context) {
          if (context === void 0) {
            context = {};
          }

          this.context = context;
          this.isSetUp = false;
          var store = redux_1.createStore(reducers_1.default);
          this.store = store;
          this.monitor = new DragDropMonitorImpl_1.default(store, new HandlerRegistryImpl_1.default(store));
          this.backend = createBackend(this);
          store.subscribe(this.handleRefCountChange.bind(this));
        }

        DragDropManagerImpl.prototype.getContext = function () {
          return this.context;
        };

        DragDropManagerImpl.prototype.getMonitor = function () {
          return this.monitor;
        };

        DragDropManagerImpl.prototype.getBackend = function () {
          return this.backend;
        };

        DragDropManagerImpl.prototype.getRegistry = function () {
          return this.monitor.registry;
        };

        DragDropManagerImpl.prototype.getActions = function () {
          var manager = this;
          var dispatch = this.store.dispatch;

          function bindActionCreator(actionCreator) {
            return function () {
              var args = [];

              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }

              var action = actionCreator.apply(manager, args);

              if (typeof action !== 'undefined') {
                dispatch(action);
              }
            };
          }

          var actions = dragDrop_1.default(this);
          return Object.keys(actions).reduce(function (boundActions, key) {
            var action = actions[key];
            boundActions[key] = bindActionCreator(action);
            return boundActions;
          }, {});
        };

        DragDropManagerImpl.prototype.dispatch = function (action) {
          this.store.dispatch(action);
        };

        DragDropManagerImpl.prototype.handleRefCountChange = function () {
          var shouldSetUp = this.store.getState().refCount > 0;

          if (shouldSetUp && !this.isSetUp) {
            this.backend.setup();
            this.isSetUp = true;
          } else if (!shouldSetUp && this.isSetUp) {
            this.backend.teardown();
            this.isSetUp = false;
          }
        };

        return DragDropManagerImpl;
      }();

      exports.default = DragDropManagerImpl;
      /***/
    },
    /* 62 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";

      Object.defineProperty(__webpack_exports__, "__esModule", {
        value: true
      });
      /* WEBPACK VAR INJECTION */

      (function (process) {
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "createStore", function () {
          return createStore;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "combineReducers", function () {
          return combineReducers;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "bindActionCreators", function () {
          return bindActionCreators;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "applyMiddleware", function () {
          return applyMiddleware;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "compose", function () {
          return compose;
        });
        /* harmony export (binding) */


        __webpack_require__.d(__webpack_exports__, "__DO_NOT_USE__ActionTypes", function () {
          return ActionTypes;
        });
        /* harmony import */


        var __WEBPACK_IMPORTED_MODULE_0_symbol_observable__ = __webpack_require__(63);
        /**
         * These are private action types reserved by Redux.
         * For any unknown actions, you must return the current state.
         * If the current state is undefined, you must return the initial state.
         * Do not reference these action types directly in your code.
         */


        var randomString = function randomString() {
          return Math.random().toString(36).substring(7).split('').join('.');
        };

        var ActionTypes = {
          INIT: "@@redux/INIT" + randomString(),
          REPLACE: "@@redux/REPLACE" + randomString(),
          PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
            return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
          }
        };
        /**
         * @param {any} obj The object to inspect.
         * @returns {boolean} True if the argument appears to be a plain object.
         */

        function isPlainObject(obj) {
          if (_typeof2(obj) !== 'object' || obj === null) return false;
          var proto = obj;

          while (Object.getPrototypeOf(proto) !== null) {
            proto = Object.getPrototypeOf(proto);
          }

          return Object.getPrototypeOf(obj) === proto;
        }
        /**
         * Creates a Redux store that holds the state tree.
         * The only way to change the data in the store is to call `dispatch()` on it.
         *
         * There should only be a single store in your app. To specify how different
         * parts of the state tree respond to actions, you may combine several reducers
         * into a single reducer function by using `combineReducers`.
         *
         * @param {Function} reducer A function that returns the next state tree, given
         * the current state tree and the action to handle.
         *
         * @param {any} [preloadedState] The initial state. You may optionally specify it
         * to hydrate the state from the server in universal apps, or to restore a
         * previously serialized user session.
         * If you use `combineReducers` to produce the root reducer function, this must be
         * an object with the same shape as `combineReducers` keys.
         *
         * @param {Function} [enhancer] The store enhancer. You may optionally specify it
         * to enhance the store with third-party capabilities such as middleware,
         * time travel, persistence, etc. The only store enhancer that ships with Redux
         * is `applyMiddleware()`.
         *
         * @returns {Store} A Redux store that lets you read the state, dispatch actions
         * and subscribe to changes.
         */


        function createStore(reducer, preloadedState, enhancer) {
          var _ref2;

          if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
            throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function');
          }

          if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
            enhancer = preloadedState;
            preloadedState = undefined;
          }

          if (typeof enhancer !== 'undefined') {
            if (typeof enhancer !== 'function') {
              throw new Error('Expected the enhancer to be a function.');
            }

            return enhancer(createStore)(reducer, preloadedState);
          }

          if (typeof reducer !== 'function') {
            throw new Error('Expected the reducer to be a function.');
          }

          var currentReducer = reducer;
          var currentState = preloadedState;
          var currentListeners = [];
          var nextListeners = currentListeners;
          var isDispatching = false;

          function ensureCanMutateNextListeners() {
            if (nextListeners === currentListeners) {
              nextListeners = currentListeners.slice();
            }
          }
          /**
           * Reads the state tree managed by the store.
           *
           * @returns {any} The current state tree of your application.
           */


          function getState() {
            if (isDispatching) {
              throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
            }

            return currentState;
          }
          /**
           * Adds a change listener. It will be called any time an action is dispatched,
           * and some part of the state tree may potentially have changed. You may then
           * call `getState()` to read the current state tree inside the callback.
           *
           * You may call `dispatch()` from a change listener, with the following
           * caveats:
           *
           * 1. The subscriptions are snapshotted just before every `dispatch()` call.
           * If you subscribe or unsubscribe while the listeners are being invoked, this
           * will not have any effect on the `dispatch()` that is currently in progress.
           * However, the next `dispatch()` call, whether nested or not, will use a more
           * recent snapshot of the subscription list.
           *
           * 2. The listener should not expect to see all state changes, as the state
           * might have been updated multiple times during a nested `dispatch()` before
           * the listener is called. It is, however, guaranteed that all subscribers
           * registered before the `dispatch()` started will be called with the latest
           * state by the time it exits.
           *
           * @param {Function} listener A callback to be invoked on every dispatch.
           * @returns {Function} A function to remove this change listener.
           */


          function subscribe(listener) {
            if (typeof listener !== 'function') {
              throw new Error('Expected the listener to be a function.');
            }

            if (isDispatching) {
              throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
            }

            var isSubscribed = true;
            ensureCanMutateNextListeners();
            nextListeners.push(listener);
            return function unsubscribe() {
              if (!isSubscribed) {
                return;
              }

              if (isDispatching) {
                throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
              }

              isSubscribed = false;
              ensureCanMutateNextListeners();
              var index = nextListeners.indexOf(listener);
              nextListeners.splice(index, 1);
            };
          }
          /**
           * Dispatches an action. It is the only way to trigger a state change.
           *
           * The `reducer` function, used to create the store, will be called with the
           * current state tree and the given `action`. Its return value will
           * be considered the **next** state of the tree, and the change listeners
           * will be notified.
           *
           * The base implementation only supports plain object actions. If you want to
           * dispatch a Promise, an Observable, a thunk, or something else, you need to
           * wrap your store creating function into the corresponding middleware. For
           * example, see the documentation for the `redux-thunk` package. Even the
           * middleware will eventually dispatch plain object actions using this method.
           *
           * @param {Object} action A plain object representing “what changed”. It is
           * a good idea to keep actions serializable so you can record and replay user
           * sessions, or use the time travelling `redux-devtools`. An action must have
           * a `type` property which may not be `undefined`. It is a good idea to use
           * string constants for action types.
           *
           * @returns {Object} For convenience, the same action object you dispatched.
           *
           * Note that, if you use a custom middleware, it may wrap `dispatch()` to
           * return something else (for example, a Promise you can await).
           */


          function dispatch(action) {
            if (!isPlainObject(action)) {
              throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
            }

            if (typeof action.type === 'undefined') {
              throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
            }

            if (isDispatching) {
              throw new Error('Reducers may not dispatch actions.');
            }

            try {
              isDispatching = true;
              currentState = currentReducer(currentState, action);
            } finally {
              isDispatching = false;
            }

            var listeners = currentListeners = nextListeners;

            for (var i = 0; i < listeners.length; i++) {
              var listener = listeners[i];
              listener();
            }

            return action;
          }
          /**
           * Replaces the reducer currently used by the store to calculate the state.
           *
           * You might need this if your app implements code splitting and you want to
           * load some of the reducers dynamically. You might also need this if you
           * implement a hot reloading mechanism for Redux.
           *
           * @param {Function} nextReducer The reducer for the store to use instead.
           * @returns {void}
           */


          function replaceReducer(nextReducer) {
            if (typeof nextReducer !== 'function') {
              throw new Error('Expected the nextReducer to be a function.');
            }

            currentReducer = nextReducer;
            dispatch({
              type: ActionTypes.REPLACE
            });
          }
          /**
           * Interoperability point for observable/reactive libraries.
           * @returns {observable} A minimal observable of state changes.
           * For more information, see the observable proposal:
           * https://github.com/tc39/proposal-observable
           */


          function observable() {
            var _ref;

            var outerSubscribe = subscribe;
            return _ref = {
              /**
               * The minimal observable subscription method.
               * @param {Object} observer Any object that can be used as an observer.
               * The observer object should have a `next` method.
               * @returns {subscription} An object with an `unsubscribe` method that can
               * be used to unsubscribe the observable from the store, and prevent further
               * emission of values from the observable.
               */
              subscribe: function subscribe(observer) {
                if (_typeof2(observer) !== 'object' || observer === null) {
                  throw new TypeError('Expected the observer to be an object.');
                }

                function observeState() {
                  if (observer.next) {
                    observer.next(getState());
                  }
                }

                observeState();
                var unsubscribe = outerSubscribe(observeState);
                return {
                  unsubscribe: unsubscribe
                };
              }
            }, _ref[__WEBPACK_IMPORTED_MODULE_0_symbol_observable__["a"
            /* default */
            ]] = function () {
              return this;
            }, _ref;
          } // When a store is created, an "INIT" action is dispatched so that every
          // reducer returns their initial state. This effectively populates
          // the initial state tree.


          dispatch({
            type: ActionTypes.INIT
          });
          return _ref2 = {
            dispatch: dispatch,
            subscribe: subscribe,
            getState: getState,
            replaceReducer: replaceReducer
          }, _ref2[__WEBPACK_IMPORTED_MODULE_0_symbol_observable__["a"
          /* default */
          ]] = observable, _ref2;
        }
        /**
         * Prints a warning in the console if it exists.
         *
         * @param {String} message The warning message.
         * @returns {void}
         */


        function warning(message) {
          /* eslint-disable no-console */
          if (typeof console !== 'undefined' && typeof console.error === 'function') {
            console.error(message);
          }
          /* eslint-enable no-console */


          try {
            // This error was thrown as a convenience so that if you enable
            // "break on all exceptions" in your console,
            // it would pause the execution at this line.
            throw new Error(message);
          } catch (e) {} // eslint-disable-line no-empty

        }

        function getUndefinedStateErrorMessage(key, action) {
          var actionType = action && action.type;
          var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
          return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
        }

        function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
          var reducerKeys = Object.keys(reducers);
          var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

          if (reducerKeys.length === 0) {
            return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
          }

          if (!isPlainObject(inputState)) {
            return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
          }

          var unexpectedKeys = Object.keys(inputState).filter(function (key) {
            return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
          });
          unexpectedKeys.forEach(function (key) {
            unexpectedKeyCache[key] = true;
          });
          if (action && action.type === ActionTypes.REPLACE) return;

          if (unexpectedKeys.length > 0) {
            return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
          }
        }

        function assertReducerShape(reducers) {
          Object.keys(reducers).forEach(function (key) {
            var reducer = reducers[key];
            var initialState = reducer(undefined, {
              type: ActionTypes.INIT
            });

            if (typeof initialState === 'undefined') {
              throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
            }

            if (typeof reducer(undefined, {
              type: ActionTypes.PROBE_UNKNOWN_ACTION()
            }) === 'undefined') {
              throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
            }
          });
        }
        /**
         * Turns an object whose values are different reducer functions, into a single
         * reducer function. It will call every child reducer, and gather their results
         * into a single state object, whose keys correspond to the keys of the passed
         * reducer functions.
         *
         * @param {Object} reducers An object whose values correspond to different
         * reducer functions that need to be combined into one. One handy way to obtain
         * it is to use ES6 `import * as reducers` syntax. The reducers may never return
         * undefined for any action. Instead, they should return their initial state
         * if the state passed to them was undefined, and the current state for any
         * unrecognized action.
         *
         * @returns {Function} A reducer function that invokes every reducer inside the
         * passed object, and builds a state object with the same shape.
         */


        function combineReducers(reducers) {
          var reducerKeys = Object.keys(reducers);
          var finalReducers = {};

          for (var i = 0; i < reducerKeys.length; i++) {
            var key = reducerKeys[i];

            if (process.env.NODE_ENV !== 'production') {
              if (typeof reducers[key] === 'undefined') {
                warning("No reducer provided for key \"" + key + "\"");
              }
            }

            if (typeof reducers[key] === 'function') {
              finalReducers[key] = reducers[key];
            }
          }

          var finalReducerKeys = Object.keys(finalReducers);
          var unexpectedKeyCache;

          if (process.env.NODE_ENV !== 'production') {
            unexpectedKeyCache = {};
          }

          var shapeAssertionError;

          try {
            assertReducerShape(finalReducers);
          } catch (e) {
            shapeAssertionError = e;
          }

          return function combination(state, action) {
            if (state === void 0) {
              state = {};
            }

            if (shapeAssertionError) {
              throw shapeAssertionError;
            }

            if (process.env.NODE_ENV !== 'production') {
              var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

              if (warningMessage) {
                warning(warningMessage);
              }
            }

            var hasChanged = false;
            var nextState = {};

            for (var _i = 0; _i < finalReducerKeys.length; _i++) {
              var _key = finalReducerKeys[_i];
              var reducer = finalReducers[_key];
              var previousStateForKey = state[_key];
              var nextStateForKey = reducer(previousStateForKey, action);

              if (typeof nextStateForKey === 'undefined') {
                var errorMessage = getUndefinedStateErrorMessage(_key, action);
                throw new Error(errorMessage);
              }

              nextState[_key] = nextStateForKey;
              hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
            }

            return hasChanged ? nextState : state;
          };
        }

        function bindActionCreator(actionCreator, dispatch) {
          return function () {
            return dispatch(actionCreator.apply(this, arguments));
          };
        }
        /**
         * Turns an object whose values are action creators, into an object with the
         * same keys, but with every function wrapped into a `dispatch` call so they
         * may be invoked directly. This is just a convenience method, as you can call
         * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
         *
         * For convenience, you can also pass a single function as the first argument,
         * and get a function in return.
         *
         * @param {Function|Object} actionCreators An object whose values are action
         * creator functions. One handy way to obtain it is to use ES6 `import * as`
         * syntax. You may also pass a single function.
         *
         * @param {Function} dispatch The `dispatch` function available on your Redux
         * store.
         *
         * @returns {Function|Object} The object mimicking the original object, but with
         * every action creator wrapped into the `dispatch` call. If you passed a
         * function as `actionCreators`, the return value will also be a single
         * function.
         */


        function bindActionCreators(actionCreators, dispatch) {
          if (typeof actionCreators === 'function') {
            return bindActionCreator(actionCreators, dispatch);
          }

          if (_typeof2(actionCreators) !== 'object' || actionCreators === null) {
            throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : _typeof2(actionCreators)) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
          }

          var keys = Object.keys(actionCreators);
          var boundActionCreators = {};

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var actionCreator = actionCreators[key];

            if (typeof actionCreator === 'function') {
              boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
            }
          }

          return boundActionCreators;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        function _objectSpread(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};
            var ownKeys = Object.keys(source);

            if (typeof Object.getOwnPropertySymbols === 'function') {
              ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
              }));
            }

            ownKeys.forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          }

          return target;
        }
        /**
         * Composes single-argument functions from right to left. The rightmost
         * function can take multiple arguments as it provides the signature for
         * the resulting composite function.
         *
         * @param {...Function} funcs The functions to compose.
         * @returns {Function} A function obtained by composing the argument functions
         * from right to left. For example, compose(f, g, h) is identical to doing
         * (...args) => f(g(h(...args))).
         */


        function compose() {
          for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
            funcs[_key] = arguments[_key];
          }

          if (funcs.length === 0) {
            return function (arg) {
              return arg;
            };
          }

          if (funcs.length === 1) {
            return funcs[0];
          }

          return funcs.reduce(function (a, b) {
            return function () {
              return a(b.apply(void 0, arguments));
            };
          });
        }
        /**
         * Creates a store enhancer that applies middleware to the dispatch method
         * of the Redux store. This is handy for a variety of tasks, such as expressing
         * asynchronous actions in a concise manner, or logging every action payload.
         *
         * See `redux-thunk` package as an example of the Redux middleware.
         *
         * Because middleware is potentially asynchronous, this should be the first
         * store enhancer in the composition chain.
         *
         * Note that each middleware will be given the `dispatch` and `getState` functions
         * as named arguments.
         *
         * @param {...Function} middlewares The middleware chain to be applied.
         * @returns {Function} A store enhancer applying the middleware.
         */


        function applyMiddleware() {
          for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
            middlewares[_key] = arguments[_key];
          }

          return function (createStore) {
            return function () {
              var store = createStore.apply(void 0, arguments);

              var _dispatch = function dispatch() {
                throw new Error("Dispatching while constructing your middleware is not allowed. " + "Other middleware would not be applied to this dispatch.");
              };

              var middlewareAPI = {
                getState: store.getState,
                dispatch: function dispatch() {
                  return _dispatch.apply(void 0, arguments);
                }
              };
              var chain = middlewares.map(function (middleware) {
                return middleware(middlewareAPI);
              });
              _dispatch = compose.apply(void 0, chain)(store.dispatch);
              return _objectSpread({}, store, {
                dispatch: _dispatch
              });
            };
          };
        }
        /*
         * This is a dummy function to check if the function name has been altered by minification.
         * If the function has been minified and NODE_ENV !== 'production', warn the user.
         */


        function isCrushed() {}

        if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
          warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
        }
        /* WEBPACK VAR INJECTION */

      }).call(__webpack_exports__, __webpack_require__(2));
      /***/
    },
    /* 63 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global, module) {
        /* harmony import */
        var __WEBPACK_IMPORTED_MODULE_0__ponyfill_js__ = __webpack_require__(65);
        /* global window */


        var root;

        if (typeof self !== 'undefined') {
          root = self;
        } else if (typeof window !== 'undefined') {
          root = window;
        } else if (typeof global !== 'undefined') {
          root = global;
        } else if (true) {
          root = module;
        } else {
          root = Function('return this')();
        }

        var result = Object(__WEBPACK_IMPORTED_MODULE_0__ponyfill_js__["a"
        /* default */
        ])(root);
        /* harmony default export */

        __webpack_exports__["a"] = result;
        /* WEBPACK VAR INJECTION */
      }).call(__webpack_exports__, __webpack_require__(8), __webpack_require__(64)(module));
      /***/
    },
    /* 64 */

    /***/
    function (module, exports) {
      module.exports = function (originalModule) {
        if (!originalModule.webpackPolyfill) {
          var module = Object.create(originalModule); // module.parent = undefined by default

          if (!module.children) module.children = [];
          Object.defineProperty(module, "loaded", {
            enumerable: true,
            get: function get() {
              return module.l;
            }
          });
          Object.defineProperty(module, "id", {
            enumerable: true,
            get: function get() {
              return module.i;
            }
          });
          Object.defineProperty(module, "exports", {
            enumerable: true
          });
          module.webpackPolyfill = 1;
        }

        return module;
      };
      /***/

    },
    /* 65 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony export (immutable) */

      __webpack_exports__["a"] = symbolObservablePonyfill;

      function symbolObservablePonyfill(root) {
        var result;
        var _Symbol5 = root.Symbol;

        if (typeof _Symbol5 === 'function') {
          if (_Symbol5.observable) {
            result = _Symbol5.observable;
          } else {
            result = _Symbol5('observable');
            _Symbol5.observable = result;
          }
        } else {
          result = '@@observable';
        }

        return result;
      }

      ;
      /***/
    },
    /* 66 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var __assign = this && this.__assign || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var dragOffset_1 = __webpack_require__(67);

      var dragOperation_1 = __webpack_require__(68);

      var refCount_1 = __webpack_require__(113);

      var dirtyHandlerIds_1 = __webpack_require__(114);

      var stateId_1 = __webpack_require__(130);

      var get = __webpack_require__(131);

      function reduce(state, action) {
        if (state === void 0) {
          state = {};
        }

        return {
          dirtyHandlerIds: dirtyHandlerIds_1.default(state.dirtyHandlerIds, {
            type: action.type,
            payload: __assign({}, action.payload, {
              prevTargetIds: get(state, 'dragOperation.targetIds', [])
            })
          }),
          dragOffset: dragOffset_1.default(state.dragOffset, action),
          refCount: refCount_1.default(state.refCount, action),
          dragOperation: dragOperation_1.default(state.dragOperation, action),
          stateId: stateId_1.default(state.stateId)
        };
      }

      exports.default = reduce;
      /***/
    },
    /* 67 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var __assign = this && this.__assign || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var dragDrop_1 = __webpack_require__(9);

      var equality_1 = __webpack_require__(41);

      var initialState = {
        initialSourceClientOffset: null,
        initialClientOffset: null,
        clientOffset: null
      };

      function dragOffset(state, action) {
        if (state === void 0) {
          state = initialState;
        }

        var payload = action.payload;

        switch (action.type) {
          case dragDrop_1.BEGIN_DRAG:
            return {
              initialSourceClientOffset: payload.sourceClientOffset,
              initialClientOffset: payload.clientOffset,
              clientOffset: payload.clientOffset
            };

          case dragDrop_1.HOVER:
            if (equality_1.areCoordsEqual(state.clientOffset, payload.clientOffset)) {
              return state;
            }

            return __assign({}, state, {
              clientOffset: payload.clientOffset
            });

          case dragDrop_1.END_DRAG:
          case dragDrop_1.DROP:
            return initialState;

          default:
            return state;
        }
      }

      exports.default = dragOffset;
      /***/
    },
    /* 68 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var __assign = this && this.__assign || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var dragDrop_1 = __webpack_require__(9);

      var registry_1 = __webpack_require__(11);

      var without = __webpack_require__(69);

      var initialState = {
        itemType: null,
        item: null,
        sourceId: null,
        targetIds: [],
        dropResult: null,
        didDrop: false,
        isSourcePublic: null
      };

      function dragOperation(state, action) {
        if (state === void 0) {
          state = initialState;
        }

        var payload = action.payload;

        switch (action.type) {
          case dragDrop_1.BEGIN_DRAG:
            return __assign({}, state, {
              itemType: payload.itemType,
              item: payload.item,
              sourceId: payload.sourceId,
              isSourcePublic: payload.isSourcePublic,
              dropResult: null,
              didDrop: false
            });

          case dragDrop_1.PUBLISH_DRAG_SOURCE:
            return __assign({}, state, {
              isSourcePublic: true
            });

          case dragDrop_1.HOVER:
            return __assign({}, state, {
              targetIds: payload.targetIds
            });

          case registry_1.REMOVE_TARGET:
            if (state.targetIds.indexOf(payload.targetId) === -1) {
              return state;
            }

            return __assign({}, state, {
              targetIds: without(state.targetIds, payload.targetId)
            });

          case dragDrop_1.DROP:
            return __assign({}, state, {
              dropResult: payload.dropResult,
              didDrop: true,
              targetIds: []
            });

          case dragDrop_1.END_DRAG:
            return __assign({}, state, {
              itemType: null,
              item: null,
              sourceId: null,
              dropResult: null,
              didDrop: false,
              isSourcePublic: null,
              targetIds: []
            });

          default:
            return state;
        }
      }

      exports.default = dragOperation;
      /***/
    },
    /* 69 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseDifference = __webpack_require__(42),
          baseRest = __webpack_require__(32),
          isArrayLikeObject = __webpack_require__(33);
      /**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */


      var without = baseRest(function (array, values) {
        return isArrayLikeObject(array) ? baseDifference(array, values) : [];
      });
      module.exports = without;
      /***/
    },
    /* 70 */

    /***/
    function (module, exports, __webpack_require__) {
      var Hash = __webpack_require__(71),
          ListCache = __webpack_require__(85),
          Map = __webpack_require__(92);
      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */


      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash(),
          'map': new (Map || ListCache)(),
          'string': new Hash()
        };
      }

      module.exports = mapCacheClear;
      /***/
    },
    /* 71 */

    /***/
    function (module, exports, __webpack_require__) {
      var hashClear = __webpack_require__(72),
          hashDelete = __webpack_require__(81),
          hashGet = __webpack_require__(82),
          hashHas = __webpack_require__(83),
          hashSet = __webpack_require__(84);
      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */


      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      } // Add methods to `Hash`.


      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module.exports = Hash;
      /***/
    },
    /* 72 */

    /***/
    function (module, exports, __webpack_require__) {
      var nativeCreate = __webpack_require__(12);
      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */


      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      module.exports = hashClear;
      /***/
    },
    /* 73 */

    /***/
    function (module, exports, __webpack_require__) {
      var isFunction = __webpack_require__(44),
          isMasked = __webpack_require__(77),
          isObject = __webpack_require__(26),
          toSource = __webpack_require__(79);
      /**
       * Used to match `RegExp`
       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
       */


      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      /** Used to detect host constructors (Safari). */

      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      /** Used for built-in method references. */

      var funcProto = Function.prototype,
          objectProto = Object.prototype;
      /** Used to resolve the decompiled source of functions. */

      var funcToString = funcProto.toString;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /** Used to detect if a method is native. */

      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */

      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }

        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      module.exports = baseIsNative;
      /***/
    },
    /* 74 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        /** Detect free variable `global` from Node.js. */
        var freeGlobal = _typeof2(global) == 'object' && global && global.Object === Object && global;
        module.exports = freeGlobal;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(8));
      /***/
    },
    /* 75 */

    /***/
    function (module, exports, __webpack_require__) {
      var _Symbol6 = __webpack_require__(14);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */

      var nativeObjectToString = objectProto.toString;
      /** Built-in value references. */

      var symToStringTag = _Symbol6 ? _Symbol6.toStringTag : undefined;
      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);

        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }

        return result;
      }

      module.exports = getRawTag;
      /***/
    },
    /* 76 */

    /***/
    function (module, exports) {
      /** Used for built-in method references. */
      var objectProto = Object.prototype;
      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */

      var nativeObjectToString = objectProto.toString;
      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      module.exports = objectToString;
      /***/
    },
    /* 77 */

    /***/
    function (module, exports, __webpack_require__) {
      var coreJsData = __webpack_require__(78);
      /** Used to detect methods masquerading as native. */


      var maskSrcKey = function () {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? 'Symbol(src)_1.' + uid : '';
      }();
      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */


      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }

      module.exports = isMasked;
      /***/
    },
    /* 78 */

    /***/
    function (module, exports, __webpack_require__) {
      var root = __webpack_require__(15);
      /** Used to detect overreaching core-js shims. */


      var coreJsData = root['__core-js_shared__'];
      module.exports = coreJsData;
      /***/
    },
    /* 79 */

    /***/
    function (module, exports) {
      /** Used for built-in method references. */
      var funcProto = Function.prototype;
      /** Used to resolve the decompiled source of functions. */

      var funcToString = funcProto.toString;
      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */

      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}

          try {
            return func + '';
          } catch (e) {}
        }

        return '';
      }

      module.exports = toSource;
      /***/
    },
    /* 80 */

    /***/
    function (module, exports) {
      /**
       * Gets the value at `key` of `object`.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function getValue(object, key) {
        return object == null ? undefined : object[key];
      }

      module.exports = getValue;
      /***/
    },
    /* 81 */

    /***/
    function (module, exports) {
      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      module.exports = hashDelete;
      /***/
    },
    /* 82 */

    /***/
    function (module, exports, __webpack_require__) {
      var nativeCreate = __webpack_require__(12);
      /** Used to stand-in for `undefined` hash values. */


      var HASH_UNDEFINED = '__lodash_hash_undefined__';
      /** Used for built-in method references. */

      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */

      function hashGet(key) {
        var data = this.__data__;

        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }

        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      module.exports = hashGet;
      /***/
    },
    /* 83 */

    /***/
    function (module, exports, __webpack_require__) {
      var nativeCreate = __webpack_require__(12);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */

      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
      }

      module.exports = hashHas;
      /***/
    },
    /* 84 */

    /***/
    function (module, exports, __webpack_require__) {
      var nativeCreate = __webpack_require__(12);
      /** Used to stand-in for `undefined` hash values. */


      var HASH_UNDEFINED = '__lodash_hash_undefined__';
      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */

      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        return this;
      }

      module.exports = hashSet;
      /***/
    },
    /* 85 */

    /***/
    function (module, exports, __webpack_require__) {
      var listCacheClear = __webpack_require__(86),
          listCacheDelete = __webpack_require__(87),
          listCacheGet = __webpack_require__(89),
          listCacheHas = __webpack_require__(90),
          listCacheSet = __webpack_require__(91);
      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */


      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;
        this.clear();

        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      } // Add methods to `ListCache`.


      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module.exports = ListCache;
      /***/
    },
    /* 86 */

    /***/
    function (module, exports) {
      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      module.exports = listCacheClear;
      /***/
    },
    /* 87 */

    /***/
    function (module, exports, __webpack_require__) {
      var assocIndexOf = __webpack_require__(16);
      /** Used for built-in method references. */


      var arrayProto = Array.prototype;
      /** Built-in value references. */

      var splice = arrayProto.splice;
      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */

      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }

        var lastIndex = data.length - 1;

        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }

        --this.size;
        return true;
      }

      module.exports = listCacheDelete;
      /***/
    },
    /* 88 */

    /***/
    function (module, exports) {
      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }

      module.exports = eq;
      /***/
    },
    /* 89 */

    /***/
    function (module, exports, __webpack_require__) {
      var assocIndexOf = __webpack_require__(16);
      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */


      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);
        return index < 0 ? undefined : data[index][1];
      }

      module.exports = listCacheGet;
      /***/
    },
    /* 90 */

    /***/
    function (module, exports, __webpack_require__) {
      var assocIndexOf = __webpack_require__(16);
      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */


      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      module.exports = listCacheHas;
      /***/
    },
    /* 91 */

    /***/
    function (module, exports, __webpack_require__) {
      var assocIndexOf = __webpack_require__(16);
      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */


      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }

        return this;
      }

      module.exports = listCacheSet;
      /***/
    },
    /* 92 */

    /***/
    function (module, exports, __webpack_require__) {
      var getNative = __webpack_require__(13),
          root = __webpack_require__(15);
      /* Built-in method references that are verified to be native. */


      var Map = getNative(root, 'Map');
      module.exports = Map;
      /***/
    },
    /* 93 */

    /***/
    function (module, exports, __webpack_require__) {
      var getMapData = __webpack_require__(17);
      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */


      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      module.exports = mapCacheDelete;
      /***/
    },
    /* 94 */

    /***/
    function (module, exports) {
      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = _typeof2(value);

        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
      }

      module.exports = isKeyable;
      /***/
    },
    /* 95 */

    /***/
    function (module, exports, __webpack_require__) {
      var getMapData = __webpack_require__(17);
      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */


      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      module.exports = mapCacheGet;
      /***/
    },
    /* 96 */

    /***/
    function (module, exports, __webpack_require__) {
      var getMapData = __webpack_require__(17);
      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */


      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      module.exports = mapCacheHas;
      /***/
    },
    /* 97 */

    /***/
    function (module, exports, __webpack_require__) {
      var getMapData = __webpack_require__(17);
      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */


      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      module.exports = mapCacheSet;
      /***/
    },
    /* 98 */

    /***/
    function (module, exports) {
      /** Used to stand-in for `undefined` hash values. */
      var HASH_UNDEFINED = '__lodash_hash_undefined__';
      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */

      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);

        return this;
      }

      module.exports = setCacheAdd;
      /***/
    },
    /* 99 */

    /***/
    function (module, exports) {
      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      module.exports = setCacheHas;
      /***/
    },
    /* 100 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseFindIndex = __webpack_require__(101),
          baseIsNaN = __webpack_require__(102),
          strictIndexOf = __webpack_require__(103);
      /**
       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */


      function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
      }

      module.exports = baseIndexOf;
      /***/
    },
    /* 101 */

    /***/
    function (module, exports) {
      /**
       * The base implementation of `_.findIndex` and `_.findLastIndex` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} predicate The function invoked per iteration.
       * @param {number} fromIndex The index to search from.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1);

        while (fromRight ? index-- : ++index < length) {
          if (predicate(array[index], index, array)) {
            return index;
          }
        }

        return -1;
      }

      module.exports = baseFindIndex;
      /***/
    },
    /* 102 */

    /***/
    function (module, exports) {
      /**
       * The base implementation of `_.isNaN` without support for number objects.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       */
      function baseIsNaN(value) {
        return value !== value;
      }

      module.exports = baseIsNaN;
      /***/
    },
    /* 103 */

    /***/
    function (module, exports) {
      /**
       * A specialized version of `_.indexOf` which performs strict equality
       * comparisons of values, i.e. `===`.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} fromIndex The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1,
            length = array.length;

        while (++index < length) {
          if (array[index] === value) {
            return index;
          }
        }

        return -1;
      }

      module.exports = strictIndexOf;
      /***/
    },
    /* 104 */

    /***/
    function (module, exports, __webpack_require__) {
      var apply = __webpack_require__(105);
      /* Built-in method references for those with the same name as other `lodash` methods. */


      var nativeMax = Math.max;
      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */

      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
        return function () {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }

          index = -1;
          var otherArgs = Array(start + 1);

          while (++index < start) {
            otherArgs[index] = args[index];
          }

          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      module.exports = overRest;
      /***/
    },
    /* 105 */

    /***/
    function (module, exports) {
      /**
       * A faster alternative to `Function#apply`, this function invokes `func`
       * with the `this` binding of `thisArg` and the arguments of `args`.
       *
       * @private
       * @param {Function} func The function to invoke.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} args The arguments to invoke `func` with.
       * @returns {*} Returns the result of `func`.
       */
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);

          case 1:
            return func.call(thisArg, args[0]);

          case 2:
            return func.call(thisArg, args[0], args[1]);

          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }

        return func.apply(thisArg, args);
      }

      module.exports = apply;
      /***/
    },
    /* 106 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseSetToString = __webpack_require__(107),
          shortOut = __webpack_require__(110);
      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */


      var setToString = shortOut(baseSetToString);
      module.exports = setToString;
      /***/
    },
    /* 107 */

    /***/
    function (module, exports, __webpack_require__) {
      var constant = __webpack_require__(108),
          defineProperty = __webpack_require__(109),
          identity = __webpack_require__(46);
      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */


      var baseSetToString = !defineProperty ? identity : function (func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };
      module.exports = baseSetToString;
      /***/
    },
    /* 108 */

    /***/
    function (module, exports) {
      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function () {
          return value;
        };
      }

      module.exports = constant;
      /***/
    },
    /* 109 */

    /***/
    function (module, exports, __webpack_require__) {
      var getNative = __webpack_require__(13);

      var defineProperty = function () {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }();

      module.exports = defineProperty;
      /***/
    },
    /* 110 */

    /***/
    function (module, exports) {
      /** Used to detect hot functions by number of calls within a span of milliseconds. */
      var HOT_COUNT = 800,
          HOT_SPAN = 16;
      /* Built-in method references for those with the same name as other `lodash` methods. */

      var nativeNow = Date.now;
      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */

      function shortOut(func) {
        var count = 0,
            lastCalled = 0;
        return function () {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;

          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }

          return func.apply(undefined, arguments);
        };
      }

      module.exports = shortOut;
      /***/
    },
    /* 111 */

    /***/
    function (module, exports, __webpack_require__) {
      var isFunction = __webpack_require__(44),
          isLength = __webpack_require__(112);
      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */


      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      module.exports = isArrayLike;
      /***/
    },
    /* 112 */

    /***/
    function (module, exports) {
      /** Used as references for various `Number` constants. */
      var MAX_SAFE_INTEGER = 9007199254740991;
      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */

      function isLength(value) {
        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      module.exports = isLength;
      /***/
    },
    /* 113 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var registry_1 = __webpack_require__(11);

      function refCount(state, action) {
        if (state === void 0) {
          state = 0;
        }

        switch (action.type) {
          case registry_1.ADD_SOURCE:
          case registry_1.ADD_TARGET:
            return state + 1;

          case registry_1.REMOVE_SOURCE:
          case registry_1.REMOVE_TARGET:
            return state - 1;

          default:
            return state;
        }
      }

      exports.default = refCount;
      /***/
    },
    /* 114 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var dragDrop_1 = __webpack_require__(9);

      var registry_1 = __webpack_require__(11);

      var equality_1 = __webpack_require__(41);

      var dirtiness_1 = __webpack_require__(47);

      var xor = __webpack_require__(118);

      function dirtyHandlerIds(state, action) {
        if (state === void 0) {
          state = dirtiness_1.NONE;
        }

        switch (action.type) {
          case dragDrop_1.HOVER:
            break;

          case registry_1.ADD_SOURCE:
          case registry_1.ADD_TARGET:
          case registry_1.REMOVE_TARGET:
          case registry_1.REMOVE_SOURCE:
            return dirtiness_1.NONE;

          case dragDrop_1.BEGIN_DRAG:
          case dragDrop_1.PUBLISH_DRAG_SOURCE:
          case dragDrop_1.END_DRAG:
          case dragDrop_1.DROP:
          default:
            return dirtiness_1.ALL;
        }

        var _a = action.payload,
            _b = _a.targetIds,
            targetIds = _b === void 0 ? [] : _b,
            _c = _a.prevTargetIds,
            prevTargetIds = _c === void 0 ? [] : _c;
        var result = xor(targetIds, prevTargetIds);
        var didChange = result.length > 0 || !equality_1.areArraysEqual(targetIds, prevTargetIds);

        if (!didChange) {
          return dirtiness_1.NONE;
        } // Check the target ids at the innermost position. If they are valid, add them
        // to the result


        var prevInnermostTargetId = prevTargetIds[prevTargetIds.length - 1];
        var innermostTargetId = targetIds[targetIds.length - 1];

        if (prevInnermostTargetId !== innermostTargetId) {
          if (prevInnermostTargetId) {
            result.push(prevInnermostTargetId);
          }

          if (innermostTargetId) {
            result.push(innermostTargetId);
          }
        }

        return result;
      }

      exports.default = dirtyHandlerIds;
      /***/
    },
    /* 115 */

    /***/
    function (module, exports, __webpack_require__) {
      var arrayMap = __webpack_require__(18),
          baseIntersection = __webpack_require__(116),
          baseRest = __webpack_require__(32),
          castArrayLikeObject = __webpack_require__(117);
      /**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */


      var intersection = baseRest(function (arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      module.exports = intersection;
      /***/
    },
    /* 116 */

    /***/
    function (module, exports, __webpack_require__) {
      var SetCache = __webpack_require__(27),
          arrayIncludes = __webpack_require__(29),
          arrayIncludesWith = __webpack_require__(30),
          arrayMap = __webpack_require__(18),
          baseUnary = __webpack_require__(45),
          cacheHas = __webpack_require__(31);
      /* Built-in method references for those with the same name as other `lodash` methods. */


      var nativeMin = Math.min;
      /**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */

      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];

          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }

          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
        }

        array = arrays[0];
        var index = -1,
            seen = caches[0];

        outer: while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
            othIndex = othLength;

            while (--othIndex) {
              var cache = caches[othIndex];

              if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                continue outer;
              }
            }

            if (seen) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      module.exports = baseIntersection;
      /***/
    },
    /* 117 */

    /***/
    function (module, exports, __webpack_require__) {
      var isArrayLikeObject = __webpack_require__(33);
      /**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */


      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      module.exports = castArrayLikeObject;
      /***/
    },
    /* 118 */

    /***/
    function (module, exports, __webpack_require__) {
      var arrayFilter = __webpack_require__(119),
          baseRest = __webpack_require__(32),
          baseXor = __webpack_require__(120),
          isArrayLikeObject = __webpack_require__(33);
      /**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */


      var xor = baseRest(function (arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      module.exports = xor;
      /***/
    },
    /* 119 */

    /***/
    function (module, exports) {
      /**
       * A specialized version of `_.filter` for arrays without support for
       * iteratee shorthands.
       *
       * @private
       * @param {Array} [array] The array to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function arrayFilter(array, predicate) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];

          if (predicate(value, index, array)) {
            result[resIndex++] = value;
          }
        }

        return result;
      }

      module.exports = arrayFilter;
      /***/
    },
    /* 120 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseDifference = __webpack_require__(42),
          baseFlatten = __webpack_require__(121),
          baseUniq = __webpack_require__(126);
      /**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */


      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;

        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }

        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }

        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      module.exports = baseXor;
      /***/
    },
    /* 121 */

    /***/
    function (module, exports, __webpack_require__) {
      var arrayPush = __webpack_require__(122),
          isFlattenable = __webpack_require__(123);
      /**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */


      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];

          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              // Recursively flatten arrays (susceptible to call stack limits).
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }

        return result;
      }

      module.exports = baseFlatten;
      /***/
    },
    /* 122 */

    /***/
    function (module, exports) {
      /**
       * Appends the elements of `values` to `array`.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to append.
       * @returns {Array} Returns `array`.
       */
      function arrayPush(array, values) {
        var index = -1,
            length = values.length,
            offset = array.length;

        while (++index < length) {
          array[offset + index] = values[index];
        }

        return array;
      }

      module.exports = arrayPush;
      /***/
    },
    /* 123 */

    /***/
    function (module, exports, __webpack_require__) {
      var _Symbol7 = __webpack_require__(14),
          isArguments = __webpack_require__(124),
          isArray = __webpack_require__(20);
      /** Built-in value references. */


      var spreadableSymbol = _Symbol7 ? _Symbol7.isConcatSpreadable : undefined;
      /**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */

      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      module.exports = isFlattenable;
      /***/
    },
    /* 124 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseIsArguments = __webpack_require__(125),
          isObjectLike = __webpack_require__(19);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /** Built-in value references. */

      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */

      var isArguments = baseIsArguments(function () {
        return arguments;
      }()) ? baseIsArguments : function (value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
      };
      module.exports = isArguments;
      /***/
    },
    /* 125 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseGetTag = __webpack_require__(28),
          isObjectLike = __webpack_require__(19);
      /** `Object#toString` result references. */


      var argsTag = '[object Arguments]';
      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */

      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      module.exports = baseIsArguments;
      /***/
    },
    /* 126 */

    /***/
    function (module, exports, __webpack_require__) {
      var SetCache = __webpack_require__(27),
          arrayIncludes = __webpack_require__(29),
          arrayIncludesWith = __webpack_require__(30),
          cacheHas = __webpack_require__(31),
          createSet = __webpack_require__(127),
          setToArray = __webpack_require__(48);
      /** Used as the size to enable large array optimizations. */


      var LARGE_ARRAY_SIZE = 200;
      /**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */

      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);

          if (set) {
            return setToArray(set);
          }

          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }

        outer: while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;

          if (isCommon && computed === computed) {
            var seenIndex = seen.length;

            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }

            if (iteratee) {
              seen.push(computed);
            }

            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }

            result.push(value);
          }
        }

        return result;
      }

      module.exports = baseUniq;
      /***/
    },
    /* 127 */

    /***/
    function (module, exports, __webpack_require__) {
      var Set = __webpack_require__(128),
          noop = __webpack_require__(129),
          setToArray = __webpack_require__(48);
      /** Used as references for various `Number` constants. */


      var INFINITY = 1 / 0;
      /**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */

      var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
        return new Set(values);
      };
      module.exports = createSet;
      /***/
    },
    /* 128 */

    /***/
    function (module, exports, __webpack_require__) {
      var getNative = __webpack_require__(13),
          root = __webpack_require__(15);
      /* Built-in method references that are verified to be native. */


      var Set = getNative(root, 'Set');
      module.exports = Set;
      /***/
    },
    /* 129 */

    /***/
    function (module, exports) {
      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {// No operation performed.
      }

      module.exports = noop;
      /***/
    },
    /* 130 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      function stateId(state) {
        if (state === void 0) {
          state = 0;
        }

        return state + 1;
      }

      exports.default = stateId;
      /***/
    },
    /* 131 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseGet = __webpack_require__(132);
      /**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */


      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      module.exports = get;
      /***/
    },
    /* 132 */

    /***/
    function (module, exports, __webpack_require__) {
      var castPath = __webpack_require__(133),
          toKey = __webpack_require__(140);
      /**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */


      function baseGet(object, path) {
        path = castPath(path, object);
        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }

        return index && index == length ? object : undefined;
      }

      module.exports = baseGet;
      /***/
    },
    /* 133 */

    /***/
    function (module, exports, __webpack_require__) {
      var isArray = __webpack_require__(20),
          isKey = __webpack_require__(134),
          stringToPath = __webpack_require__(135),
          toString = __webpack_require__(138);
      /**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */


      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }

        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      module.exports = castPath;
      /***/
    },
    /* 134 */

    /***/
    function (module, exports, __webpack_require__) {
      var isArray = __webpack_require__(20),
          isSymbol = __webpack_require__(34);
      /** Used to match property names within property paths. */


      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/;
      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */

      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }

        var type = _typeof2(value);

        if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
          return true;
        }

        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
      }

      module.exports = isKey;
      /***/
    },
    /* 135 */

    /***/
    function (module, exports, __webpack_require__) {
      var memoizeCapped = __webpack_require__(136);
      /** Used to match property names within property paths. */


      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      /** Used to match backslashes in property paths. */

      var reEscapeChar = /\\(\\)?/g;
      /**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */

      var stringToPath = memoizeCapped(function (string) {
        var result = [];

        if (string.charCodeAt(0) === 46
        /* . */
        ) {
            result.push('');
          }

        string.replace(rePropName, function (match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
        });
        return result;
      });
      module.exports = stringToPath;
      /***/
    },
    /* 136 */

    /***/
    function (module, exports, __webpack_require__) {
      var memoize = __webpack_require__(137);
      /** Used as the maximum memoize cache size. */


      var MAX_MEMOIZE_SIZE = 500;
      /**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */

      function memoizeCapped(func) {
        var result = memoize(func, function (key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }

          return key;
        });
        var cache = result.cache;
        return result;
      }

      module.exports = memoizeCapped;
      /***/
    },
    /* 137 */

    /***/
    function (module, exports, __webpack_require__) {
      var MapCache = __webpack_require__(43);
      /** Error message constants. */


      var FUNC_ERROR_TEXT = 'Expected a function';
      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */

      function memoize(func, resolver) {
        if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }

        var memoized = function memoized() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }

          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };

        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      } // Expose `MapCache`.


      memoize.Cache = MapCache;
      module.exports = memoize;
      /***/
    },
    /* 138 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseToString = __webpack_require__(139);
      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */


      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      module.exports = toString;
      /***/
    },
    /* 139 */

    /***/
    function (module, exports, __webpack_require__) {
      var _Symbol8 = __webpack_require__(14),
          arrayMap = __webpack_require__(18),
          isArray = __webpack_require__(20),
          isSymbol = __webpack_require__(34);
      /** Used as references for various `Number` constants. */


      var INFINITY = 1 / 0;
      /** Used to convert symbols to primitives and strings. */

      var symbolProto = _Symbol8 ? _Symbol8.prototype : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;
      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */

      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }

        if (isArray(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return arrayMap(value, baseToString) + '';
        }

        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      module.exports = baseToString;
      /***/
    },
    /* 140 */

    /***/
    function (module, exports, __webpack_require__) {
      var isSymbol = __webpack_require__(34);
      /** Used as references for various `Number` constants. */


      var INFINITY = 1 / 0;
      /**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */

      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }

        var result = value + '';
        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
      }

      module.exports = toKey;
      /***/
    },
    /* 141 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var matchesType_1 = __webpack_require__(40);

      var coords_1 = __webpack_require__(142);

      var dirtiness_1 = __webpack_require__(47);

      var invariant = __webpack_require__(10);

      var DragDropMonitorImpl =
      /** @class */
      function () {
        function DragDropMonitorImpl(store, registry) {
          this.store = store;
          this.registry = registry;
        }

        DragDropMonitorImpl.prototype.subscribeToStateChange = function (listener, options) {
          var _this = this;

          if (options === void 0) {
            options = {
              handlerIds: undefined
            };
          }

          var handlerIds = options.handlerIds;
          invariant(typeof listener === 'function', 'listener must be a function.');
          invariant(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');
          var prevStateId = this.store.getState().stateId;

          var handleChange = function handleChange() {
            var state = _this.store.getState();

            var currentStateId = state.stateId;

            try {
              var canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !dirtiness_1.areDirty(state.dirtyHandlerIds, handlerIds);

              if (!canSkipListener) {
                listener();
              }
            } finally {
              prevStateId = currentStateId;
            }
          };

          return this.store.subscribe(handleChange);
        };

        DragDropMonitorImpl.prototype.subscribeToOffsetChange = function (listener) {
          var _this = this;

          invariant(typeof listener === 'function', 'listener must be a function.');
          var previousState = this.store.getState().dragOffset;

          var handleChange = function handleChange() {
            var nextState = _this.store.getState().dragOffset;

            if (nextState === previousState) {
              return;
            }

            previousState = nextState;
            listener();
          };

          return this.store.subscribe(handleChange);
        };

        DragDropMonitorImpl.prototype.canDragSource = function (sourceId) {
          var source = this.registry.getSource(sourceId);
          invariant(source, 'Expected to find a valid source.');

          if (this.isDragging()) {
            return false;
          }

          return source.canDrag(this, sourceId);
        };

        DragDropMonitorImpl.prototype.canDropOnTarget = function (targetId) {
          var target = this.registry.getTarget(targetId);
          invariant(target, 'Expected to find a valid target.');

          if (!this.isDragging() || this.didDrop()) {
            return false;
          }

          var targetType = this.registry.getTargetType(targetId);
          var draggedItemType = this.getItemType();
          return matchesType_1.default(targetType, draggedItemType) && target.canDrop(this, targetId);
        };

        DragDropMonitorImpl.prototype.isDragging = function () {
          return Boolean(this.getItemType());
        };

        DragDropMonitorImpl.prototype.isDraggingSource = function (sourceId) {
          var source = this.registry.getSource(sourceId, true);
          invariant(source, 'Expected to find a valid source.');

          if (!this.isDragging() || !this.isSourcePublic()) {
            return false;
          }

          var sourceType = this.registry.getSourceType(sourceId);
          var draggedItemType = this.getItemType();

          if (sourceType !== draggedItemType) {
            return false;
          }

          return source.isDragging(this, sourceId);
        };

        DragDropMonitorImpl.prototype.isOverTarget = function (targetId, options) {
          if (options === void 0) {
            options = {
              shallow: false
            };
          }

          var shallow = options.shallow;

          if (!this.isDragging()) {
            return false;
          }

          var targetType = this.registry.getTargetType(targetId);
          var draggedItemType = this.getItemType();

          if (draggedItemType && !matchesType_1.default(targetType, draggedItemType)) {
            return false;
          }

          var targetIds = this.getTargetIds();

          if (!targetIds.length) {
            return false;
          }

          var index = targetIds.indexOf(targetId);

          if (shallow) {
            return index === targetIds.length - 1;
          } else {
            return index > -1;
          }
        };

        DragDropMonitorImpl.prototype.getItemType = function () {
          return this.store.getState().dragOperation.itemType;
        };

        DragDropMonitorImpl.prototype.getItem = function () {
          return this.store.getState().dragOperation.item;
        };

        DragDropMonitorImpl.prototype.getSourceId = function () {
          return this.store.getState().dragOperation.sourceId;
        };

        DragDropMonitorImpl.prototype.getTargetIds = function () {
          return this.store.getState().dragOperation.targetIds;
        };

        DragDropMonitorImpl.prototype.getDropResult = function () {
          return this.store.getState().dragOperation.dropResult;
        };

        DragDropMonitorImpl.prototype.didDrop = function () {
          return this.store.getState().dragOperation.didDrop;
        };

        DragDropMonitorImpl.prototype.isSourcePublic = function () {
          return this.store.getState().dragOperation.isSourcePublic;
        };

        DragDropMonitorImpl.prototype.getInitialClientOffset = function () {
          return this.store.getState().dragOffset.initialClientOffset;
        };

        DragDropMonitorImpl.prototype.getInitialSourceClientOffset = function () {
          return this.store.getState().dragOffset.initialSourceClientOffset;
        };

        DragDropMonitorImpl.prototype.getClientOffset = function () {
          return this.store.getState().dragOffset.clientOffset;
        };

        DragDropMonitorImpl.prototype.getSourceClientOffset = function () {
          return coords_1.getSourceClientOffset(this.store.getState().dragOffset);
        };

        DragDropMonitorImpl.prototype.getDifferenceFromInitialOffset = function () {
          return coords_1.getDifferenceFromInitialOffset(this.store.getState().dragOffset);
        };

        return DragDropMonitorImpl;
      }();

      exports.default = DragDropMonitorImpl;
      /***/
    },
    /* 142 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /**
       * Coordinate addition
       * @param a The first coordinate
       * @param b The second coordinate
       */

      function add(a, b) {
        return {
          x: a.x + b.x,
          y: a.y + b.y
        };
      }

      exports.add = add;
      /**
       * Coordinate subtraction
       * @param a The first coordinate
       * @param b The second coordinate
       */

      function subtract(a, b) {
        return {
          x: a.x - b.x,
          y: a.y - b.y
        };
      }

      exports.subtract = subtract;
      /**
       * Returns the cartesian distance of the drag source component's position, based on its position
       * at the time when the current drag operation has started, and the movement difference.
       *
       * Returns null if no item is being dragged.
       *
       * @param state The offset state to compute from
       */

      function getSourceClientOffset(state) {
        var clientOffset = state.clientOffset,
            initialClientOffset = state.initialClientOffset,
            initialSourceClientOffset = state.initialSourceClientOffset;

        if (!clientOffset || !initialClientOffset || !initialSourceClientOffset) {
          return null;
        }

        return subtract(add(clientOffset, initialSourceClientOffset), initialClientOffset);
      }

      exports.getSourceClientOffset = getSourceClientOffset;
      /**
       * Determines the x,y offset between the client offset and the initial client offset
       *
       * @param state The offset state to compute from
       */

      function getDifferenceFromInitialOffset(state) {
        var clientOffset = state.clientOffset,
            initialClientOffset = state.initialClientOffset;

        if (!clientOffset || !initialClientOffset) {
          return null;
        }

        return subtract(clientOffset, initialClientOffset);
      }

      exports.getDifferenceFromInitialOffset = getDifferenceFromInitialOffset;
      /***/
    },
    /* 143 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var registry_1 = __webpack_require__(11);

      var getNextUniqueId_1 = __webpack_require__(144);

      var interfaces_1 = __webpack_require__(39);

      var contracts_1 = __webpack_require__(145);

      var invariant = __webpack_require__(10);

      var asap = __webpack_require__(146);

      function getNextHandlerId(role) {
        var id = getNextUniqueId_1.default().toString();

        switch (role) {
          case interfaces_1.HandlerRole.SOURCE:
            return "S" + id;

          case interfaces_1.HandlerRole.TARGET:
            return "T" + id;

          default:
            throw new Error("Unknown Handler Role: " + role);
        }
      }

      function parseRoleFromHandlerId(handlerId) {
        switch (handlerId[0]) {
          case 'S':
            return interfaces_1.HandlerRole.SOURCE;

          case 'T':
            return interfaces_1.HandlerRole.TARGET;

          default:
            invariant(false, "Cannot parse handler ID: " + handlerId);
        }
      }

      function mapContainsValue(map, searchValue) {
        var entries = map.entries();
        var isDone = false;

        do {
          var _a = entries.next(),
              done = _a.done,
              _b = _a.value,
              value = _b[1];

          if (value === searchValue) {
            return true;
          }

          isDone = done;
        } while (!isDone);

        return false;
      }

      var HandlerRegistryImpl =
      /** @class */
      function () {
        function HandlerRegistryImpl(store) {
          this.store = store;
          this.types = new Map();
          this.dragSources = new Map();
          this.dropTargets = new Map();
          this.pinnedSourceId = null;
          this.pinnedSource = null;
        }

        HandlerRegistryImpl.prototype.addSource = function (type, source) {
          contracts_1.validateType(type);
          contracts_1.validateSourceContract(source);
          var sourceId = this.addHandler(interfaces_1.HandlerRole.SOURCE, type, source);
          this.store.dispatch(registry_1.addSource(sourceId));
          return sourceId;
        };

        HandlerRegistryImpl.prototype.addTarget = function (type, target) {
          contracts_1.validateType(type, true);
          contracts_1.validateTargetContract(target);
          var targetId = this.addHandler(interfaces_1.HandlerRole.TARGET, type, target);
          this.store.dispatch(registry_1.addTarget(targetId));
          return targetId;
        };

        HandlerRegistryImpl.prototype.containsHandler = function (handler) {
          return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);
        };

        HandlerRegistryImpl.prototype.getSource = function (sourceId, includePinned) {
          if (includePinned === void 0) {
            includePinned = false;
          }

          invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');
          var isPinned = includePinned && sourceId === this.pinnedSourceId;
          var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);
          return source;
        };

        HandlerRegistryImpl.prototype.getTarget = function (targetId) {
          invariant(this.isTargetId(targetId), 'Expected a valid target ID.');
          return this.dropTargets.get(targetId);
        };

        HandlerRegistryImpl.prototype.getSourceType = function (sourceId) {
          invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');
          return this.types.get(sourceId);
        };

        HandlerRegistryImpl.prototype.getTargetType = function (targetId) {
          invariant(this.isTargetId(targetId), 'Expected a valid target ID.');
          return this.types.get(targetId);
        };

        HandlerRegistryImpl.prototype.isSourceId = function (handlerId) {
          var role = parseRoleFromHandlerId(handlerId);
          return role === interfaces_1.HandlerRole.SOURCE;
        };

        HandlerRegistryImpl.prototype.isTargetId = function (handlerId) {
          var role = parseRoleFromHandlerId(handlerId);
          return role === interfaces_1.HandlerRole.TARGET;
        };

        HandlerRegistryImpl.prototype.removeSource = function (sourceId) {
          var _this = this;

          invariant(this.getSource(sourceId), 'Expected an existing source.');
          this.store.dispatch(registry_1.removeSource(sourceId));
          asap(function () {
            _this.dragSources.delete(sourceId);

            _this.types.delete(sourceId);
          });
        };

        HandlerRegistryImpl.prototype.removeTarget = function (targetId) {
          invariant(this.getTarget(targetId), 'Expected an existing target.');
          this.store.dispatch(registry_1.removeTarget(targetId));
          this.dropTargets.delete(targetId);
          this.types.delete(targetId);
        };

        HandlerRegistryImpl.prototype.pinSource = function (sourceId) {
          var source = this.getSource(sourceId);
          invariant(source, 'Expected an existing source.');
          this.pinnedSourceId = sourceId;
          this.pinnedSource = source;
        };

        HandlerRegistryImpl.prototype.unpinSource = function () {
          invariant(this.pinnedSource, 'No source is pinned at the time.');
          this.pinnedSourceId = null;
          this.pinnedSource = null;
        };

        HandlerRegistryImpl.prototype.addHandler = function (role, type, handler) {
          var id = getNextHandlerId(role);
          this.types.set(id, type);

          if (role === interfaces_1.HandlerRole.SOURCE) {
            this.dragSources.set(id, handler);
          } else if (role === interfaces_1.HandlerRole.TARGET) {
            this.dropTargets.set(id, handler);
          }

          return id;
        };

        return HandlerRegistryImpl;
      }();

      exports.default = HandlerRegistryImpl;
      /***/
    },
    /* 144 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var nextUniqueId = 0;

      function getNextUniqueId() {
        return nextUniqueId++;
      }

      exports.default = getNextUniqueId;
      /***/
    },
    /* 145 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var invariant = __webpack_require__(10);

      function validateSourceContract(source) {
        invariant(typeof source.canDrag === 'function', 'Expected canDrag to be a function.');
        invariant(typeof source.beginDrag === 'function', 'Expected beginDrag to be a function.');
        invariant(typeof source.endDrag === 'function', 'Expected endDrag to be a function.');
      }

      exports.validateSourceContract = validateSourceContract;

      function validateTargetContract(target) {
        invariant(typeof target.canDrop === 'function', 'Expected canDrop to be a function.');
        invariant(typeof target.hover === 'function', 'Expected hover to be a function.');
        invariant(typeof target.drop === 'function', 'Expected beginDrag to be a function.');
      }

      exports.validateTargetContract = validateTargetContract;

      function validateType(type, allowArray) {
        if (allowArray && Array.isArray(type)) {
          type.forEach(function (t) {
            return validateType(t, false);
          });
          return;
        }

        invariant(typeof type === 'string' || _typeof2(type) === 'symbol', allowArray ? 'Type can only be a string, a symbol, or an array of either.' : 'Type can only be a string or a symbol.');
      }

      exports.validateType = validateType;
      /***/
    },
    /* 146 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict"; // rawAsap provides everything we need except exception management.

      var rawAsap = __webpack_require__(147); // RawTasks are recycled to reduce GC churn.


      var freeTasks = []; // We queue errors to ensure they are thrown in right order (FIFO).
      // Array-as-queue is good enough here, since we are just dealing with exceptions.

      var pendingErrors = [];
      var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

      function throwFirstError() {
        if (pendingErrors.length) {
          throw pendingErrors.shift();
        }
      }
      /**
       * Calls a task as soon as possible after returning, in its own event, with priority
       * over other events like animation, reflow, and repaint. An error thrown from an
       * event will not interrupt, nor even substantially slow down the processing of
       * other events, but will be rather postponed to a lower priority event.
       * @param {{call}} task A callable object, typically a function that takes no
       * arguments.
       */


      module.exports = asap;

      function asap(task) {
        var rawTask;

        if (freeTasks.length) {
          rawTask = freeTasks.pop();
        } else {
          rawTask = new RawTask();
        }

        rawTask.task = task;
        rawAsap(rawTask);
      } // We wrap tasks with recyclable task objects.  A task object implements
      // `call`, just like a function.


      function RawTask() {
        this.task = null;
      } // The sole purpose of wrapping the task is to catch the exception and recycle
      // the task object after its single use.


      RawTask.prototype.call = function () {
        try {
          this.task.call();
        } catch (error) {
          if (asap.onerror) {
            // This hook exists purely for testing purposes.
            // Its name will be periodically randomized to break any code that
            // depends on its existence.
            asap.onerror(error);
          } else {
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            pendingErrors.push(error);
            requestErrorThrow();
          }
        } finally {
          this.task = null;
          freeTasks[freeTasks.length] = this;
        }
      };
      /***/

    },
    /* 147 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (global) {
        // Use the fastest means possible to execute a task in its own turn, with
        // priority over other events including IO, animation, reflow, and redraw
        // events in browsers.
        //
        // An exception thrown by a task will permanently interrupt the processing of
        // subsequent tasks. The higher level `asap` function ensures that if an
        // exception is thrown by a task, that the task queue will continue flushing as
        // soon as possible, but if you use `rawAsap` directly, you are responsible to
        // either ensure that no exceptions are thrown from your task, or to manually
        // call `rawAsap.requestFlush` if an exception is thrown.
        module.exports = rawAsap;

        function rawAsap(task) {
          if (!queue.length) {
            requestFlush();
            flushing = true;
          } // Equivalent to push, but avoids a function call.


          queue[queue.length] = task;
        }

        var queue = []; // Once a flush has been requested, no further calls to `requestFlush` are
        // necessary until the next `flush` completes.

        var flushing = false; // `requestFlush` is an implementation-specific method that attempts to kick
        // off a `flush` event as quickly as possible. `flush` will attempt to exhaust
        // the event queue before yielding to the browser's own event loop.

        var requestFlush; // The position of the next task to execute in the task queue. This is
        // preserved between calls to `flush` so that it can be resumed if
        // a task throws an exception.

        var index = 0; // If a task schedules additional tasks recursively, the task queue can grow
        // unbounded. To prevent memory exhaustion, the task queue will periodically
        // truncate already-completed tasks.

        var capacity = 1024; // The flush function processes all tasks that have been scheduled with
        // `rawAsap` unless and until one of those tasks throws an exception.
        // If a task throws an exception, `flush` ensures that its state will remain
        // consistent and will resume where it left off when called again.
        // However, `flush` does not make any arrangements to be called again if an
        // exception is thrown.

        function flush() {
          while (index < queue.length) {
            var currentIndex = index; // Advance the index before calling the task. This ensures that we will
            // begin flushing on the next task the task throws an error.

            index = index + 1;
            queue[currentIndex].call(); // Prevent leaking memory for long chains of recursive calls to `asap`.
            // If we call `asap` within tasks scheduled by `asap`, the queue will
            // grow, but to avoid an O(n) walk for every task we execute, we don't
            // shift tasks off the queue after they have been executed.
            // Instead, we periodically shift 1024 tasks off the queue.

            if (index > capacity) {
              // Manually shift all values starting at the index back to the
              // beginning of the queue.
              for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
              }

              queue.length -= index;
              index = 0;
            }
          }

          queue.length = 0;
          index = 0;
          flushing = false;
        } // `requestFlush` is implemented using a strategy based on data collected from
        // every available SauceLabs Selenium web driver worker at time of writing.
        // https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
        // Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
        // have WebKitMutationObserver but not un-prefixed MutationObserver.
        // Must use `global` or `self` instead of `window` to work in both frames and web
        // workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

        /* globals self */


        var scope = typeof global !== "undefined" ? global : self;
        var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver; // MutationObservers are desirable because they have high priority and work
        // reliably everywhere they are implemented.
        // They are implemented in all modern browsers.
        //
        // - Android 4-4.3
        // - Chrome 26-34
        // - Firefox 14-29
        // - Internet Explorer 11
        // - iPad Safari 6-7.1
        // - iPhone Safari 7-7.1
        // - Safari 6-7

        if (typeof BrowserMutationObserver === "function") {
          requestFlush = makeRequestCallFromMutationObserver(flush); // MessageChannels are desirable because they give direct access to the HTML
          // task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
          // 11-12, and in web workers in many engines.
          // Although message channels yield to any queued rendering and IO tasks, they
          // would be better than imposing the 4ms delay of timers.
          // However, they do not work reliably in Internet Explorer or Safari.
          // Internet Explorer 10 is the only browser that has setImmediate but does
          // not have MutationObservers.
          // Although setImmediate yields to the browser's renderer, it would be
          // preferrable to falling back to setTimeout since it does not have
          // the minimum 4ms penalty.
          // Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
          // Desktop to a lesser extent) that renders both setImmediate and
          // MessageChannel useless for the purposes of ASAP.
          // https://github.com/kriskowal/q/issues/396
          // Timers are implemented universally.
          // We fall back to timers in workers in most engines, and in foreground
          // contexts in the following browsers.
          // However, note that even this simple case requires nuances to operate in a
          // broad spectrum of browsers.
          //
          // - Firefox 3-13
          // - Internet Explorer 6-9
          // - iPad Safari 4.3
          // - Lynx 2.8.7
        } else {
          requestFlush = makeRequestCallFromTimer(flush);
        } // `requestFlush` requests that the high priority event queue be flushed as
        // soon as possible.
        // This is useful to prevent an error thrown in a task from stalling the event
        // queue if the exception handled by Node.js’s
        // `process.on("uncaughtException")` or by a domain.


        rawAsap.requestFlush = requestFlush; // To request a high priority event, we induce a mutation observer by toggling
        // the text of a text node between "1" and "-1".

        function makeRequestCallFromMutationObserver(callback) {
          var toggle = 1;
          var observer = new BrowserMutationObserver(callback);
          var node = document.createTextNode("");
          observer.observe(node, {
            characterData: true
          });
          return function requestCall() {
            toggle = -toggle;
            node.data = toggle;
          };
        } // The message channel technique was discovered by Malte Ubl and was the
        // original foundation for this library.
        // http://www.nonblocking.io/2011/06/windownexttick.html
        // Safari 6.0.5 (at least) intermittently fails to create message ports on a
        // page's first load. Thankfully, this version of Safari supports
        // MutationObservers, so we don't need to fall back in that case.
        // function makeRequestCallFromMessageChannel(callback) {
        //     var channel = new MessageChannel();
        //     channel.port1.onmessage = callback;
        //     return function requestCall() {
        //         channel.port2.postMessage(0);
        //     };
        // }
        // For reasons explained above, we are also unable to use `setImmediate`
        // under any circumstances.
        // Even if we were, there is another bug in Internet Explorer 10.
        // It is not sufficient to assign `setImmediate` to `requestFlush` because
        // `setImmediate` must be called *by name* and therefore must be wrapped in a
        // closure.
        // Never forget.
        // function makeRequestCallFromSetImmediate(callback) {
        //     return function requestCall() {
        //         setImmediate(callback);
        //     };
        // }
        // Safari 6.0 has a problem where timers will get lost while the user is
        // scrolling. This problem does not impact ASAP because Safari 6.0 supports
        // mutation observers, so that implementation is used instead.
        // However, if we ever elect to use timers in Safari, the prevalent work-around
        // is to add a scroll event listener that calls for a flush.
        // `setTimeout` does not call the passed callback if the delay is less than
        // approximately 7 in web workers in Firefox 8 through 18, and sometimes not
        // even then.


        function makeRequestCallFromTimer(callback) {
          return function requestCall() {
            // We dispatch a timeout with a specified delay of 0 for engines that
            // can reliably accommodate that request. This will usually be snapped
            // to a 4 milisecond delay, but once we're flushing, there's no delay
            // between events.
            var timeoutHandle = setTimeout(handleTimer, 0); // However, since this timer gets frequently dropped in Firefox
            // workers, we enlist an interval handle that will try to fire
            // an event 20 times per second until it succeeds.

            var intervalHandle = setInterval(handleTimer, 50);

            function handleTimer() {
              // Whichever timer succeeds will cancel both timers and
              // execute the callback.
              clearTimeout(timeoutHandle);
              clearInterval(intervalHandle);
              callback();
            }
          };
        } // This is for `asap.js` only.
        // Its name will be periodically randomized to break any code that depends on
        // its existence.


        rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer; // ASAP was originally a nextTick shim included in Q. This was factored out
        // into this ASAP package. It was later adapted to RSVP which made further
        // amendments. These decisions, particularly to marginalize MessageChannel and
        // to capture the MutationObserver implementation in a closure, were integrated
        // back into ASAP proper.
        // https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(8));
      /***/
    },
    /* 148 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var __extends = this && this.__extends || function () {
        var extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (d, b) {
          d.__proto__ = b;
        } || function (d, b) {
          for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
          }
        };

        return function (d, b) {
          extendStatics(d, b);

          function __() {
            this.constructor = d;
          }

          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();

      var __assign = this && this.__assign || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var React = __webpack_require__(0);

      var checkDecoratorArguments_1 = __webpack_require__(21);

      var DragDropContext_1 = __webpack_require__(25);

      var hoistStatics = __webpack_require__(35);

      var isPlainObject = __webpack_require__(5);

      var invariant = __webpack_require__(1);

      var shallowEqual = __webpack_require__(22);

      var isClassComponent = __webpack_require__(36).default;

      function DragLayer(collect, options) {
        if (options === void 0) {
          options = {};
        }

        checkDecoratorArguments_1.default('DragLayer', 'collect[, options]', collect, options);
        invariant(typeof collect === 'function', 'Expected "collect" provided as the first argument to DragLayer to be a function that collects props to inject into the component. ', 'Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs-drag-layer.html', collect);
        invariant(isPlainObject(options), 'Expected "options" provided as the second argument to DragLayer to be a plain object when specified. ' + 'Instead, received %s. Read more: http://react-dnd.github.io/react-dnd/docs-drag-layer.html', options);
        return function decorateLayer(DecoratedComponent) {
          var Decorated = DecoratedComponent;
          var _a = options.arePropsEqual,
              arePropsEqual = _a === void 0 ? shallowEqual : _a;
          var displayName = Decorated.displayName || Decorated.name || 'Component';

          var DragLayerContainer =
          /** @class */
          function (_super) {
            __extends(DragLayerContainer, _super);

            function DragLayerContainer(props) {
              var _this = _super.call(this, props) || this;

              _this.isCurrentlyMounted = false;
              _this.ref = React.createRef();
              _this.handleChange = _this.handleChange.bind(_this);
              return _this;
            }

            Object.defineProperty(DragLayerContainer.prototype, "DecoratedComponent", {
              get: function get() {
                return DecoratedComponent;
              },
              enumerable: true,
              configurable: true
            });

            DragLayerContainer.prototype.getDecoratedComponentInstance = function () {
              invariant(this.ref.current, 'In order to access an instance of the decorated component it can not be a stateless component.');
              return this.ref.current;
            };

            DragLayerContainer.prototype.shouldComponentUpdate = function (nextProps, nextState) {
              return !arePropsEqual(nextProps, this.props) || !shallowEqual(nextState, this.state);
            };

            DragLayerContainer.prototype.componentDidMount = function () {
              this.isCurrentlyMounted = true;
              this.handleChange();
            };

            DragLayerContainer.prototype.componentWillUnmount = function () {
              this.isCurrentlyMounted = false;

              if (this.unsubscribeFromOffsetChange) {
                this.unsubscribeFromOffsetChange();
                this.unsubscribeFromOffsetChange = undefined;
              }

              if (this.unsubscribeFromStateChange) {
                this.unsubscribeFromStateChange();
                this.unsubscribeFromStateChange = undefined;
              }
            };

            DragLayerContainer.prototype.render = function () {
              var _this = this;

              return React.createElement(DragDropContext_1.Consumer, null, function (_a) {
                var dragDropManager = _a.dragDropManager;

                if (dragDropManager === undefined) {
                  return null;
                }

                _this.receiveDragDropManager(dragDropManager); // Let componentDidMount fire to initialize the collected state


                if (!_this.isCurrentlyMounted) {
                  return null;
                }

                return React.createElement(Decorated, __assign({}, _this.props, _this.state, {
                  ref: isClassComponent(Decorated) ? _this.ref : undefined
                }));
              });
            };

            DragLayerContainer.prototype.receiveDragDropManager = function (dragDropManager) {
              if (this.manager !== undefined) {
                return;
              }

              this.manager = dragDropManager;
              invariant(_typeof2(dragDropManager) === 'object', 'Could not find the drag and drop manager in the context of %s. ' + 'Make sure to wrap the top-level component of your app with DragDropContext. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-troubleshooting.html#could-not-find-the-drag-and-drop-manager-in-the-context', displayName, displayName);
              var monitor = this.manager.getMonitor();
              this.unsubscribeFromOffsetChange = monitor.subscribeToOffsetChange(this.handleChange);
              this.unsubscribeFromStateChange = monitor.subscribeToStateChange(this.handleChange);
            };

            DragLayerContainer.prototype.handleChange = function () {
              if (!this.isCurrentlyMounted) {
                return;
              }

              var nextState = this.getCurrentState();

              if (!shallowEqual(nextState, this.state)) {
                this.setState(nextState);
              }
            };

            DragLayerContainer.prototype.getCurrentState = function () {
              if (!this.manager) {
                return {};
              }

              var monitor = this.manager.getMonitor();
              return collect(monitor, this.props);
            };

            DragLayerContainer.displayName = "DragLayer(" + displayName + ")";
            return DragLayerContainer;
          }(React.Component);

          return hoistStatics(DragLayerContainer, DecoratedComponent);
        };
      }

      exports.default = DragLayer;
      /***/
    },
    /* 149 */

    /***/
    function (module, exports, __webpack_require__) {
      var freeGlobal = __webpack_require__(150);
      /** Detect free variable `self`. */


      var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof2(self)) == 'object' && self && self.Object === Object && self;
      /** Used as a reference to the global object. */

      var root = freeGlobal || freeSelf || Function('return this')();
      module.exports = root;
      /***/
    },
    /* 150 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        /** Detect free variable `global` from Node.js. */
        var freeGlobal = _typeof2(global) == 'object' && global && global.Object === Object && global;
        module.exports = freeGlobal;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(8));
      /***/
    },
    /* 151 */

    /***/
    function (module, exports, __webpack_require__) {
      var _Symbol9 = __webpack_require__(50);
      /** Used for built-in method references. */


      var objectProto = Object.prototype;
      /** Used to check objects for own properties. */

      var hasOwnProperty = objectProto.hasOwnProperty;
      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */

      var nativeObjectToString = objectProto.toString;
      /** Built-in value references. */

      var symToStringTag = _Symbol9 ? _Symbol9.toStringTag : undefined;
      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */

      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);

        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }

        return result;
      }

      module.exports = getRawTag;
      /***/
    },
    /* 152 */

    /***/
    function (module, exports) {
      /** Used for built-in method references. */
      var objectProto = Object.prototype;
      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */

      var nativeObjectToString = objectProto.toString;
      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */

      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      module.exports = objectToString;
      /***/
    },
    /* 153 */

    /***/
    function (module, exports, __webpack_require__) {
      var overArg = __webpack_require__(154);
      /** Built-in value references. */


      var getPrototype = overArg(Object.getPrototypeOf, Object);
      module.exports = getPrototype;
      /***/
    },
    /* 154 */

    /***/
    function (module, exports) {
      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function (arg) {
          return func(transform(arg));
        };
      }

      module.exports = overArg;
      /***/
    },
    /* 155 */

    /***/
    function (module, exports) {
      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && _typeof2(value) == 'object';
      }

      module.exports = isObjectLike;
      /***/
    },
    /* 156 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var checkDecoratorArguments_1 = __webpack_require__(21);

      var decorateHandler_1 = __webpack_require__(51);

      var registerSource_1 = __webpack_require__(164);

      var createSourceFactory_1 = __webpack_require__(165);

      var createSourceMonitor_1 = __webpack_require__(166);

      var createSourceConnector_1 = __webpack_require__(167);

      var isValidType_1 = __webpack_require__(53);

      var invariant = __webpack_require__(1);

      var isPlainObject = __webpack_require__(5);
      /**
       * Decorates a component as a dragsource
       * @param type The dragsource type
       * @param spec The drag source specification
       * @param collect The props collector function
       * @param options DnD optinos
       */


      function DragSource(type, spec, collect, options) {
        if (options === void 0) {
          options = {};
        }

        checkDecoratorArguments_1.default('DragSource', 'type, spec, collect[, options]', type, spec, collect, options);
        var getType = type;

        if (typeof type !== 'function') {
          invariant(isValidType_1.default(type), 'Expected "type" provided as the first argument to DragSource to be ' + 'a string, or a function that returns a string given the current props. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', type);

          getType = function getType() {
            return type;
          };
        }

        invariant(isPlainObject(spec), 'Expected "spec" provided as the second argument to DragSource to be ' + 'a plain object. Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', spec);
        var createSource = createSourceFactory_1.default(spec);
        invariant(typeof collect === 'function', 'Expected "collect" provided as the third argument to DragSource to be ' + 'a function that returns a plain object of props to inject. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', collect);
        invariant(isPlainObject(options), 'Expected "options" provided as the fourth argument to DragSource to be ' + 'a plain object when specified. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', collect);
        return function decorateSource(DecoratedComponent) {
          return decorateHandler_1.default({
            containerDisplayName: 'DragSource',
            createHandler: createSource,
            registerHandler: registerSource_1.default,
            createMonitor: createSourceMonitor_1.default,
            createConnector: createSourceConnector_1.default,
            DecoratedComponent: DecoratedComponent,
            getType: getType,
            collect: collect,
            options: options
          });
        };
      }

      exports.default = DragSource;
      /***/
    },
    /* 157 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      function __export(m) {
        for (var p in m) {
          if (!exports.hasOwnProperty(p)) exports[p] = m[p];
        }
      }

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      __export(__webpack_require__(158));

      __export(__webpack_require__(162));

      __export(__webpack_require__(163));
      /***/

    },
    /* 158 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var isFunction = __webpack_require__(159);

      var noop = __webpack_require__(161);
      /**
       * Provides a set of static methods for creating Disposables.
       * @param {Function} action Action to run during the first call to dispose.
       * The action is guaranteed to be run at most once.
       */


      var Disposable =
      /** @class */
      function () {
        function Disposable(action) {
          this.isDisposed = false;
          this.action = isFunction(action) ? action : noop;
        }
        /**
         * Validates whether the given object is a disposable
         * @param {Object} Object to test whether it has a dispose method
         * @returns {Boolean} true if a disposable object, else false.
         */


        Disposable.isDisposable = function (d) {
          return d && isFunction(d.dispose);
        };

        Disposable._fixup = function (result) {
          return Disposable.isDisposable(result) ? result : Disposable.empty;
        };
        /**
         * Creates a disposable object that invokes the specified action when disposed.
         * @param {Function} dispose Action to run during the first call to dispose.
         * The action is guaranteed to be run at most once.
         * @return {Disposable} The disposable object that runs the given action upon disposal.
         */


        Disposable.create = function (action) {
          return new Disposable(action);
        };
        /** Performs the task of cleaning up resources. */


        Disposable.prototype.dispose = function () {
          if (!this.isDisposed) {
            this.action();
            this.isDisposed = true;
          }
        };
        /**
         * Gets the disposable that does nothing when disposed.
         */


        Disposable.empty = {
          dispose: noop
        };
        return Disposable;
      }();

      exports.Disposable = Disposable;
      /***/
    },
    /* 159 */

    /***/
    function (module, exports, __webpack_require__) {
      var baseGetTag = __webpack_require__(49),
          isObject = __webpack_require__(160);
      /** `Object#toString` result references. */


      var asyncTag = '[object AsyncFunction]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          proxyTag = '[object Proxy]';
      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */

      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        } // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.


        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      module.exports = isFunction;
      /***/
    },
    /* 160 */

    /***/
    function (module, exports) {
      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = _typeof2(value);

        return value != null && (type == 'object' || type == 'function');
      }

      module.exports = isObject;
      /***/
    },
    /* 161 */

    /***/
    function (module, exports) {
      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {// No operation performed.
      }

      module.exports = noop;
      /***/
    },
    /* 162 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /**
       * Represents a disposable resource whose underlying disposable resource can
       * be replaced by another disposable resource, causing automatic disposal of
       * the previous underlying disposable resource.
       */

      var SerialDisposable =
      /** @class */
      function () {
        function SerialDisposable() {
          this.isDisposed = false;
        }
        /**
         * Gets the underlying disposable.
         * @returns {Any} the underlying disposable.
         */


        SerialDisposable.prototype.getDisposable = function () {
          return this.current;
        };

        SerialDisposable.prototype.setDisposable = function (value) {
          var shouldDispose = this.isDisposed;

          if (!shouldDispose) {
            var old = this.current;
            this.current = value;

            if (old) {
              old.dispose();
            }
          }

          if (shouldDispose && value) {
            value.dispose();
          }
        };
        /** Performs the task of cleaning up resources. */


        SerialDisposable.prototype.dispose = function () {
          if (!this.isDisposed) {
            this.isDisposed = true;
            var old = this.current;
            this.current = undefined;

            if (old) {
              old.dispose();
            }
          }
        };

        return SerialDisposable;
      }();

      exports.SerialDisposable = SerialDisposable;
      /***/
    },
    /* 163 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      /**
       * Represents a group of disposable resources that are disposed together.
       * @constructor
       */

      var CompositeDisposable =
      /** @class */
      function () {
        function CompositeDisposable() {
          var disposables = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            disposables[_i] = arguments[_i];
          }

          this.isDisposed = false;
          this.disposables = disposables;
        }
        /**
         * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
         * @param {Any} item Disposable to add.
         */


        CompositeDisposable.prototype.add = function (item) {
          if (this.isDisposed) {
            item.dispose();
          } else {
            this.disposables.push(item);
          }
        };
        /**
         * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
         * @param {Any} item Disposable to remove.
         * @returns {Boolean} true if found; false otherwise.
         */


        CompositeDisposable.prototype.remove = function (item) {
          var shouldDispose = false;

          if (!this.isDisposed) {
            var idx = this.disposables.indexOf(item);

            if (idx !== -1) {
              shouldDispose = true;
              this.disposables.splice(idx, 1);
              item.dispose();
            }
          }

          return shouldDispose;
        };
        /**
         *  Disposes all disposables in the group and removes them from the group but
         *  does not dispose the CompositeDisposable.
         */


        CompositeDisposable.prototype.clear = function () {
          if (!this.isDisposed) {
            var len = this.disposables.length;
            var currentDisposables = new Array(len);

            for (var i = 0; i < len; i++) {
              currentDisposables[i] = this.disposables[i];
            }

            this.disposables = [];

            for (var i = 0; i < len; i++) {
              currentDisposables[i].dispose();
            }
          }
        };
        /**
         *  Disposes all disposables in the group and removes them from the group.
         */


        CompositeDisposable.prototype.dispose = function () {
          if (!this.isDisposed) {
            this.isDisposed = true;
            var len = this.disposables.length;
            var currentDisposables = new Array(len);

            for (var i = 0; i < len; i++) {
              currentDisposables[i] = this.disposables[i];
            }

            this.disposables = [];

            for (var i = 0; i < len; i++) {
              currentDisposables[i].dispose();
            }
          }
        };

        return CompositeDisposable;
      }();

      exports.CompositeDisposable = CompositeDisposable;
      /***/
    },
    /* 164 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      function registerSource(type, source, manager) {
        var registry = manager.getRegistry();
        var sourceId = registry.addSource(type, source);

        function unregisterSource() {
          registry.removeSource(sourceId);
        }

        return {
          handlerId: sourceId,
          unregister: unregisterSource
        };
      }

      exports.default = registerSource;
      /***/
    },
    /* 165 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var react_1 = __webpack_require__(0);

        var invariant = __webpack_require__(1);

        var isPlainObject = __webpack_require__(5);

        var ALLOWED_SPEC_METHODS = ['canDrag', 'beginDrag', 'isDragging', 'endDrag'];
        var REQUIRED_SPEC_METHODS = ['beginDrag'];

        function createSourceFactory(spec) {
          Object.keys(spec).forEach(function (key) {
            invariant(ALLOWED_SPEC_METHODS.indexOf(key) > -1, 'Expected the drag source specification to only have ' + 'some of the following keys: %s. ' + 'Instead received a specification with an unexpected "%s" key. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', ALLOWED_SPEC_METHODS.join(', '), key);
            invariant(typeof spec[key] === 'function', 'Expected %s in the drag source specification to be a function. ' + 'Instead received a specification with %s: %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', key, key, spec[key]);
          });
          REQUIRED_SPEC_METHODS.forEach(function (key) {
            invariant(typeof spec[key] === 'function', 'Expected %s in the drag source specification to be a function. ' + 'Instead received a specification with %s: %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', key, key, spec[key]);
          });

          var SourceImpl =
          /** @class */
          function () {
            function SourceImpl(monitor) {
              this.monitor = monitor;
              this.props = null;
              this.ref = react_1.createRef();
              this.beginDrag = this.beginDrag.bind(this);
            }

            SourceImpl.prototype.receiveProps = function (props) {
              this.props = props;
            };

            SourceImpl.prototype.canDrag = function () {
              if (!this.props) {
                return false;
              }

              if (!spec.canDrag) {
                return true;
              }

              return spec.canDrag(this.props, this.monitor);
            };

            SourceImpl.prototype.isDragging = function (globalMonitor, sourceId) {
              if (!this.props) {
                return false;
              }

              if (!spec.isDragging) {
                return sourceId === globalMonitor.getSourceId();
              }

              return spec.isDragging(this.props, this.monitor);
            };

            SourceImpl.prototype.beginDrag = function () {
              if (!this.props) {
                return;
              }

              var item = spec.beginDrag(this.props, this.monitor, this.ref.current);

              if (process.env.NODE_ENV !== 'production') {
                invariant(isPlainObject(item), 'beginDrag() must return a plain object that represents the dragged item. ' + 'Instead received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source.html', item);
              }

              return item;
            };

            SourceImpl.prototype.endDrag = function () {
              if (!this.props) {
                return;
              }

              if (!spec.endDrag) {
                return;
              }

              spec.endDrag(this.props, this.monitor, this.ref.current);
            };

            return SourceImpl;
          }();

          return function createSource(monitor) {
            return new SourceImpl(monitor);
          };
        }

        exports.default = createSourceFactory;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(2));
      /***/
    },
    /* 166 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var invariant = __webpack_require__(1);

      var isCallingCanDrag = false;
      var isCallingIsDragging = false;

      var SourceMonitor =
      /** @class */
      function () {
        function SourceMonitor(manager) {
          this.internalMonitor = manager.getMonitor();
        }

        SourceMonitor.prototype.receiveHandlerId = function (sourceId) {
          this.sourceId = sourceId;
        };

        SourceMonitor.prototype.canDrag = function () {
          invariant(!isCallingCanDrag, 'You may not call monitor.canDrag() inside your canDrag() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source-monitor.html');

          try {
            isCallingCanDrag = true;
            return this.internalMonitor.canDragSource(this.sourceId);
          } finally {
            isCallingCanDrag = false;
          }
        };

        SourceMonitor.prototype.isDragging = function () {
          invariant(!isCallingIsDragging, 'You may not call monitor.isDragging() inside your isDragging() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drag-source-monitor.html');

          try {
            isCallingIsDragging = true;
            return this.internalMonitor.isDraggingSource(this.sourceId);
          } finally {
            isCallingIsDragging = false;
          }
        };

        SourceMonitor.prototype.subscribeToStateChange = function (listener, options) {
          return this.internalMonitor.subscribeToStateChange(listener, options);
        };

        SourceMonitor.prototype.isDraggingSource = function (sourceId) {
          return this.internalMonitor.isDraggingSource(sourceId);
        };

        SourceMonitor.prototype.isOverTarget = function (targetId, options) {
          return this.internalMonitor.isOverTarget(targetId, options);
        };

        SourceMonitor.prototype.getTargetIds = function () {
          return this.internalMonitor.getTargetIds();
        };

        SourceMonitor.prototype.isSourcePublic = function () {
          return this.internalMonitor.isSourcePublic();
        };

        SourceMonitor.prototype.getSourceId = function () {
          return this.internalMonitor.getSourceId();
        };

        SourceMonitor.prototype.subscribeToOffsetChange = function (listener) {
          return this.internalMonitor.subscribeToOffsetChange(listener);
        };

        SourceMonitor.prototype.canDragSource = function (sourceId) {
          return this.internalMonitor.canDragSource(sourceId);
        };

        SourceMonitor.prototype.canDropOnTarget = function (targetId) {
          return this.internalMonitor.canDropOnTarget(targetId);
        };

        SourceMonitor.prototype.getItemType = function () {
          return this.internalMonitor.getItemType();
        };

        SourceMonitor.prototype.getItem = function () {
          return this.internalMonitor.getItem();
        };

        SourceMonitor.prototype.getDropResult = function () {
          return this.internalMonitor.getDropResult();
        };

        SourceMonitor.prototype.didDrop = function () {
          return this.internalMonitor.didDrop();
        };

        SourceMonitor.prototype.getInitialClientOffset = function () {
          return this.internalMonitor.getInitialClientOffset();
        };

        SourceMonitor.prototype.getInitialSourceClientOffset = function () {
          return this.internalMonitor.getInitialSourceClientOffset();
        };

        SourceMonitor.prototype.getSourceClientOffset = function () {
          return this.internalMonitor.getSourceClientOffset();
        };

        SourceMonitor.prototype.getClientOffset = function () {
          return this.internalMonitor.getClientOffset();
        };

        SourceMonitor.prototype.getDifferenceFromInitialOffset = function () {
          return this.internalMonitor.getDifferenceFromInitialOffset();
        };

        return SourceMonitor;
      }();

      function createSourceMonitor(manager) {
        return new SourceMonitor(manager);
      }

      exports.default = createSourceMonitor;
      /***/
    },
    /* 167 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var wrapConnectorHooks_1 = __webpack_require__(52);

      var shallowEqual = __webpack_require__(22);

      function createSourceConnector(backend) {
        var currentHandlerId;
        var currentDragSourceNode;
        var currentDragSourceOptions;
        var disconnectCurrentDragSource;
        var currentDragPreviewNode;
        var currentDragPreviewOptions;
        var disconnectCurrentDragPreview;

        function reconnectDragSource() {
          if (disconnectCurrentDragSource) {
            disconnectCurrentDragSource();
            disconnectCurrentDragSource = undefined;
          }

          if (currentHandlerId && currentDragSourceNode) {
            disconnectCurrentDragSource = backend.connectDragSource(currentHandlerId, currentDragSourceNode, currentDragSourceOptions);
          }
        }

        function reconnectDragPreview() {
          if (disconnectCurrentDragPreview) {
            disconnectCurrentDragPreview();
            disconnectCurrentDragPreview = undefined;
          }

          if (currentHandlerId && currentDragPreviewNode) {
            disconnectCurrentDragPreview = backend.connectDragPreview(currentHandlerId, currentDragPreviewNode, currentDragPreviewOptions);
          }
        }

        function receiveHandlerId(handlerId) {
          if (handlerId === currentHandlerId) {
            return;
          }

          currentHandlerId = handlerId;
          reconnectDragSource();
          reconnectDragPreview();
        }

        var hooks = wrapConnectorHooks_1.default({
          dragSource: function connectDragSource(node, options) {
            if (node === currentDragSourceNode && shallowEqual(options, currentDragSourceOptions)) {
              return;
            }

            currentDragSourceNode = node;
            currentDragSourceOptions = options;
            reconnectDragSource();
          },
          dragPreview: function connectDragPreview(node, options) {
            if (node === currentDragPreviewNode && shallowEqual(options, currentDragPreviewOptions)) {
              return;
            }

            currentDragPreviewNode = node;
            currentDragPreviewOptions = options;
            reconnectDragPreview();
          }
        });
        return {
          receiveHandlerId: receiveHandlerId,
          hooks: hooks
        };
      }

      exports.default = createSourceConnector;
      /***/
    },
    /* 168 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var react_1 = __webpack_require__(0);

      var invariant = __webpack_require__(1);

      function cloneWithRef(element, newRef) {
        var previousRef = element.ref;
        invariant(typeof previousRef !== 'string', 'Cannot connect React DnD to an element with an existing string ref. ' + 'Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. ' + 'Read more: https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');

        if (!previousRef) {
          // When there is no ref on the element, use the new ref directly
          return react_1.cloneElement(element, {
            ref: newRef
          });
        }

        return react_1.cloneElement(element, {
          ref: function ref(node) {
            newRef(node);

            if (previousRef) {
              previousRef(node);
            }
          }
        });
      }

      exports.default = cloneWithRef;
      /***/
    },
    /* 169 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var checkDecoratorArguments_1 = __webpack_require__(21);

      var decorateHandler_1 = __webpack_require__(51);

      var registerTarget_1 = __webpack_require__(170);

      var createTargetFactory_1 = __webpack_require__(171);

      var createTargetMonitor_1 = __webpack_require__(172);

      var createTargetConnector_1 = __webpack_require__(173);

      var isValidType_1 = __webpack_require__(53);

      var invariant = __webpack_require__(1);

      var isPlainObject = __webpack_require__(5);

      function DropTarget(type, spec, collect, options) {
        if (options === void 0) {
          options = {};
        }

        checkDecoratorArguments_1.default('DropTarget', 'type, spec, collect[, options]', type, spec, collect, options);
        var getType = type;

        if (typeof type !== 'function') {
          invariant(isValidType_1.default(type, true), 'Expected "type" provided as the first argument to DropTarget to be ' + 'a string, an array of strings, or a function that returns either given ' + 'the current props. Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drop-target.html', type);

          getType = function getType() {
            return type;
          };
        }

        invariant(isPlainObject(spec), 'Expected "spec" provided as the second argument to DropTarget to be ' + 'a plain object. Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drop-target.html', spec);
        var createTarget = createTargetFactory_1.default(spec);
        invariant(typeof collect === 'function', 'Expected "collect" provided as the third argument to DropTarget to be ' + 'a function that returns a plain object of props to inject. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drop-target.html', collect);
        invariant(isPlainObject(options), 'Expected "options" provided as the fourth argument to DropTarget to be ' + 'a plain object when specified. ' + 'Instead, received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drop-target.html', collect);
        return function decorateTarget(DecoratedComponent) {
          return decorateHandler_1.default({
            containerDisplayName: 'DropTarget',
            createHandler: createTarget,
            registerHandler: registerTarget_1.default,
            createMonitor: createTargetMonitor_1.default,
            createConnector: createTargetConnector_1.default,
            DecoratedComponent: DecoratedComponent,
            getType: getType,
            collect: collect,
            options: options
          });
        };
      }

      exports.default = DropTarget;
      /***/
    },
    /* 170 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      function registerTarget(type, target, manager) {
        var registry = manager.getRegistry();
        var targetId = registry.addTarget(type, target);

        function unregisterTarget() {
          registry.removeTarget(targetId);
        }

        return {
          handlerId: targetId,
          unregister: unregisterTarget
        };
      }

      exports.default = registerTarget;
      /***/
    },
    /* 171 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var react_1 = __webpack_require__(0);

        var invariant = __webpack_require__(1);

        var isPlainObject = __webpack_require__(5);

        var ALLOWED_SPEC_METHODS = ['canDrop', 'hover', 'drop'];

        function createTargetFactory(spec) {
          Object.keys(spec).forEach(function (key) {
            invariant(ALLOWED_SPEC_METHODS.indexOf(key) > -1, 'Expected the drop target specification to only have ' + 'some of the following keys: %s. ' + 'Instead received a specification with an unexpected "%s" key. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drop-target.html', ALLOWED_SPEC_METHODS.join(', '), key);
            invariant(typeof spec[key] === 'function', 'Expected %s in the drop target specification to be a function. ' + 'Instead received a specification with %s: %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drop-target.html', key, key, spec[key]);
          });

          var TargetImpl =
          /** @class */
          function () {
            function TargetImpl(monitor) {
              this.monitor = monitor;
              this.props = null;
              this.ref = react_1.createRef();
            }

            TargetImpl.prototype.receiveProps = function (props) {
              this.props = props;
            };

            TargetImpl.prototype.receiveMonitor = function (monitor) {
              this.monitor = monitor;
            };

            TargetImpl.prototype.canDrop = function () {
              if (!spec.canDrop) {
                return true;
              }

              return spec.canDrop(this.props, this.monitor);
            };

            TargetImpl.prototype.hover = function () {
              if (!spec.hover) {
                return;
              }

              spec.hover(this.props, this.monitor, this.ref.current);
            };

            TargetImpl.prototype.drop = function () {
              if (!spec.drop) {
                return undefined;
              }

              var dropResult = spec.drop(this.props, this.monitor, this.ref.current);

              if (process.env.NODE_ENV !== 'production') {
                invariant(typeof dropResult === 'undefined' || isPlainObject(dropResult), 'drop() must either return undefined, or an object that represents the drop result. ' + 'Instead received %s. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drop-target.html', dropResult);
              }

              return dropResult;
            };

            return TargetImpl;
          }();

          return function createTarget(monitor) {
            return new TargetImpl(monitor);
          };
        }

        exports.default = createTargetFactory;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(2));
      /***/
    },
    /* 172 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var invariant = __webpack_require__(1);

      var isCallingCanDrop = false;

      var TargetMonitor =
      /** @class */
      function () {
        function TargetMonitor(manager) {
          this.internalMonitor = manager.getMonitor();
        }

        TargetMonitor.prototype.receiveHandlerId = function (targetId) {
          this.targetId = targetId;
        };

        TargetMonitor.prototype.canDrop = function () {
          invariant(!isCallingCanDrop, 'You may not call monitor.canDrop() inside your canDrop() implementation. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-drop-target-monitor.html');

          try {
            isCallingCanDrop = true;
            return this.internalMonitor.canDropOnTarget(this.targetId);
          } finally {
            isCallingCanDrop = false;
          }
        };

        TargetMonitor.prototype.isOver = function (options) {
          return this.internalMonitor.isOverTarget(this.targetId, options);
        };

        TargetMonitor.prototype.getItemType = function () {
          return this.internalMonitor.getItemType();
        };

        TargetMonitor.prototype.getItem = function () {
          return this.internalMonitor.getItem();
        };

        TargetMonitor.prototype.getDropResult = function () {
          return this.internalMonitor.getDropResult();
        };

        TargetMonitor.prototype.didDrop = function () {
          return this.internalMonitor.didDrop();
        };

        TargetMonitor.prototype.getInitialClientOffset = function () {
          return this.internalMonitor.getInitialClientOffset();
        };

        TargetMonitor.prototype.getInitialSourceClientOffset = function () {
          return this.internalMonitor.getInitialSourceClientOffset();
        };

        TargetMonitor.prototype.getSourceClientOffset = function () {
          return this.internalMonitor.getSourceClientOffset();
        };

        TargetMonitor.prototype.getClientOffset = function () {
          return this.internalMonitor.getClientOffset();
        };

        TargetMonitor.prototype.getDifferenceFromInitialOffset = function () {
          return this.internalMonitor.getDifferenceFromInitialOffset();
        };

        return TargetMonitor;
      }();

      exports.TargetMonitor = TargetMonitor;

      function createTargetMonitor(manager) {
        return new TargetMonitor(manager);
      }

      exports.default = createTargetMonitor;
      /***/
    },
    /* 173 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });

      var wrapConnectorHooks_1 = __webpack_require__(52);

      var shallowEqual = __webpack_require__(22);

      function createTargetConnector(backend) {
        var currentHandlerId;
        var currentDropTargetNode;
        var currentDropTargetOptions;
        var disconnectCurrentDropTarget;

        function reconnectDropTarget() {
          if (disconnectCurrentDropTarget) {
            disconnectCurrentDropTarget();
            disconnectCurrentDropTarget = undefined;
          }

          if (currentHandlerId && currentDropTargetNode) {
            disconnectCurrentDropTarget = backend.connectDropTarget(currentHandlerId, currentDropTargetNode, currentDropTargetOptions);
          }
        }

        function receiveHandlerId(handlerId) {
          if (handlerId === currentHandlerId) {
            return;
          }

          currentHandlerId = handlerId;
          reconnectDropTarget();
        }

        var hooks = wrapConnectorHooks_1.default({
          dropTarget: function connectDropTarget(node, options) {
            if (node === currentDropTargetNode && shallowEqual(options, currentDropTargetOptions)) {
              return;
            }

            currentDropTargetNode = node;
            currentDropTargetOptions = options;
            reconnectDropTarget();
          }
        });
        return {
          receiveHandlerId: receiveHandlerId,
          hooks: hooks
        };
      }

      exports.default = createTargetConnector;
      /***/
    },
    /* 174 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /**
       * Copyright 2015, Yahoo Inc.
       * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.
       */

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTouchBackend;
      exports.TouchBackend = void 0;

      var _invariant = _interopRequireDefault(__webpack_require__(175));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          var ownKeys = Object.keys(source);

          if (typeof Object.getOwnPropertySymbols === 'function') {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
              return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
          }

          ownKeys.forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function getEventClientTouchOffset(e) {
        if (e.targetTouches.length === 1) {
          return getEventClientOffset(e.targetTouches[0]);
        }
      }

      function getEventClientOffset(e) {
        if (e.targetTouches) {
          return getEventClientTouchOffset(e);
        } else {
          return {
            x: e.clientX,
            y: e.clientY
          };
        }
      } // Used for MouseEvent.buttons (note the s on the end).


      var MouseButtons = {
        Left: 1,
        Right: 2,
        Center: 4 // Used for e.button (note the lack of an s on the end).

      };
      var MouseButton = {
        Left: 0,
        Center: 1,
        Right: 2
        /**
         * Only touch events and mouse events where the left button is pressed should initiate a drag.
         * @param {MouseEvent | TouchEvent} e The event
         */

      };

      function eventShouldStartDrag(e) {
        // For touch events, button will be undefined. If e.button is defined,
        // then it should be MouseButton.Left.
        return e.button === undefined || e.button === MouseButton.Left;
      }
      /**
       * Only touch events and mouse events where the left mouse button is no longer held should end a drag.
       * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.
       * We don't want releasing the right mouse button to end the drag.
       * @param {MouseEvent | TouchEvent} e The event
       */


      function eventShouldEndDrag(e) {
        // Touch events will have buttons be undefined, while mouse events will have e.buttons's left button
        // bit field unset if the left mouse button has been released
        return e.buttons === undefined || (e.buttons & MouseButtons.Left) === 0;
      } // Polyfill for document.elementsFromPoint


      var elementsFromPoint = (typeof document !== 'undefined' && document.elementsFromPoint || function (x, y) {
        if (document.msElementsFromPoint) {
          // msElementsFromPoint is much faster but returns a node-list, so convert it to an array
          var msElements = document.msElementsFromPoint(x, y);
          return msElements && Array.prototype.slice.call(msElements, 0);
        }

        var elements = [],
            previousPointerEvents = [],
            current,
            i,
            d; // get all elements via elementFromPoint, and remove them from hit-testing in order

        while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current !== null) {
          // push the element and its current style
          elements.push(current);
          previousPointerEvents.push({
            value: current.style.getPropertyValue('pointer-events'),
            priority: current.style.getPropertyPriority('pointer-events')
          }); // add "pointer-events: none", to get to the underlying element

          current.style.setProperty('pointer-events', 'none', 'important');
        } // restore the previous pointer-events values


        for (i = previousPointerEvents.length; d = previousPointerEvents[--i];) {
          elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);
        } // return our results


        return elements;
      }).bind(typeof document !== 'undefined' ? document : null);

      var supportsPassive = function () {
        // simular to jQuery's test
        var supported = false;

        try {
          addEventListener('test', null, Object.defineProperty({}, 'passive', {
            get: function get() {
              supported = true;
            }
          }));
        } catch (e) {}

        return supported;
      }();

      var ELEMENT_NODE = 1;

      function getNodeClientOffset(node) {
        var el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;

        if (!el) {
          return null;
        }

        var _el$getBoundingClient = el.getBoundingClientRect(),
            top = _el$getBoundingClient.top,
            left = _el$getBoundingClient.left;

        return {
          x: left,
          y: top
        };
      }

      var eventNames = {
        mouse: {
          start: 'mousedown',
          move: 'mousemove',
          end: 'mouseup',
          contextmenu: 'contextmenu'
        },
        touch: {
          start: 'touchstart',
          move: 'touchmove',
          end: 'touchend'
        },
        keyboard: {
          keydown: 'keydown'
        }
      };

      var TouchBackend =
      /*#__PURE__*/
      function () {
        function TouchBackend(manager) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          _classCallCheck(this, TouchBackend);

          options.delayTouchStart = options.delayTouchStart || options.delay;
          options = _objectSpread({
            enableTouchEvents: true,
            enableMouseEvents: false,
            enableKeyboardEvents: false,
            ignoreContextMenu: false,
            delayTouchStart: 0,
            delayMouseStart: 0,
            touchSlop: 0,
            scrollAngleRanges: undefined
          }, options);
          this.actions = manager.getActions();
          this.monitor = manager.getMonitor();
          this.registry = manager.getRegistry();
          this.enableKeyboardEvents = options.enableKeyboardEvents;
          this.enableMouseEvents = options.enableMouseEvents;
          this.delayTouchStart = options.delayTouchStart;
          this.delayMouseStart = options.delayMouseStart;
          this.ignoreContextMenu = options.ignoreContextMenu;
          this.touchSlop = options.touchSlop;
          this.scrollAngleRanges = options.scrollAngleRanges;
          this.sourceNodes = {};
          this.sourceNodeOptions = {};
          this.sourcePreviewNodes = {};
          this.sourcePreviewNodeOptions = {};
          this.targetNodes = {};
          this.targetNodeOptions = {};
          this.listenerTypes = [];
          this._mouseClientOffset = {};
          this._isScrolling = false;

          if (options.enableMouseEvents) {
            this.listenerTypes.push('mouse');
          }

          if (options.enableTouchEvents) {
            this.listenerTypes.push('touch');
          }

          if (options.enableKeyboardEvents) {
            this.listenerTypes.push('keyboard');
          }

          if (options.getDropTargetElementsAtPoint) {
            this.getDropTargetElementsAtPoint = options.getDropTargetElementsAtPoint;
          }

          this.getSourceClientOffset = this.getSourceClientOffset.bind(this);
          this.handleTopMoveStart = this.handleTopMoveStart.bind(this);
          this.handleTopMoveStartDelay = this.handleTopMoveStartDelay.bind(this);
          this.handleTopMoveStartCapture = this.handleTopMoveStartCapture.bind(this);
          this.handleTopMoveCapture = this.handleTopMoveCapture.bind(this);
          this.handleTopMove = this.handleTopMove.bind(this);
          this.handleTopMoveEndCapture = this.handleTopMoveEndCapture.bind(this);
          this.handleCancelOnEscape = this.handleCancelOnEscape.bind(this);
        }

        _createClass(TouchBackend, [{
          key: "setup",
          value: function setup() {
            if (typeof window === 'undefined') {
              return;
            }

            (0, _invariant.default)(!this.constructor.isSetUp, 'Cannot have two Touch backends at the same time.');
            this.constructor.isSetUp = true;
            this.addEventListener(window, 'start', this.getTopMoveStartHandler());
            this.addEventListener(window, 'start', this.handleTopMoveStartCapture, true);
            this.addEventListener(window, 'move', this.handleTopMove);
            this.addEventListener(window, 'move', this.handleTopMoveCapture, true);
            this.addEventListener(window, 'end', this.handleTopMoveEndCapture, true);

            if (this.enableMouseEvents && !this.ignoreContextMenu) {
              this.addEventListener(window, 'contextmenu', this.handleTopMoveEndCapture);
            }

            if (this.enableKeyboardEvents) {
              this.addEventListener(window, 'keydown', this.handleCancelOnEscape, true);
            }
          }
        }, {
          key: "teardown",
          value: function teardown() {
            if (typeof window === 'undefined') {
              return;
            }

            this.constructor.isSetUp = false;
            this._mouseClientOffset = {};
            this.removeEventListener(window, 'start', this.handleTopMoveStartCapture, true);
            this.removeEventListener(window, 'start', this.handleTopMoveStart);
            this.removeEventListener(window, 'move', this.handleTopMoveCapture, true);
            this.removeEventListener(window, 'move', this.handleTopMove);
            this.removeEventListener(window, 'end', this.handleTopMoveEndCapture, true);

            if (this.enableMouseEvents && !this.ignoreContextMenu) {
              this.removeEventListener(window, 'contextmenu', this.handleTopMoveEndCapture);
            }

            if (this.enableKeyboardEvents) {
              this.removeEventListener(window, 'keydown', this.handleCancelOnEscape, true);
            }

            this.uninstallSourceNodeRemovalObserver();
          }
        }, {
          key: "addEventListener",
          value: function addEventListener(subject, event, handler, capture) {
            var options = supportsPassive ? {
              capture: capture,
              passive: false
            } : capture;
            this.listenerTypes.forEach(function (listenerType) {
              var evt = eventNames[listenerType][event];

              if (evt) {
                subject.addEventListener(evt, handler, options);
              }
            });
          }
        }, {
          key: "removeEventListener",
          value: function removeEventListener(subject, event, handler, capture) {
            var options = supportsPassive ? {
              capture: capture,
              passive: false
            } : capture;
            this.listenerTypes.forEach(function (listenerType) {
              var evt = eventNames[listenerType][event];

              if (evt) {
                subject.removeEventListener(evt, handler, options);
              }
            });
          }
        }, {
          key: "connectDragSource",
          value: function connectDragSource(sourceId, node, options) {
            var _this = this;

            var handleMoveStart = this.handleMoveStart.bind(this, sourceId);
            this.sourceNodes[sourceId] = node;
            this.addEventListener(node, 'start', handleMoveStart);
            return function () {
              delete _this.sourceNodes[sourceId];

              _this.removeEventListener(node, 'start', handleMoveStart);
            };
          }
        }, {
          key: "connectDragPreview",
          value: function connectDragPreview(sourceId, node, options) {
            var _this2 = this;

            this.sourcePreviewNodeOptions[sourceId] = options;
            this.sourcePreviewNodes[sourceId] = node;
            return function () {
              delete _this2.sourcePreviewNodes[sourceId];
              delete _this2.sourcePreviewNodeOptions[sourceId];
            };
          }
        }, {
          key: "connectDropTarget",
          value: function connectDropTarget(targetId, node) {
            var _this3 = this;

            var handleMove = function handleMove(e) {
              var coords;

              if (!_this3.monitor.isDragging()) {
                return;
              }
              /**
               * Grab the coordinates for the current mouse/touch position
               */


              switch (e.type) {
                case eventNames.mouse.move:
                  coords = {
                    x: e.clientX,
                    y: e.clientY
                  };
                  break;

                case eventNames.touch.move:
                  coords = {
                    x: e.touches[0].clientX,
                    y: e.touches[0].clientY
                  };
                  break;
              }
              /**
               * Use the coordinates to grab the element the drag ended on.
               * If the element is the same as the target node (or any of it's children) then we have hit a drop target and can handle the move.
               */


              var droppedOn = document.elementFromPoint(coords.x, coords.y);
              var childMatch = node.contains(droppedOn);

              if (droppedOn === node || childMatch) {
                return _this3.handleMove(e, targetId);
              }
            };
            /**
             * Attaching the event listener to the body so that touchmove will work while dragging over multiple target elements.
             */


            this.addEventListener(document.querySelector('body'), 'move', handleMove);
            this.targetNodes[targetId] = node;
            return function () {
              delete _this3.targetNodes[targetId];

              _this3.removeEventListener(document.querySelector('body'), 'move', handleMove);
            };
          }
        }, {
          key: "getSourceClientOffset",
          value: function getSourceClientOffset(sourceId) {
            return getNodeClientOffset(this.sourceNodes[sourceId]);
          }
        }, {
          key: "handleTopMoveStartCapture",
          value: function handleTopMoveStartCapture(e) {
            if (!eventShouldStartDrag(e)) {
              return;
            }

            this.moveStartSourceIds = [];
          }
        }, {
          key: "handleMoveStart",
          value: function handleMoveStart(sourceId) {
            // Just because we received an event doesn't necessarily mean we need to collect drag sources.
            // We only collect start collecting drag sources on touch and left mouse events.
            if (Array.isArray(this.moveStartSourceIds)) {
              this.moveStartSourceIds.unshift(sourceId);
            }
          }
        }, {
          key: "getTopMoveStartHandler",
          value: function getTopMoveStartHandler() {
            if (!this.delayTouchStart && !this.delayMouseStart) {
              return this.handleTopMoveStart;
            }

            return this.handleTopMoveStartDelay;
          }
        }, {
          key: "handleTopMoveStart",
          value: function handleTopMoveStart(e) {
            if (!eventShouldStartDrag(e)) {
              return;
            } // Don't prematurely preventDefault() here since it might:
            // 1. Mess up scrolling
            // 2. Mess up long tap (which brings up context menu)
            // 3. If there's an anchor link as a child, tap won't be triggered on link


            var clientOffset = getEventClientOffset(e);

            if (clientOffset) {
              this._mouseClientOffset = clientOffset;
            }

            this.waitingForDelay = false;
          }
        }, {
          key: "handleTopMoveStartDelay",
          value: function handleTopMoveStartDelay(e) {
            if (!eventShouldStartDrag(e)) {
              return;
            }

            var delay = e.type === eventNames.touch.start ? this.delayTouchStart : this.delayMouseStart;
            this.timeout = setTimeout(this.handleTopMoveStart.bind(this, e), delay);
            this.waitingForDelay = true;
          }
        }, {
          key: "handleTopMoveCapture",
          value: function handleTopMoveCapture(e) {
            this.dragOverTargetIds = [];
          }
        }, {
          key: "handleMove",
          value: function handleMove(e, targetId) {
            this.dragOverTargetIds.unshift(targetId);
          }
        }, {
          key: "handleTopMove",
          value: function handleTopMove(e) {
            var _this4 = this;

            clearTimeout(this.timeout);

            if (this.waitingForDelay) {
              return;
            }

            var moveStartSourceIds = this.moveStartSourceIds,
                dragOverTargetIds = this.dragOverTargetIds;
            var clientOffset = getEventClientOffset(e);

            if (!clientOffset) {
              return;
            } // If the touch move started as a scroll, or is is between the scroll angles


            if (this._isScrolling || !this.monitor.isDragging() && inAngleRanges(this._mouseClientOffset.x, this._mouseClientOffset.y, clientOffset.x, clientOffset.y, this.scrollAngleRanges)) {
              this._isScrolling = true;
              return;
            } // If we're not dragging and we've moved a little, that counts as a drag start


            if (!this.monitor.isDragging() && this._mouseClientOffset.hasOwnProperty('x') && moveStartSourceIds && distance(this._mouseClientOffset.x, this._mouseClientOffset.y, clientOffset.x, clientOffset.y) > (this.touchSlop ? this.touchSlop : 0)) {
              this.moveStartSourceIds = null;
              this.actions.beginDrag(moveStartSourceIds, {
                clientOffset: this._mouseClientOffset,
                getSourceClientOffset: this.getSourceClientOffset,
                publishSource: false
              });
            }

            if (!this.monitor.isDragging()) {
              return;
            }

            var sourceNode = this.sourceNodes[this.monitor.getSourceId()];
            this.installSourceNodeRemovalObserver(sourceNode);
            this.actions.publishDragSource();
            e.preventDefault(); // Get the node elements of the hovered DropTargets

            var dragOverTargetNodes = dragOverTargetIds.map(function (key) {
              return _this4.targetNodes[key];
            }); // Get the a ordered list of nodes that are touched by

            var elementsAtPoint = this.getDropTargetElementsAtPoint ? this.getDropTargetElementsAtPoint(clientOffset.x, clientOffset.y, dragOverTargetNodes) : elementsFromPoint(clientOffset.x, clientOffset.y); // Extend list with parents that are not receiving elementsFromPoint events (size 0 elements and svg groups)

            var elementsAtPointExtended = [];

            for (var nodeId in elementsAtPoint) {
              if (!elementsAtPoint.hasOwnProperty(nodeId)) {
                continue;
              }

              var currentNode = elementsAtPoint[nodeId];
              elementsAtPointExtended.push(currentNode);

              while (currentNode) {
                currentNode = currentNode.parentElement;

                if (!elementsAtPointExtended.includes(currentNode)) {
                  elementsAtPointExtended.push(currentNode);
                }
              }
            }

            var orderedDragOverTargetIds = elementsAtPointExtended // Filter off nodes that arent a hovered DropTargets nodes
            .filter(function (node) {
              return dragOverTargetNodes.indexOf(node) > -1;
            }) // Map back the nodes elements to targetIds
            .map(function (node) {
              for (var targetId in _this4.targetNodes) {
                if (node === _this4.targetNodes[targetId]) {
                  return targetId;
                }
              }

              return null;
            }) // Filter off possible null rows
            .filter(function (node) {
              return !!node;
            }).filter(function (id, index, ids) {
              return ids.indexOf(id) === index;
            }); // Reverse order because dnd-core reverse it before calling the DropTarget drop methods

            orderedDragOverTargetIds.reverse();
            this.actions.hover(orderedDragOverTargetIds, {
              clientOffset: clientOffset
            });
          }
        }, {
          key: "handleTopMoveEndCapture",
          value: function handleTopMoveEndCapture(e) {
            this._isScrolling = false;

            if (!eventShouldEndDrag(e)) {
              return;
            }

            if (!this.monitor.isDragging() || this.monitor.didDrop()) {
              this.moveStartSourceIds = null;
              return;
            }

            e.preventDefault();
            this._mouseClientOffset = {};
            this.uninstallSourceNodeRemovalObserver();
            this.actions.drop();
            this.actions.endDrag();
          }
        }, {
          key: "handleCancelOnEscape",
          value: function handleCancelOnEscape(e) {
            if (e.key === 'Escape' && this.monitor.isDragging()) {
              this._mouseClientOffset = {};
              this.uninstallSourceNodeRemovalObserver();
              this.actions.endDrag();
            }
          }
        }, {
          key: "handleOnContextMenu",
          value: function handleOnContextMenu() {
            this.moveStartSourceIds = null;
          }
        }, {
          key: "installSourceNodeRemovalObserver",
          value: function installSourceNodeRemovalObserver(node) {
            var _this5 = this;

            this.uninstallSourceNodeRemovalObserver();
            this.draggedSourceNode = node;
            this.draggedSourceNodeRemovalObserver = new window.MutationObserver(function () {
              if (!node.parentElement) {
                _this5.resurrectSourceNode();

                _this5.uninstallSourceNodeRemovalObserver();
              }
            });

            if (!node || !node.parentElement) {
              return;
            }

            this.draggedSourceNodeRemovalObserver.observe(node.parentElement, {
              childList: true
            });
          }
        }, {
          key: "resurrectSourceNode",
          value: function resurrectSourceNode() {
            this.draggedSourceNode.style.display = 'none';
            this.draggedSourceNode.removeAttribute('data-reactid');
            document.body.appendChild(this.draggedSourceNode);
          }
        }, {
          key: "uninstallSourceNodeRemovalObserver",
          value: function uninstallSourceNodeRemovalObserver() {
            if (this.draggedSourceNodeRemovalObserver) {
              this.draggedSourceNodeRemovalObserver.disconnect();
            }

            this.draggedSourceNodeRemovalObserver = null;
            this.draggedSourceNode = null;
          }
        }]);

        return TouchBackend;
      }();

      exports.TouchBackend = TouchBackend;

      function createTouchBackend() {
        var optionsOrManager = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var touchBackendFactory = function touchBackendFactory(manager) {
          return new TouchBackend(manager, optionsOrManager);
        };

        if (optionsOrManager.getMonitor) {
          return touchBackendFactory(optionsOrManager);
        } else {
          return touchBackendFactory;
        }
      }

      function distance(x1, y1, x2, y2) {
        return Math.sqrt(Math.pow(Math.abs(x2 - x1), 2) + Math.pow(Math.abs(y2 - y1), 2));
      }

      function inAngleRanges(x1, y1, x2, y2, angleRanges) {
        if (angleRanges == null) {
          return false;
        }

        var angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI + 180;

        for (var i = 0; i < angleRanges.length; ++i) {
          if ((angleRanges[i].start == null || angle >= angleRanges[i].start) && (angleRanges[i].end == null || angle <= angleRanges[i].end)) {
            return true;
          }
        }

        return false;
      }
      /***/

    },
    /* 175 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";
      /* WEBPACK VAR INJECTION */

      (function (process) {
        /**
        * Copyright (c) 2013-present, Facebook, Inc.
        *
        * This source code is licensed under the MIT license found in the
        * LICENSE file in the root directory of this source tree.
        */

        /**
         * Use invariant() to assert state which your program assumes to be true.
         *
         * Provide sprintf-style format (only %s is supported) and arguments
         * to provide information about what broke and what you were
         * expecting.
         *
         * The invariant message will be stripped in production, but the invariant
         * will remain to ensure logic does not differ in production.
         */
        var invariant = function invariant(condition, format, a, b, c, d, e, f) {
          if (process.env.NODE_ENV !== 'production') {
            if (format === undefined) {
              throw new Error('invariant requires an error message argument');
            }
          }

          if (!condition) {
            var error;

            if (format === undefined) {
              error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
            } else {
              var args = [a, b, c, d, e, f];
              var argIndex = 0;
              error = new Error(format.replace(/%s/g, function () {
                return args[argIndex++];
              }));
              error.name = 'Invariant Violation';
            }

            error.framesToPop = 1; // we don't care about invariant's own frame

            throw error;
          }
        };

        module.exports = invariant;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(2));
      /***/
    },
    /* 176 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_react_dnd__ = __webpack_require__(7);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_react_dnd___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dnd__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__EventBase__ = __webpack_require__(54);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_object_assign__ = __webpack_require__(55);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_object_assign___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_object_assign__);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function collect(monitor) {
        var props = {
          clientOffset: monitor.getDifferenceFromInitialOffset()
        };
        var item = monitor.getItem();

        if (item && item['draggingComponent']) {
          props['draggingComponent'] = item['draggingComponent'];
        }

        return props;
      }

      var EventPreview =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(EventPreview, _React$Component);

        function EventPreview() {
          _classCallCheck(this, EventPreview);

          return _possibleConstructorReturn(this, _getPrototypeOf(EventPreview).apply(this, arguments));
        }

        _createClass(EventPreview, [{
          key: "getItemStyles",
          value: function getItemStyles() {
            if (!this.props.clientOffset) {
              return {
                display: 'none'
              };
            }

            var x = this.props.clientOffset.x;
            var y = this.props.clientOffset.y;
            var transform = "translate(".concat(x, "px, ").concat(y, "px)");
            return __WEBPACK_IMPORTED_MODULE_3_object_assign___default()(this.props.draggingComponent.getDraggingStyle(), {
              position: 'absolute',
              transform: transform,
              WebkitTransform: transform
            });
          }
        }, {
          key: "getRight",
          value: function getRight() {
            if (!this.props.draggingComponent) return undefined;
            var width = this.props.draggingComponent.props.width;

            if (this.props.clientOffset) {
              return this.props.draggingComponent.state.left + this.props.clientOffset.x + width;
            } else {
              return this.props.draggingComponent.state.left + width;
            }
          }
        }, {
          key: "render",
          value: function render() {
            var draggingDisplay = '';

            if (this.props.draggingComponent && this.props.draggingComponent.state.draggingDisplay) {
              draggingDisplay = this.props.draggingComponent.state.draggingDisplay;
            }

            var display = [];

            if (this.props.draggingComponent && this.props.draggingComponent.state.display) {
              display = this.props.draggingComponent.state.display;
            }

            return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              ref: "preview",
              className: "tlEventView tlDraggingEvent",
              style: this.getItemStyles()
            }, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__EventBase__["a"
            /* default */
            ], {
              draggingDisplay: draggingDisplay,
              display: display,
              timeline: this.props.timeline,
              right: this.getRight()
            }));
          }
        }]);

        return EventPreview;
      }(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);
      /* harmony default export */


      __webpack_exports__["a"] = Object(__WEBPACK_IMPORTED_MODULE_1_react_dnd__["DragLayer"])(collect)(EventPreview);
      /***/
    },
    /* 177 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* unused harmony export closest */

      function closest(elem, selector) {
        var matchesFn; // find vendor prefix

        ['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'].some(function (fn) {
          if (typeof document.body[fn] == 'function') {
            matchesFn = fn;
            return true;
          }

          return false;
        });
        var parent; // traverse parents

        while (elem) {
          parent = elem.parentElement;

          if (parent && parent[matchesFn](selector)) {
            return parent;
          }

          elem = parent;
        }

        return null;
      }
      /***/

    },
    /* 178 */

    /***/
    function (module, __webpack_exports__, __webpack_require__) {
      "use strict";
      /* harmony import */

      var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(4);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_2__classes_TimeSpan__ = __webpack_require__(3);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_react_dnd__ = __webpack_require__(7);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_3_react_dnd___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_react_dnd__);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_4__EventBase__ = __webpack_require__(54);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_5__Timeline__ = __webpack_require__(23);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6_object_assign__ = __webpack_require__(55);
      /* harmony import */


      var __WEBPACK_IMPORTED_MODULE_6_object_assign___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_object_assign__);

      function _typeof(obj) {
        if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
          _typeof = function _typeof(obj) {
            return _typeof2(obj);
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
          };
        }

        return _typeof(obj);
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          var ownKeys = Object.keys(source);

          if (typeof Object.getOwnPropertySymbols === 'function') {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
              return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
          }

          ownKeys.forEach(function (key) {
            _defineProperty(target, key, source[key]);
          });
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      var source = {
        beginDrag: function beginDrag(props, monitor, component) {
          return __WEBPACK_IMPORTED_MODULE_6_object_assign___default()({}, props, {
            draggingComponent: component
          });
        },
        canDrag: function canDrag(props, monitor, component) {
          var draggable = props.timeline.findEventById(props.id).state.draggable;
          return !!draggable;
        }
      };

      var collect = function collect(connect, monitor) {
        return {
          connectDragSource: connect.dragSource(),
          isDragging: monitor.isDragging()
        };
      };

      var Event =
      /*#__PURE__*/
      function (_React$Component) {
        _inherits(Event, _React$Component);

        function Event(props) {
          var _this;

          _classCallCheck(this, Event);

          _this = _possibleConstructorReturn(this, _getPrototypeOf(Event).call(this, props)); // ドラッグ&ドロップのパフォーマンスを上げるため、見た目に関係のないstateはメンバー変数にしてます。

          _this.lineId = _this.props.initialLineId;
          _this.timeSpan = _this.props.initialTimeSpan;
          _this.draggingPosition = null;
          _this.resizingTimeSpan = null;
          _this.resizing = false;
          _this.vars = _this.props.vars || {};
          _this.element = null; // 初期フロートのイベントはlineIdを持っていません。これはキャンセルした時にフローとした状態に戻したいからです。
          // 代わりにfloatの値を保持し、そこにフロートのまま戻すようにしています。

          _this.initialFloat = _this.props.float;
          _this.state = {
            top: props.float === undefined ? _this.props.timeline.timeToTop(_this.timeSpan.getStartTime()) : props.float.top,
            left: props.float === undefined ? _this.props.timeline.getLineLeft(_this.lineId) : props.float.left,
            color: _this.props.initialColor,
            draggable: _this.props.float === undefined ? false : true,
            resizable: false,
            draggingDisplay: '',
            display: _this.props.initialDisplay || []
          };

          if (_this.props.float) {
            // 高さを設定
            _this.state.height = _this.props.timeline.minuteToHeight(_this.props.float.minute);

            var time = _this.props.timeline.topToTime(_this.state.top);

            _this.draggingPosition = {
              time: time,
              lineId: undefined
            };
            _this.state.draggingDisplay = time.getDisplayTime();
            _this.timeSpan = new __WEBPACK_IMPORTED_MODULE_2__classes_TimeSpan__["a"
            /* default */
            ](time, time.addMin(_this.props.float.minute));
          } else {
            _this.state.height = _this.props.timeline.timeSpanToHeight(_this.timeSpan);
          }

          return _this;
        }

        _createClass(Event, [{
          key: "toJson",
          value: function toJson() {
            var json = {
              id: this.props.id,
              vars: _objectSpread({}, this.vars),
              color: this.state.color,
              display: this.state.display
            };

            if (this.state.draggable) {
              json.float = {
                top: this.state.top,
                left: this.state.left,
                minute: this.timeSpan.getDistance()
              };
            } else {
              json.position = {
                top: this.state.top,
                left: this.state.left
              };
              json.lineId = this.lineId;
              json.timeSpan = this.timeSpan;
            }

            return json;
          }
        }, {
          key: "update",
          value: function update(values) {
            var _this2 = this;

            var newState = {};

            if (values.timeSpan) {
              newState.height = this.props.timeline.timeSpanToHeight(values.timeSpan);
              newState.top = this.props.timeline.timeToTop(values.timeSpan.getStartTime());
              this.timeSpan = values.timeSpan;
            }

            if (values.color) {
              newState.color = values.color;
            }

            if (values.display) {
              newState.display = values.display;
            }

            if (values.vars) {
              Object.keys(values.vars).forEach(function (key) {
                _this2.vars[key] = values.vars[key];
              });
            }

            this.setState(newState);
          }
        }, {
          key: "isFreePosition",

          /**
           * 他のEventと重なっていないかチェックする
           * @param  {object}  position {lineId: ***, timeSpan: ***}
           * @return {Boolean}
           */
          value: function isFreePosition(position) {
            for (var i = 0; i < this.props.timeline.eventComponents.length; i++) {
              var ev = this.props.timeline.eventComponents[i];
              if (ev === this) continue;
              if (ev.lineId != position.lineId) continue;

              if (ev.currentTimeSpan.overlaps(position.timeSpan)) {
                return false;
              }
            }

            return true;
          }
        }, {
          key: "moveTo",
          value: function moveTo(top, left) {
            this.setState({
              top: top,
              left: left
            });
          }
        }, {
          key: "onClick",
          value: function onClick(e) {
            var _this3 = this;

            if (this.props.timeline.props.eventDidClick) {
              if (this.resizing) {
                return;
              }

              this.props.timeline.props.eventDidClick({
                position: {
                  scrollTop: this.props.timeline.frameComponent.refs.linesWrapper.scrollTop,
                  scrollLeft: this.props.timeline.frameComponent.element.scrollLeft,
                  top: e.clientY,
                  left: e.clientX
                },
                component: this,
                lineComponent: this.props.timeline.lineComponents.find(function (lineComponent) {
                  return lineComponent.props.id == _this3.lineId;
                }),
                event: e
              });
            }
          }
        }, {
          key: "dragging",
          value: function dragging(time, lineId) {
            this.draggingPosition = {
              time: time,
              lineId: lineId
            };
            this.setState({
              draggingDisplay: time.getDisplayTime()
            });
          }
        }, {
          key: "resizeUp",
          value: function resizeUp(e) {
            this.props.timeline.frameComponent.resizeUp(this, e.clientY);
          }
        }, {
          key: "resizeDown",
          value: function resizeDown(e) {
            this.props.timeline.frameComponent.resizeDown(this, e.clientY);
          }
        }, {
          key: "endResizing",
          value: function endResizing(e) {
            var _this4 = this;

            if (this.resizingTimeSpan) {
              var newState = {
                draggingDisplay: null,
                draggingDisplayTop: null
              };

              if (this.resizingTimeSpan) {
                newState.top = this.props.timeline.timeToTop(this.resizingTimeSpan.getStartTime());
                newState.height = this.props.timeline.timeSpanToHeight(this.resizingTimeSpan);
              }

              this.setState(newState);
            } else {
              this.onClick();
            } //onClickよりendResizingの先に発生してしまう。


            setTimeout(function () {
              return _this4.resizing = false;
            }, 100);
          }
        }, {
          key: "onContextMenu",
          value: function onContextMenu(e) {
            if (this.props.timeline.props.eventDidRightClick) {
              this.props.timeline.props.eventDidRightClick({
                event: e,
                component: this
              });
            }
          }
        }, {
          key: "getDraggingStyle",
          value: function getDraggingStyle() {
            return {
              height: this.state.height,
              width: this.props.width,
              top: this.state.top,
              left: this.state.left,
              backgroundColor: this.state.color
            };
          }
        }, {
          key: "getOffset",
          value: function getOffset() {
            return {
              top: this.state.top,
              left: this.state.left
            };
          }
        }, {
          key: "setColor",
          value: function setColor(color) {
            this.setState({
              color: color
            });
          }
        }, {
          key: "setDisplay",
          value: function setDisplay(display) {
            this.setState({
              display: display
            });
          }
        }, {
          key: "resize",
          value: function resize() {
            this.setState({
              resizable: true
            });
          }
        }, {
          key: "float",
          value: function float() {
            this.setState({
              draggable: true,
              draggingDisplay: this.timeSpan.getStartTime().getDisplayTime()
            });
            this.draggingPosition = {
              time: this.timeSpan.getStartTime(),
              lineId: this.lineId
            };
          }
        }, {
          key: "isFixed",
          value: function isFixed() {
            return !this.state.draggable && !this.state.resizable;
          }
        }, {
          key: "isFixable",
          value: function isFixable() {
            var newPosition = this.nextPosition;

            if (!newPosition) {
              return true;
            }

            return this.isFreePosition(newPosition);
          }
        }, {
          key: "isCancelable",
          value: function isCancelable() {
            var newPosition = this.prevPosition;

            if (!newPosition) {
              return true;
            }

            return this.isFreePosition(newPosition);
          }
        }, {
          key: "cancel",
          value: function cancel() {
            if (this.draggingPosition) {
              var newState = {};
              this.clearCurrentDraggingOver();

              if (this.lineId === undefined) {
                newState.left = this.initialFloat.left;
                newState.top = this.initialFloat.top;
                newState.draggingDisplay = this.timeSpan.getStartTime().getDisplayTime();
              } else {
                newState.left = this.props.timeline.getLineLeft(this.lineId);
                newState.top = this.props.timeline.timeToTop(this.timeSpan.getStartTime());
                newState.draggable = false;
                newState.draggingDisplay = '';
              }

              this.draggingPosition = null;
              this.setState(newState);
            } else if (this.resizingTimeSpan) {
              var top = this.props.timeline.timeToTop(this.timeSpan.getStartTime());
              var height = this.props.timeline.timeSpanToHeight(this.timeSpan);
              this.resizingTimeSpan = null;
              this.setState({
                resizable: false,
                draggingDisplay: '',
                top: top,
                height: height
              });
            } else {
              this.setState({
                draggable: false,
                resizable: false,
                draggingDisplay: ''
              });
            }
          }
        }, {
          key: "getMinute",
          value: function getMinute() {
            if (this.timeSpan) {
              return this.timeSpan.getDistance();
            } else if (this.props.float) {
              return parseInt(this.props.float.minute, 10);
            }
          }
        }, {
          key: "fix",
          value: function fix() {
            if (this.draggingPosition) {
              var state = {
                top: this.props.timeline.timeToTop(this.draggingPosition.time),
                left: this.props.timeline.getLineLeft(this.draggingPosition.lineId),
                draggable: false,
                draggingDisplay: ''
              };
              var newTimeSpan = this.timeSpan.shiftStartTime(this.draggingPosition.time);

              if (this.props.timeline.props.eventWillFix) {
                this.props.timeline.props.eventWillFix({
                  component: this,
                  state: state,
                  lineId: this.draggingPosition.lineId,
                  timeSpan: newTimeSpan
                });
              }

              this.setState(state);
              this.lineId = this.draggingPosition.lineId;
              this.timeSpan = newTimeSpan;
              this.clearCurrentDraggingOver();
              this.draggingPosition = null;
            } else if (this.resizingTimeSpan) {
              var _state = {
                resizable: false,
                draggingDisplay: ''
              };

              if (this.props.timeline.props.eventWillFix) {
                this.props.timeline.props.eventWillFix({
                  component: this,
                  state: _state,
                  lineId: this.lineId,
                  timeSpan: this.resizingTimeSpan
                });
              }

              this.setState(_state);
              this.timeSpan = this.resizingTimeSpan;
              this.resizingTimeSpan = null;
            } else {
              this.setState({
                draggable: false,
                resizable: false,
                draggingDisplay: ''
              });
            }

            if (this.props.timeline.props.eventDidFix) {
              this.props.timeline.props.eventDidFix({
                component: this
              });
            }
          }
        }, {
          key: "setVar",
          value: function setVar(key, value) {
            this.vars[key] = value;
          }
        }, {
          key: "getVar",
          value: function getVar(key) {
            return this.vars[key];
          }
        }, {
          key: "componentDidMount",
          value: function componentDidMount() {
            this.props.timeline.eventComponents.push(this);
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            var _this5 = this;

            this.props.timeline.eventComponents = this.props.timeline.eventComponents.filter(function (ev) {
              return ev !== _this5;
            });
            this.clearCurrentDraggingOver();
          }
        }, {
          key: "clearCurrentDraggingOver",
          value: function clearCurrentDraggingOver() {
            if (!this.draggingPosition) return;
            if (!this.draggingPosition.lineId) return;
            var line = this.props.timeline.findLineById(this.draggingPosition.lineId);
            if (!line) return;
            line.clearDraggingOver();
          }
        }, {
          key: "correctPosition",
          value: function correctPosition() {
            if (this.state.draggable) {
              var newPos = {}; // lineを特定する

              var line = this.props.timeline.findLineByLeft(this.state.left); // はみ出てたら移動

              if (!line) {
                line = this.props.timeline.lastLine;
              }

              if (line) {
                newPos.left = this.props.timeline.getLineLeft(line.props.id);
                if (this.initialFloat) this.initialFloat.left = newPos.left;
                this.draggingPosition.lineId = line.props.id;
              } // 高さがはみ出てないかチェック


              var bottom = this.props.timeline.timeToTop(this.props.timeline.timeSpan.getEndTime()) - this.state.height;

              if (this.state.top > bottom) {
                newPos.top = bottom;
                if (this.initialFloat) this.initialFloat.top = newPos.top;
                var time = this.props.timeline.topToTime(newPos.top);
                this.draggingPosition.time = time;
                newPos.draggingDisplay = time.getDisplayTime();
                this.timeSpan = new __WEBPACK_IMPORTED_MODULE_2__classes_TimeSpan__["a"
                /* default */
                ](time, time.addMin(this.timeSpan.getDistance()));
              }

              if (Object.keys(newPos).length) {
                this.setState(newPos);
              }
            }
          }
        }, {
          key: "render",
          value: function render() {
            var _this6 = this;

            var style = {
              height: this.state.height,
              position: 'absolute',
              top: this.state.top + 'px',
              left: this.state.left + 'px',
              width: this.props.width + 'px',
              backgroundColor: this.state.color,
              display: this.props.isDragging ? 'none' : 'block'
            };
            return this.props.connectDragSource(__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
              "data-id": this.props.id,
              ref: function ref(elem) {
                return _this6.element = elem;
              },
              onContextMenu: function onContextMenu(e) {
                return _this6.onContextMenu(e);
              },
              className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()('tlEventView', {
                tlDraggingEvent: this.state.draggable,
                tlResizableEvent: this.state.resizable
              }),
              style: style,
              onClick: function onClick(e) {
                return _this6.onClick(e);
              }
            }, function () {
              if (_this6.state.resizable) {
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                  className: "tlResizeHandle",
                  onTouchStart: function onTouchStart(e) {
                    return _this6.resizeUp(e);
                  },
                  onMouseDown: function onMouseDown(e) {
                    return _this6.resizeUp(e);
                  }
                }, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("i", {
                  className: "fa fa-bars",
                  "aria-hidden": "true"
                }));
              }
            }(), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__EventBase__["a"
            /* default */
            ], {
              draggingDisplay: this.state.draggingDisplay,
              draggingDisplayTop: this.state.draggingDisplayTop,
              display: this.state.display,
              timeline: this.props.timeline,
              right: this.state.left + this.props.width
            }), function () {
              if (_this6.state.resizable) {
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
                  className: "tlResizeHandle tlBottom",
                  onTouchStart: function onTouchStart(e) {
                    return _this6.resizeDown(e);
                  },
                  onMouseDown: function onMouseDown(e) {
                    return _this6.resizeDown(e);
                  }
                }, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("i", {
                  className: "fa fa-bars",
                  "aria-hidden": "true"
                }));
              }
            }()));
          }
        }, {
          key: "currentTimeSpan",
          get: function get() {
            return this.resizingTimeSpan || this.timeSpan;
          }
        }, {
          key: "nextPosition",
          get: function get() {
            if (this.draggingPosition) {
              return {
                lineId: this.draggingPosition.lineId,
                timeSpan: this.timeSpan.shiftStartTime(this.draggingPosition.time)
              };
            } else if (this.resizingTimeSpan) {
              return {
                lineId: this.lineId,
                timeSpan: this.resizingTimeSpan
              };
            }

            return null;
          }
        }, {
          key: "prevPosition",
          get: function get() {
            if (!this.draggingPosition && !this.resizingTimeSpan) {
              return null;
            } else {
              return {
                lineId: this.lineId,
                timeSpan: this.timeSpan
              };
            }
          }
        }]);

        return Event;
      }(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);
      /* harmony default export */


      __webpack_exports__["a"] = Object(__WEBPACK_IMPORTED_MODULE_3_react_dnd__["DragSource"])("Event", source, collect)(Event);
      /***/
    }])
  );
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(3);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_dom__ = __webpack_require__(9);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react_dom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react_dom__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index_js__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__index_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__index_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__events__ = __webpack_require__(11);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__gomo_react_context_menu__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__gomo_react_context_menu___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__gomo_react_context_menu__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }







var App =
/*#__PURE__*/
function (_React$Component) {
  _inherits(App, _React$Component);

  function App(props) {
    var _this;

    _classCallCheck(this, App);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));
    _this.$wrapper = $('#app');
    _this.eventMenu = null;
    _this.state = {
      lines: [{
        label: 'label1',
        id: '__1'
      }, {
        label: 'label2',
        id: '__2'
      }, {
        label: 'label3',
        id: '__3'
      }, {
        label: 'label4',
        id: '__4'
      }, {
        label: 'label5',
        id: '__5'
      }, {
        label: 'label6',
        id: '__6'
      }, {
        label: 'label7',
        id: '__7'
      }, {
        label: 'label8',
        id: '__8'
      }, {
        label: 'label9',
        id: '__9'
      }, {
        label: 'label10',
        id: '__10'
      }, {
        label: 'label11',
        id: '__11'
      }, {
        label: 'label12',
        id: '__12'
      }, {
        label: 'label13',
        id: '__13'
      }, {
        label: 'label14',
        id: '__14'
      }, {
        label: 'label15',
        id: '__15'
      }, {
        label: 'label16',
        id: '__16'
      }, {
        label: 'label17',
        id: '__17'
      }, {
        label: 'label18',
        id: '__18'
      }],
      events: __WEBPACK_IMPORTED_MODULE_3__events__["a" /* default */],
      timeSpan: __WEBPACK_IMPORTED_MODULE_2__index_js__["TimeSpan"].create([10, 0], [25, 0]),
      height: _this.calcHeight()
    };

    window.onresize = function () {
      _this.setState({
        height: _this.calcHeight()
      });
    };

    _this.lastLineId = 18;
    return _this;
  }

  _createClass(App, [{
    key: "calcHeight",
    value: function calcHeight() {
      var wrapperBounds = this.$wrapper.get(0).getBoundingClientRect();
      var windowSize = this.getWindowSize();
      return windowSize.height - wrapperBounds.top;
    }
  }, {
    key: "getWindowSize",
    value: function getWindowSize() {
      var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
      var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
      return {
        width: width,
        height: height
      };
    }
  }, {
    key: "generateEventId",
    value: function generateEventId() {
      this.lastEventId = this.lastEventId || 0;
      this.lastEventId += 1;
      return 'new_' + this.lastEventId;
    }
  }, {
    key: "addEvent",
    value: function addEvent(data) {
      this.setState({
        events: _toConsumableArray(this.state.events).concat([{
          id: this.generateEventId(),
          lineId: data.component.props.id,
          timeSpan: new __WEBPACK_IMPORTED_MODULE_2__index_js__["TimeSpan"](data.time, data.time.addMin(60)),
          color: '#FFDCB6',
          display: [{
            key: 'startTime',
            value: data.time.getDisplayTime()
          }]
        }])
      });
    }
  }, {
    key: "addLine",
    value: function addLine() {
      ++this.lastLineId;
      this.setState({
        lines: _toConsumableArray(this.state.lines).concat([{
          label: 'label' + this.lastLineId,
          id: '__' + this.lastLineId
        }])
      });
    }
  }, {
    key: "removeLine",
    value: function removeLine(id) {
      this.setState({
        lines: this.state.lines.filter(function (line) {
          return line.id != id;
        })
      });
    }
  }, {
    key: "removeEvent",
    value: function removeEvent(id) {
      this.setState({
        events: this.state.events.filter(function (event) {
          return event.id != id;
        })
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("div", {
        style: {
          marginBottom: '20px'
        }
      }, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("button", {
        onClick: function onClick() {
          return _this2.addLine();
        }
      }, "LINE\u3092\u8FFD\u52A0"), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("button", {
        onClick: function onClick() {
          return console.log(_this2.timeline.eventComponents.map(function (ev) {
            return ev.toJson();
          }));
        }
      }, "toJson")), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__gomo_react_context_menu___default.a, {
        ref: function ref(menu) {
          return _this2.eventMenu = menu;
        },
        items: [{
          name: function name(context) {
            return 'float';
          },
          onClick: function onClick(context) {
            return context.component.float();
          },
          show: function show(context) {
            return context.component.constructor.name == 'Event' && context.component.isFixed();
          }
        }, {
          name: function name(context) {
            return 'resize';
          },
          onClick: function onClick(context) {
            return context.component.resize();
          },
          show: function show(context) {
            return context.component.constructor.name == 'Event' && context.component.isFixed();
          }
        }, {
          name: function name(context) {
            return 'cancel';
          },
          onClick: function onClick(context) {
            return context.component.cancel();
          },
          show: function show(context) {
            return context.component.constructor.name == 'Event' && !context.component.isFixed();
          }
        }, {
          name: function name(context) {
            return 'fix';
          },
          onClick: function onClick(context) {
            return context.component.fix();
          },
          show: function show(context) {
            return context.component.constructor.name == 'Event' && !context.component.isFixed();
          }
        }, {
          name: function name(context) {
            return '-';
          },
          show: function show(context) {
            return context.component.constructor.name == 'Event';
          }
        }, {
          name: function name(context) {
            return 'remove';
          },
          onClick: function onClick(context) {
            var timeline = context.component.props.timeline;

            if (context.component.constructor.name == 'Line') {
              _this2.removeLine(context.component.props.id);
            } else {
              _this2.removeEvent(context.component.props.id);
            }
          },
          enable: function enable(context) {
            var timeline = context.component.props.timeline;

            if (context.component.constructor.name == 'Line') {
              return true;
              var events = timeline.getEventsOnLine(context.component.props.id);
              return events.length === 0;
            } else {
              return true;
            }
          }
        }],
        zIndex: 1000
      }), __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__index_js__["Timeline"], {
        ref: function ref(com) {
          return _this2.timeline = com;
        },
        lineData: this.state.lines,
        timeSpan: this.state.timeSpan,
        events: this.state.events,
        lineWidth: 62,
        minHeight: 17,
        minInterval: 5,
        rulerInterval: 4,
        height: this.state.height,
        lineDidClick: function lineDidClick(data) {
          return _this2.addEvent(data);
        },
        lineDidRightClick: function lineDidRightClick(data) {
          data.event.preventDefault();

          _this2.eventMenu.show({
            top: data.event.clientY,
            left: data.event.clientX
          }, data);
        },
        eventDidClick: function eventDidClick(data) {
          console.log('left', data);
          data.component.update({
            vars: {
              foobar: 'hoge'
            }
          });
        },
        eventDidRightClick: function eventDidRightClick(data) {
          data.event.preventDefault();

          _this2.eventMenu.show({
            top: data.event.clientY,
            left: data.event.clientX
          }, data);
        },
        eventWillFix: function eventWillFix(data) {
          var display = data.component.state.display.filter(function (row) {
            return row.key != 'startTime';
          });
          display.push({
            key: 'startTime',
            value: data.timeSpan.getStartTime().getDisplayTime()
          });
          data.state.display = display;
        },
        eventDidFix: function eventDidFix(data) {
          console.log(data);
        }
      }));
    }
  }]);

  return App;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

$(function () {
  __WEBPACK_IMPORTED_MODULE_1_react_dom___default.a.render(__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(App, null), document.getElementById('app'));
});

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = ReactDOM;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index_js__ = __webpack_require__(6);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__index_js__);

/* harmony default export */ __webpack_exports__["a"] = ([{
  id: '1231',
  lineId: '__1',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '1241',
  lineId: '__1',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '1251',
  lineId: '__1',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '1261',
  lineId: '__1',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([18, 30], [19, 30]),
  color: '#FFDCB6'
}, {
  id: '1271',
  lineId: '__1',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([19, 30], [20, 30]),
  color: '#FFDCB6'
}, {
  id: '1281',
  lineId: '__1',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([20, 30], [21, 30]),
  color: '#FFDCB6'
}, {
  id: '1291',
  lineId: '__1',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([22, 30], [23, 30]),
  color: '#FFDCB6'
}, {
  id: '123',
  lineId: '__2',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '124',
  lineId: '__2',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '125',
  lineId: '__2',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '1233',
  lineId: '__3',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '1243',
  lineId: '__3',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '1253',
  lineId: '__3',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '1234',
  lineId: '__4',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '1244',
  lineId: '__4',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '1254',
  lineId: '__4',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12355',
  lineId: '__5',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12455',
  lineId: '__5',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12555',
  lineId: '__5',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '1226',
  lineId: '__6',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([11, 15], [12, 30]),
  color: '#FFDCB6'
}, {
  id: '1236',
  lineId: '__6',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '1246',
  lineId: '__6',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '1256',
  lineId: '__6',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '1266',
  lineId: '__6',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([18, 30], [19, 30]),
  color: '#FFDCB6'
}, {
  id: '1276',
  lineId: '__6',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([19, 30], [20, 30]),
  color: '#FFDCB6'
}, {
  id: '1286',
  lineId: '__6',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([20, 30], [21, 30]),
  color: '#FFDCB6'
}, {
  id: '1296',
  lineId: '__6',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([22, 30], [23, 30]),
  color: '#FFDCB6'
}, {
  id: '12377',
  lineId: '__7',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12477',
  lineId: '__7',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12577',
  lineId: '__7',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '1228',
  lineId: '__8',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([11, 15], [12, 30]),
  color: '#FFDCB6'
}, {
  id: '1238',
  lineId: '__8',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '1248',
  lineId: '__8',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '1258',
  lineId: '__8',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '1268',
  lineId: '__8',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([18, 30], [19, 30]),
  color: '#FFDCB6'
}, {
  id: '1278',
  lineId: '__8',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([19, 30], [20, 30]),
  color: '#FFDCB6'
}, {
  id: '1288',
  lineId: '__8',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([20, 30], [21, 30]),
  color: '#FFDCB6'
}, {
  id: '1298',
  lineId: '__8',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([22, 30], [23, 30]),
  color: '#FFDCB6'
}, {
  id: '1239',
  lineId: '__9',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '1249',
  lineId: '__9',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '1259',
  lineId: '__9',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12210',
  lineId: '__10',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([11, 15], [12, 30]),
  color: '#FFDCB6'
}, {
  id: '12310',
  lineId: '__10',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12410',
  lineId: '__10',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12510',
  lineId: '__10',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12610',
  lineId: '__10',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([18, 30], [19, 30]),
  color: '#FFDCB6'
}, {
  id: '12710',
  lineId: '__10',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([19, 30], [20, 30]),
  color: '#FFDCB6'
}, {
  id: '12810',
  lineId: '__10',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([20, 30], [21, 30]),
  color: '#FFDCB6'
}, {
  id: '12910',
  lineId: '__10',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([22, 30], [23, 30]),
  color: '#FFDCB6'
}, {
  id: '12311',
  lineId: '__11',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12411',
  lineId: '__11',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12511',
  lineId: '__11',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12312',
  lineId: '__12',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12412',
  lineId: '__12',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12512',
  lineId: '__12',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12213',
  lineId: '__13',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([11, 15], [12, 30]),
  color: '#FFDCB6'
}, {
  id: '12313',
  lineId: '__13',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12413',
  lineId: '__13',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12513',
  lineId: '__13',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12613',
  lineId: '__13',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([18, 30], [19, 30]),
  color: '#FFDCB6'
}, {
  id: '12713',
  lineId: '__13',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([19, 30], [20, 30]),
  color: '#FFDCB6'
}, {
  id: '12813',
  lineId: '__13',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([20, 30], [21, 30]),
  color: '#FFDCB6'
}, {
  id: '12913',
  lineId: '__13',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([22, 30], [23, 30]),
  color: '#FFDCB6'
}, {
  id: '12314',
  lineId: '__14',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12414',
  lineId: '__14',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12514',
  lineId: '__14',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12315',
  lineId: '__15',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12415',
  lineId: '__15',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12515',
  lineId: '__15',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12216',
  lineId: '__16',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([11, 15], [12, 30]),
  color: '#FFDCB6'
}, {
  id: '12316',
  lineId: '__16',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12416',
  lineId: '__16',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12516',
  lineId: '__16',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12616',
  lineId: '__16',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([18, 30], [19, 30]),
  color: '#FFDCB6'
}, {
  id: '12716',
  lineId: '__16',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([19, 30], [20, 30]),
  color: '#FFDCB6'
}, {
  id: '12816',
  lineId: '__16',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([20, 30], [21, 30]),
  color: '#FFDCB6'
}, {
  id: '12916',
  lineId: '__16',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([22, 30], [23, 30]),
  color: '#FFDCB6'
}, {
  id: '12217',
  lineId: '__17',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([11, 15], [12, 30]),
  color: '#FFDCB6'
}, {
  id: '12317',
  lineId: '__17',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12417',
  lineId: '__17',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12517',
  lineId: '__17',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12617',
  lineId: '__17',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([18, 30], [19, 30]),
  color: '#FFDCB6'
}, {
  id: '12717',
  lineId: '__17',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([19, 30], [20, 30]),
  color: '#FFDCB6'
}, {
  id: '12817',
  lineId: '__17',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([20, 30], [21, 30]),
  color: '#FFDCB6'
}, {
  id: '12917',
  lineId: '__17',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([22, 30], [23, 30]),
  color: '#FFDCB6'
}, {
  id: '12218',
  lineId: '__18',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([11, 15], [12, 30]),
  color: '#FFDCB6'
}, {
  id: '12318',
  lineId: '__18',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([12, 30], [13, 30]),
  color: '#FFDCB6'
}, {
  id: '12418',
  lineId: '__18',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([14, 0], [16, 30]),
  color: '#FFDCB6'
}, {
  id: '12518',
  lineId: '__18',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([17, 0], [18, 30]),
  color: '#FFDCB6'
}, {
  id: '12618',
  lineId: '__18',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([18, 30], [19, 30]),
  color: '#FFDCB6'
}, {
  id: '12718',
  lineId: '__18',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([19, 30], [20, 30]),
  color: '#FFDCB6'
}, {
  id: '12818',
  lineId: '__18',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([20, 30], [21, 30]),
  color: '#FFDCB6'
}, {
  id: '12918',
  lineId: '__18',
  timeSpan: __WEBPACK_IMPORTED_MODULE_0__index_js__["TimeSpan"].create([22, 30], [23, 30]),
  color: '#FFDCB6'
}, {
  id: 'float1',
  color: '#FFB6B6',
  float: {
    top: 10,
    left: 10,
    minute: 60
  }
}, {
  id: 'float2',
  color: '#FFB6B6',
  float: {
    top: 10000,
    left: 10000,
    minute: 60
  }
}]);

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory(__webpack_require__(1), __webpack_require__(2), __webpack_require__(13));
	else if(typeof define === 'function' && define.amd)
		define(["react", "classnames", "prop-types"], factory);
	else {
		var a = typeof exports === 'object' ? factory(require("react"), require("classnames"), require("prop-types")) : factory(root["React"], root["classNames"], root["PropTypes"]);
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContextMenu = undefined;

var _ContextMenu = __webpack_require__(2);

var _ContextMenu2 = _interopRequireDefault(_ContextMenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.ContextMenu = _ContextMenu2.default;
exports.default = _ContextMenu2.default;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _objectAssign = __webpack_require__(3);

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _ContextMenuItem = __webpack_require__(4);

var _ContextMenuItem2 = _interopRequireDefault(_ContextMenuItem);

var _propTypes = __webpack_require__(6);

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ContextMenu = function (_React$Component) {
  _inherits(ContextMenu, _React$Component);

  _createClass(ContextMenu, null, [{
    key: 'getWindowSize',
    value: function getWindowSize() {
      var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;

      var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;

      return { width: width, height: height };
    }
  }]);

  function ContextMenu(props) {
    _classCallCheck(this, ContextMenu);

    var _this = _possibleConstructorReturn(this, (ContextMenu.__proto__ || Object.getPrototypeOf(ContextMenu)).call(this, props));

    _this.state = {
      style: {
        position: 'absolute',
        display: 'none',
        zIndex: _this.props.zIndex
      }
    };

    _this.overlay = document.createElement('div');
    _this.overlay.setAttribute('class', 'rmMenuOverlay');
    _this.overlay.style["position"] = 'absolute';
    _this.overlay.style["top"] = '0';
    _this.overlay.style["left"] = '0';
    _this.overlay.style["display"] = 'none';
    _this.overlay.style["zIndex"] = _this.props.zIndex - 1;
    document.body.appendChild(_this.overlay);
    _this.overlay.addEventListener('click', function (e) {
      return _this.close();
    });
    _this.overlay.addEventListener('contextmenu', function (e) {
      e.preventDefault();
      _this.close();
    });
    return _this;
  }

  _createClass(ContextMenu, [{
    key: 'show',
    value: function show(pos, context) {
      var _this2 = this;

      this.setState({
        style: (0, _objectAssign2.default)({}, this.state.style, pos, { display: 'block' }),
        context: context
      }, function () {
        var windowSize = ContextMenu.getWindowSize();
        _this2.overlay.style["width"] = windowSize.width + 'px';
        _this2.overlay.style["height"] = windowSize.height + 'px';
        _this2.overlay.style['display'] = 'block';
      });
    }
  }, {
    key: 'onMouseOut',
    value: function onMouseOut() {
      console.log('out');
    }
  }, {
    key: 'onMouseOver',
    value: function onMouseOver() {
      console.log('over');
    }
  }, {
    key: 'close',
    value: function close() {
      var _this3 = this;

      this.setState({ style: (0, _objectAssign2.default)({}, this.state.style, { display: 'none' }) }, function () {
        _this3.overlay.style['display'] = 'none';
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      return _react2.default.createElement(
        'div',
        { ref: 'menu', className: 'rmMenu', style: this.state.style },
        _react2.default.createElement(
          'ul',
          { className: 'rmMenuItemList' },
          this.state.context ? this.props.items.map(function (item, key) {
            if (!item.show || item.show(_this4.state.context)) {
              return _react2.default.createElement(_ContextMenuItem2.default, {
                key: key,
                name: item.name(_this4.state.context),
                onClick: item.onClick,
                menu: _this4,
                enable: item.enable ? item.enable(_this4.state.context) : true
              });
            }
          }) : null
        )
      );
    }
  }]);

  return ContextMenu;
}(_react2.default.Component);

exports.default = ContextMenu;


ContextMenu.propTypes = {
  items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    name: _propTypes2.default.func.isRequired,
    onClick: _propTypes2.default.func,
    show: _propTypes2.default.func,
    enable: _propTypes2.default.func
  })).isRequired,
  zIndex: _propTypes2.default.number
};

ContextMenu.defaultProps = {
  zIndex: 100
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _classnames = __webpack_require__(5);

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ContextMenuItem = function (_React$Component) {
  _inherits(ContextMenuItem, _React$Component);

  function ContextMenuItem(props) {
    _classCallCheck(this, ContextMenuItem);

    var _this = _possibleConstructorReturn(this, (ContextMenuItem.__proto__ || Object.getPrototypeOf(ContextMenuItem)).call(this, props));

    _this.state = {
      mouseOver: false
    };
    return _this;
  }

  _createClass(ContextMenuItem, [{
    key: 'onMouseOut',
    value: function onMouseOut() {
      if (this.props.enable) {
        this.setState({ mouseOver: false });
      }
    }
  }, {
    key: 'onMouseOver',
    value: function onMouseOver() {
      if (this.props.enable) {
        this.setState({ mouseOver: true });
      }
    }
  }, {
    key: 'onClick',
    value: function onClick(e) {
      if (this.props.enable) {
        this.props.onClick(this.props.menu.state.context);
        this.props.menu.close();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return _react2.default.createElement('li', {
        className: (0, _classnames2.default)("rmMenuItem", { rmMouseOver: this.state.mouseOver, rmDisabled: !this.props.enable, rmSeparator: this.props.name == '-' }),
        onMouseOver: function onMouseOver(e) {
          return _this2.onMouseOver(e);
        },
        onMouseOut: function onMouseOut(e) {
          return _this2.onMouseOut(e);
        },
        onClick: function onClick(e) {
          return _this2.onClick(e);
        },
        dangerouslySetInnerHTML: { __html: this.props.name == '-' ? null : this.props.name }
      });
    }
  }]);

  return ContextMenuItem;
}(_react2.default.Component);

exports.default = ContextMenuItem;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(14)(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(16)();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var emptyFunction = __webpack_require__(3);
var invariant = __webpack_require__(4);
var warning = __webpack_require__(7);

var ReactPropTypesSecret = __webpack_require__(5);
var checkPropTypes = __webpack_require__(15);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



if (process.env.NODE_ENV !== 'production') {
  var invariant = __webpack_require__(4);
  var warning = __webpack_require__(7);
  var ReactPropTypesSecret = __webpack_require__(5);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



var emptyFunction = __webpack_require__(3);
var invariant = __webpack_require__(4);
var ReactPropTypesSecret = __webpack_require__(5);

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    invariant(
      false,
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,